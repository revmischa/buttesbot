{
  "1": "{} {return \"\u000309\u00021 1 1 1 1 1 1 1 1 1 1 1\u0003\u000309\u0002\\n\u0003\u000309\u0002 1 1 1 1 1 1 1 1 1 1 1\u0003\u000309\u0002 \\n\u0003\u000309\u00021 1 1 1 1 1 1 1 1 1 1 1\u0003\u000309\u0002\\n\u0003\u000309\u0002 1 1 1 1 1 1 1 1 1 1 1\u0003\u000309\u0002 \\n\u0003\u000309\u00021 1 1 1 1 1 1 1 1 1 1 1\u0003\u000309\u0002\"}\n",
  "2": "{} {return \"\u000304\u00022 2 2 2 2 2 2 2 2 2 2 2\u000f\u000f\\n\u000304\u0002 2 2 2 2 2 2 2 2 2 2 2 \u000f\u000f\\n\u000304\u00022 2 2 2 2 2 2 2 2 2 2 2\u000f\u000f\\n\u000304\u0002 2 2 2 2 2 2 2 2 2 2 2 \u000f\u000f\\n\u000304\u00022 2 2 2 2 2 2 2 2 2 2 2\u000f\u000f\"}\n",
  "3": "{} {return \"\u000305\u00023 3 3 3 3 3 3 3 3 3 3 3\u000f\u000f\\n\u000305\u0002 3 3 3 3 3 3 3 3 3 3 3 \u000f\u000f\\n\u000305\u00023 3 3 3 3 3 3 3 3 3 3 3\u000f\u000f\\n\u000305\u0002 3 3 3 3 3 3 3 3 3 3 3 \u000f\u000f\\n\u000305\u00023 3 3 3 3 3 3 3 3 3 3 3\u000f\u000f\"}\n",
  "4": "{} {return \"\u000307\u00024 4 4 4 4 4 4 4 4 4 4 4\u000f\u000f\\n\u000307\u0002 4 4 4 4 4 4 4 4 4 4 4 \u000f\u000f\\n\u000307\u00024 4 4 4 4 4 4 4 4 4 4 4\u000f\u000f\\n\u000307\u0002 4 4 4 4 4 4 4 4 4 4 4 \u000f\u000f\\n\u000307\u00024 4 4 4 4 4 4 4 4 4 4 4\u000f\u000f\"}\n",
  "5": "{} {return \"\u000308\u00025 5 5 5 5 5 5 5 5 5 5 5\u000f\\n\u000308\u0002 5 5 5 5 5 5 5 5 5 5 5 \u000f\\n\u000308\u00025 5 5 5 5 5 5 5 5 5 5 5\u000f\\n\u000308\u0002 5 5 5 5 5 5 5 5 5 5 5 \u000f\\n\u000308\u00025 5 5 5 5 5 5 5 5 5 5 5\u000f\"}\n",
  "40": "{} {. you had a beer :D \\ngood job!}\n",
  "69": "{} {return \"I got a 69 problem because of a [singlerandomword].\"}\n",
  "99": "{} {return \"I got 99 problems and a [singlerandomword] ain't one.\"}\n",
  "419": "args {caption http\\://images.inmagine.com/img/imagestate/ss138/hw1859.jpg [or [join $args] [?? [lines [nigeria]]]]}\n",
  "420": "{} {stack [img-420] [choose \"FO'TWENNY SMOKE WEED EVERYDAY\" \"420 WAR ON DRUGS EVERYDAY\" \"420 WAR ON NUGS TWICE A DAY\" [winkie2]]}\n",
  "555": "{} {return \"\u00038,8*****\u000f     \u00038,8*****\u000f     \u00038,8*****\u000f\\n\u00038,8*\u000f         \u00038,8*\u000f         \u00038,8*\u000f    \\n\u00038,8****\u000f      \u00038,8****\u000f      \u00038,8****\u000f \\n    \u00038,8*\u000f         \u00038,8*\u000f         \u00038,8*\u000f\\n\u00038,8****\u000f      \u00038,8****\u000f      \u00038,8****\u000f \"}\n",
  "911": "{} {lindex_random $::911questions}\n",
  "1984": "{} {upper \"If you want a picture of the future, imagine a [big_word] [choose GAY POZZY HOMO HOMOSEXUAL CUCKOLDING] [penis_word] [choose BASHING SMASHING WHACKING SMUSHING SLAPPING] a human [choose MOUTH ASS TAINT EYE EAR URETHRA FACE COCK]-- [time_word]!\"}\n",
  "5555": "{} {gold [blackjack_print_hand {H.5 C.5 D.5 S.5}]}\n",
  "cached_barjoke": "{} {if [catch barjoke result] {set result [lindex_random $::cached_barjoke]}; cache_list cached_barjoke $result}\n",
  "greeting": "{} {lindex_random $::greeting_dict}\n",
  "bugtraq": "{} {. \"Vuln: [capitalize [shsc_word]]: [underscore [random_word]].php [?? {{Remote File Include} {SQL Injection} {Cross-Site Scripting} {Session Fixation} {Request Forgery}}] Vulnerabilit[?? {y ies}]\"}\n",
  "rand_digit": "{} {format %c [expr {int(48+rand()*10)}]}\n",
  "moiraa": "{} {ladysay \"but stop saying it isn't the case that I've never ssh'd into a config or a MOTD file and edited it\" }\n",
  "xDkatz": "{} {aflip [ajoin \"\" [flip [rain [halfcat]]] [wrap [join [rain \"XD\"]] 25] \"\\n\\\\\" [rain [halfcat]]]}\n",
  "fuckit": "args {. fuck [?? $::fuck_dict]}\n",
  "beepabuse": "{} {giga beep}\n",
  "STcake": "{} {. [color yellow] @ @ @ @ @ @ @[^O]\\n[color]_|_|_|_|_|_|_|_[^O]\\n[color blue]|^^^^^^^^^^^^^^|[^O]\\n[color red]****************[^O]\\n[color blue]|______________|[^O]}\n",
  "mmm": "{} {. [fatgoon_finale].}\n",
  "virtual_eating": "{} {stampsay -s  geordigoon \"Oh wow VR Eating !! Now no one is going to make fun of my virtual recipe: [fatgoonmeal]\"}\n",
  "americanize": "args {return [bold][join [mapx [split [strip_all [join $args]] {}] x {join [list [eval color [next_in_list {{white on red} {black on white} {white on blue}}]] $x] \"\"}] \"\"]}\n",
  "g1": "{} {wet gud 1}\n",
  "appliance": "{} cooking_appliance\n",
  "krauts?": "{} {return \"[llength [lfilter nec* [names]]] krauts too many\"}\n",
  "magick_composite_top_left": "{urlbottom urltop} {magick composite $urlbottom [magick_id $urltop] 0 0}\n",
  "grift": "{{who {}}} {. \"[upper hey [name $who], want to [choose buy eat] some [grift_word] for $[lindex_random [seq 10 100]]]\"}\n",
  "aimf_winkz": "args {aimify winkz $args}\n",
  "what": "{} {proc what what}\n",
  "winkz_glossary": "{} {urban [?? [strip_all [winkz]]]}\n",
  "twitterize": "args {string range [string map {\"\\n\" \" \"} [join $args]] 0 140}\n",
  "drudgeattack": "{} {string toupper [subst [join [lindex $::drudge_headlines 7 ]]]}\n",
  "catwx": "{} {catback [myt]}\n",
  "sajoin": "args {uplevel #0 [concat ajoin \" \" $args]}\n",
  "dancingfontchar": "a {return $::dancingfont($a)}\n",
  "hash": "{{args {}}} { return \"Error: can't convert [name $args] into Hash\"}\n",
  "proc_pastebin": "procname {lindex [regexp -inline {<a href=\"(.*?)\">} [http post http://ossfans.org/paste paste [info body $procname] function new .submit {Create Paste}]] 1}\n",
  "chingchong": "{{length 20}} {join [map [seq 1 $length] {chingchong_char}] \"\"}\n",
  "megamoira": "{} {set m \"\"; for {set i 1} {$i<5} {incr i} {append m \"[moira]\\n\"}; return \"$m\"}\n",
  "satanic": "args { set n [first_true $args [name]]; regsub -all \"SATAN\" [satan] $n }\n",
  "fuck": "args {act \"fucks [join $args]\"}\n",
  "megaseinfeld": "{{who {}}} {if {$who eq \"\"} {set who [lindex_random [names]]}; return \"[seinfeld $who]\\n[seinfeld $who]\\n[seinfeld $who]\\n[seinfeld $who]\\n[seinfeld $who]\"}\n",
  "nescart": "{} { goonsay {girl u must be an NES cartridge because i will blow on your slot until you start functioning}}\n",
  "socute2": "{} {return \"http://farm3.static.flickr.com/2299/2459172026_0b21646293_b.jpg\"}\n",
  "noob": "{} {return \"See also: Skroob\"}\n",
  "jan": "{} {return [gudrize [string repeat {marsha } 30]]}\n",
  "zalgochar": "{} { uchar [?? $::zalgo] }\n",
  "negronics": "{} {return \"[negronics1]\\n[negronics2]\"}\n",
  "hisam2": "{{who sam}} {smega {. [bold][color [next_in_list {red orange yellow green blue violet}]][train $who]} 20}\n",
  "an_al_insult": "{} {return \"[al_insult]\"}\n",
  "blacktalk": "{} { switch { [expr { round(rand()*10) }]  } { 1 { return \"rubbing cocoa butter on your legs\" } 2 { return \"eating fried chicken\" } 3{ return \"puttin salt on your watermelon\" } 4 { return \"gettin yur hair did\" } 5 { return \"talkin on da phizzone wit laronda\" } 6 { return \"crankin dat soulja boy\" } 7 { return \"mixin up sum collahd greenz\" } 8 { return \"stoppin tah visit big mamas house\" } } }\n",
  "hello_tranny": "{} {return \"<@hello> sometimes [tranny_word] is kinda cool\"}\n",
  "aquaintance_word": "{} acquaintance_word\n",
  "aimpresentation": "{{who {}}} {aim -n [aimname $who] [presentation]}\n",
  "irl": "{args} {set nicks [map $args {{x} {. @$x}}]; . \"[join $nicks]: fuckin asshands, you suck shit, i'll whip your ass\"}",
  "88precepts": "{{n 0}} {if {$n < 1 || $n > 88} {?? $::precepts} {lindex $::precepts [incr n -1]}}\n",
  "ï£¿": "{} aapl\n",
  "niggerdeath": "{} {figlet NIGGERDEATH}\n",
  "moreweed": "{} { pick 80 {wet yes} 9 {wet of course} 1 {wet indubitably} 10 {chomskyback [upper [choose yes \"of course\" \"indubitably\" \"without a doub\" duh certainly definitely affirmative \"by all means\" indeed absolutely sure]]} 20 {magick annotate http://i.buttes.org/index.php/http://shermanikk.net/images/ton-of-weed.jpg 30 300 225 red \"OH GOD YES\" } }\n",
  "lastwords": "{} {lindex_random $::last_words}\n",
  "rot26": "s {return [rot13 [rot13 $s]]}\n",
  "ncock-nolimit": "size {if {$size < 0 || $size > 99} {error \"COCK SIZE OFF THE CHARTS\"}; set s [string repeat \" \" [expr {$size+1}]]; set glans \"$s _\\n$s/\\\\)\"; set balls \"( Y)\\n \\\"\\\" \"; set shaft {}; for {set i 0} {$i < $size} {incr i} {lappend shaft \"[string repeat \" \" [expr {$size-$i}]]/ /\"}; if {$size==0} { return  $glans\\n$balls;} else { return $glans\\n[join $shaft \\n]\\n$balls }}\n",
  "chingchong_char": "{} {?? $::chingchong_dict}\n",
  "grep": "{r s} {join [lgrep $r [split $s \\n]] \\n}\n",
  "lgrepr": "{regex list} {lindex_random [lgrep $regex $list]}\n",
  "fuckoff": "{args} {core::bot_say fuckoff $args}",
  "chinee": "{{oi {ah so! me likey fried rice!}}} {return \"\u0002\u00031,8-_-\u0003 [chineespeak $oi] \u00031,8-_-\u0003\u0002\"}\n",
  "fluid": "{} {lindex_random $::fluids}\n",
  "svslolnick": "{} { subst [lindex_random $::svslolnick] }\n",
  "repeated_word": "{{jresux {}}} {if {$jresux eq \"\"} {set jresux [string map {\"'s\" \"\"} [word]]};return \"$jresux! $jresux! $jresux!\"}\n",
  "id": "a {set a}\n",
  "STcsammis": "{} {string map {{__________} {___,,,,,,_} _O_ )o(} [STgoon]}\n",
  "ok_cast": "{} {return \"casts [okey_spell]\"}\n",
  "cliche_add": "{nick cliche} { array_, cliches [nickmap $nick] $cliche }\n",
  "gorfsay": "dongs {stampsay -s gorf $dongs}\n",
  "p_a_c": "{} {sunglass [stampsay -s fullcsammis [p_a]]}\n",
  "crop": "{str x y width height} {join [mapx [lrange [lines [pad $str]] [expr $y-1] [expr $y+$height-1]] line {string range $line [expr $x-1] [expr $x+$width-1]}] \\n}\n",
  "hurd": "{} {return \"HIRD of Unix Replacing Daemons\"}\n",
  "wwitb": "{} {join [list {    ,==.} {   /  66\\ } {   \\c   o)    I Said} {    `) (     What What} {    /   \\   In The Butt} { __/   \\ \\ } {((   /\\ \\ \\ } { \\\\  \\ `------} { / / /  |    |} {(_(___)_|    |}] \\n}\n",
  "me": "args {if [llength $args] {return \"\\1ACTION [join $args]\\1\"} {choose sick gross ew}}\n",
  "blackjack_wins": "p { blackjack_set_score $p [expr [blackjack_get_score $p] + [blackjack_winning $p]]; return \"$p wins \\$ [blackjack_winning $p] ! \"; }\n",
  "ac%frame": "args {box [embed [canvas 25 6] [join $args] 2 2]}\n",
  "degrees2cardinal": "d {\n\tset n [expr int(((int($d)*4+45)%1440)/90.)]\n\tswitch $n {\n\t\t0  { . \"N\" }\n\t\t1  { . \"NNE\" }\n\t\t2  { . \"NE\" }\n\t\t3  { . \"ENE\" }\n\t\t4  { . \"E\" }\n\t\t5  { . \"ESE\" }\n\t\t6  { . \"SE\" }\n\t\t7  { . \"SSE\" }\n\t\t8  { . \"S\" }\n\t\t9  { . \"SSW\" }\n\t\t10 { . \"SW\" }\n\t\t11 { . \"WSW\" }\n\t\t12 { . \"W\" }\n\t\t13 { . \"WNW\" }\n\t\t14 { . \"NW\" }\n\t\t15 { . \"NNW\" }\n\t}\n}\n",
  "STpoo": "{} { join $::poostamp \\n }\n",
  "tvshow": "{} {lindex_random $::tvshows}\n",
  "cpanmsg": "{} {choose \"Warning: prerequisite [cpan] [rand 4].[rand 15] not found.\" \"Running install for module [cpan] \" \"[cpan] is up to date.\"}\n",
  "unchinkerize": "args {return \"[string map [map $::chinkmap {{n m} {. $m $n}}] [join $args]]\"}\n",
  "nordqdb": "{} {norway [niggerize [lolqdb]]}\n",
  "motto2": "{{who {}}} {if {$who eq \"\"} {set who [lindex_random [names]]}; return \"[banner \"Welcome to $who, home of [strip_u [fetish_porn]]\"]\"}\n",
  "blowmg": "{} {return \"  __\\n /..\\\\\\n \\\\\u001f()\u001f/\"}\n",
  "yellow_colour": "{} {next_in_list {8}}\n",
  "crop_to_fit_and_resize": "{url {xoff 0} {yoff 0} {w 63} {h 79}} {magick resize [crop_to_fit $url $xoff $yoff $w $h] $w $h}\n",
  "mytwiggah": "{user user2} {return \"Â  __\\n ( ->   $user,\\n / )\\\\   Whaddup my Twiggah!\\n<_/_/      -$user2\\n \\\" \\\"\";}\n",
  "option": "{} {return ?}\n",
  "mmafighter": "{{name {}}} { apply [choose randfighter britfighter muslimfighter jewfighter buttesfighter zulufighter] $name }\n",
  "randcap": "word {join [map [zip [split $word \"\"] [repeat [string length $word] {rand 2}]] {{c b} {if $b { upper $c } { lc $c }}}] \"\"}\n",
  "weirdbible": "{} {return \"[waspfirstname] [rand 50]:[rand 20] \\\"[choose [biblical \"[theo], [theo]\"] [biblical [albot]] [biblical \"[theo], [albot]\"]]\\\"\"}\n",
  "manhattan_cross_street": "{} {return \"[manhattan_street] & [manhattan_avenue]\"}\n",
  "tinyurl": "url {wget \"http://tinyurl.com/api-create.php?url=[urlencode $url]\"}\n",
  "imgaflipcompose": "url {set norm [magick_id [magick resize $url 150 150]]; set flop [magick_id [magick flop $norm]]; set flip [magick_id [magick flip $norm]]; set flipflop [magick_id [magick flip $flop]]; cache put imgaflip_norm $url $norm; cache put imgaflip_flop $url $flop; cache put imgaflip_flip $url $flip; cache put imgaflip_flipflop $url $flipflop}\n",
  "phonenumber": "{} { subst [lindex_random $::phonenumber] }\n",
  "tboner": "{} { string map {{|| |   |} {}} [toilet_boner] }\n",
  "audiocrop": "{url start duration} {. [http://manimal.prettybrd.com/~leedo/scripts/audioutil.pl?c=crop&a=[urlencode $url]&s=$start&d=$duration]}\n",
  "wangues": "{} {ajoin \" \" [dickroulette] [dickroulette]}\n",
  "scheme_escape": "str {string map {\\\" \\\\\\\" \\\\ \\\\\\\\} $str}\n",
  "aimmeasure": "args {aim -n [aimname [join $args]] \"http://macmini.on.nimp.org/offers/macmini/?r=[rand 5000] Goons only offer. :) :)\"}\n",
  "matter": "{} {return [lindex_random $::matter]}\n",
  "STwhistle": "{} {return \"    _____\\n   /____//\\n  /----/(\\n /    /  `&\\n(    (     )\\n `(___`&_.%\"}\n",
  "ceval:keys_with_ids": "{} {\n  set keys {}\n  foreach key [cache keys ceval] {\n    ceval:load $key\n    lappend keys [list $key $data(id)]\n  }\n  lsort -decreasing -integer -index 1 $keys\n}\n",
  "bonerbattle": "args {if {$args eq \"\"} { set args \"boner battle!\" }; ajoin \"  \" [stampsay -l -s rocketcock [join $args]]  [oldflip [rocketcock]]}\n",
  "spitroast": "{} { return $::spitroast}\n",
  "bigmatix": "{} {smega {eval \"format \\\"\\\\\\[ [string repeat {%3s } 9] | %3s ]\\\" [string repeat {[roll 100] } 10]\"} 21}\n",
  "vora": "{} {return \"[color black on black]oooooooooooo[color cyan on cyan]oooooooo[color black on black]oooooooooooo\\n[color black on black]oooooooo[color cyan on cyan]oooooooooooooooo[color black on black]oooooooo\\n[color black on black]oooooo[color cyan on cyan]oooooooooooooooooooo[color black on black]oooooo\\n\"}\n",
  "palin_horse": "{} {string map {PUNTME \" PALIN\" \"CHATZILLA INTO   \" \"JESUS HORSE INTO \" BATTLE DEBATE} [chatzilla]}\n",
  "familyguy_char": "{} {lindex_random $::familyguy_chardict}\n",
  "bikecatsay": "str { ajoin \" \" [hardwrap $str 30]  \" \\n\\\\\\n\" [bikecat] }\n",
  "STcrown": "{} { return \" ,  ,() , ,  \\n |\\\\/\\\\/\\\\/\\\\/|  \\n |_o_<>_o_|  \";}\n",
  "lindex_random": "{list {index -1}} {if {$index == -1} {set index [rand [llength $list]]}; lindex $list $index}\n",
  "varlog": "var {. http://shaniqua.buttes.org/git/shaniqua/log/?path=vars/[sha1 $var]}\n",
  "girlvinyl": "{} { ta sherrod.txt }\n",
  "two_americas": "{} {. \"[color white on blue] TWO AMERICAS \"}\n",
  "bj_done": "{} { set a [blackjack_dealer_loop] ; set b [bj_dhand]; return [ajoin \" \" \"$a\\n[blackjack_finish]\" $b]; }\n",
  "bonermania": "{} {return \"      \u0002\u001f[string toupper [lol \"B O N E R   M A N I A\"]]\u001f\u0002\\n  ___ ___  _     __     ~ C====8\\n /   /   \\\\(/\\\\---/\\\\ `,:``,---------+--.\\n |   |     \\\\ \\\\ /  \\\\_;    .      _ |  |~~~~~~~\\n \\\\___\\\\___/-(Y /   / -----: ----/\\\\)'--`\\n            \\\"/   /        :   / /   8====D ~ .\\n  (_(_)=====(  Y )===D:<  :  / /              '\\n             \\\"\\\" \\\"         : ( Y)\\n              +~  c===8      \\\"\\\"\"}\n",
  "conditions": "{} {. \"[capitalize [mycond]], [expr round([raw_fahrenheit])] F\"}\n",
  "popeyes": "args {return \"\u0002\u00034\u0016SAQ IS A FUCKING IDIOT\";}\n",
  "source": "{} {lindex_random $::sources}\n",
  "macwatch": "img {magick composite http://images.apple.com/macbook/images/overview-gallery3-20081014.jpg [magick_id [magick resize $img 520 325]] 228 75}\n",
  "bmi": "{lb in} {set bmi [bmi_calc $lb $in]; if {$bmi < 18.5} {. \"$bmi. Eat a sandwich you fucking twink.\"} elseif {$bmi  < 25} { . \"$bmi. Good for you, [faglame]!\"} elseif {$bmi < 30} {. \"$bmi. You fat fuck, cut down on the [choose  fried \"deep fried\" candied] [goon_food].\"} else { . \"$bmi -- HOLY FUCKING SHIT YOU PATHETIC FUCKER.\"}}\n",
  "array_values": "array {map [array names ::$array] {name {set ::${array}($name)}}}\n",
  "oclet2": "{} {return \"<@oclet> brb [booze_act_word] a [drink]\"}\n",
  "slot_debit": "{who amount} {set who [normalize_nick $who]; incr ::slot_stats(spent,$who) $amount}\n",
  "DONGDONGDONG": "{} {return \"your a home\"}\n",
  "bento": "{} {hardwrap \"\u000313Im looking for a bento box, it cant be pinku (thats japanese for pink) or any girl color. It has to be of 2 or more kotoba (thats japanese for 2 compartments) and has be be chibi (small) sized. And has to be really kawaii (cute). Also It has to be about 10-20 bux. And you have to post pics of it first (i want to make shure it's kawaii \\[cute]). And it would be nice if it came with matching chopstick holder (WITH chopsticks). OH! and it CANNOT have any cartoon pictures, or be made out of plastic. It has to be made of ceramic, or something like that.  Also it would be nice if it was made in japan. and not in china or corea (korea) or whatever. I have found a bento box similar to the one im describing in e-bay,  but it was 1 kotoba, and i dont want my gohan (rice) to touch my other things (it can get wet and i would not like that, plus 2 compartments looks more kawaii)\" 88}\n",
  "tdi": "{} {. \"<[?? $::tdi_driver]> I can't wait to test drive a [?? $::vw_tdi_model] TDI and maybe engage in a little [crw_word] with the sales[choose man woman]\"}\n",
  "marine_comic_frame": "{} {let {art {box [embed [canvas 35 12] $art 2 [- 12 [llength [lines $art]]]]}} [ajoin \" \" [wrap \"Private White [drill_line]\" 20] \\n\\\\ \\n[STdrill]]}\n",
  "radeon10": "{} {return \"<@radeon|irssi> can i login using more than one terminal\\n<@radeon|irssi> so i can use irssi to access 2 irc servers\" }\n",
  "lsmodhead": "{} {format \"%-24s %5s  Used by   %s\" {Module} {Size} [lindex_random {{Not tainted} {Tainted: PF}}]}\n",
  "rst2": "args {checkbox2 rude same true}\n",
  "rot:str2tuples": "str { rot:mktuples [rot:splitperchar $str] }\n",
  "radeon17": "{} {return {<@radeon> who wants to take a bet on how long its going to take to get to radeon100}}\n",
  "STstorm": "{} { return \"  _{   }_    \\n {. o,o .}   \\n  {_(o)_}    \\n   ,//       \\n  {__}       \";}\n",
  "vowel": "{} {lindex_random $::vowels}\n",
  "eat_semen": "{{fags {}}} {error \"maximum execution time of [regsub -all {per iteration} [time bgt 3000] {}]\"}\n",
  "smugsay": "args {urlsay http://i.buttes.org/http://gangusinternet.mirror.waffleimages.com/files/3a/3aacf51766a3b5aa6a1d7026b2d13bd85d80e2ff.gif [join $args]}\n",
  "chemtrails": "{} {return \"\u0002                           _\\n\u0002      ______            /~~~,\\n\u0002  ___/`_____\\---------/____/  \u000305\\\"\\\"\\\"//\u000307[nwo_word] ** [nwo_word]** [nwo_word]\\n\u0002~(____NWO____ <======: (___]  \u000308====\u000307[nwo_word] ** [nwo_word] ** [nwo_word]\\n\u0002             `-----------~`   \u000305,,,\\\\\\\\\u000307[nwo_word] ** [nwo_word]--.\\n\"}\n",
  "aimslice": "args {set name [aimname $args]; aim -n $name [slice $name]}\n",
  "menu_drink": "{} {string totitle [subst [lindex_random $::menu_drink]]}\n",
  "procs_that_need_to_be_updated": "{} {find_in_procs \"2008\"}\n",
  "strip_newlines": "s {string map {\\n {}} $s}\n",
  "martialartist": "{} { . \"[choose \"[country_name] Jew-Jitsu specialist\" \"Varsity [crw_word] gold medalist\" \"All-American [sexpart] Wrestling champion\" \"[choose [al_man_word] [al_hat_word]] Karate black belt\" \"[dndcreature] Kung Fu master\" \"Golden Gloves [faglame] Boxer\"]\"}\n",
  "gaydar:name": "{{nick {}}} { return \"O\\n  [or $nick [name]]\" }\n",
  "snoe": "{} {apply [?? {wet rainbow pink stampsay savagesay pyramid rain pooify gudrize niggerize chinkerize americanize chinkerize colorize lacist columnize corrinize csam_dikkyize csammize underscoreize gayflagify grapefruitize {image-say [gis [random_word]]} {image-say [pt [random_word]]} }] {[snow]}}\n",
  "figlet": "{txt {font Standard}} {html [last [regexp -inline {<pre class=\"flf\">(.+?)</pre>} [last [http get \"http://patorjk.com/software/taag/msg1.php?font=[urlencode $font].flf&txt=[urlencode [rot13 $txt]]\"]]]]}\n",
  "radeon25": "{} {return {<@radeon> my xchat trial expired so im using this shitty fucking mIRC client}}\n",
  "prefixed_simple_acquaintance": "{} { lindex_random $::acquaintances }\n",
  "muslim_firstname": "{} {return [lindex_random $::muslim_firstname]}\n",
  "TAFKADH": "{} {. [lol [lindex_random $::TAFKADH]] }\n",
  "blackjack_set_player": "{p hand} { array set ::blackjack_player [list $p $hand]; return [blackjack_get_player $p]; }\n",
  "addphonenumber": "args {lappend ::phonenumber [join $args \" \"]; return \"Number: [join $args \" \"] added\";}\n",
  "megadune": "{} { mega college aimf_dune }\n",
  "strip_all": "str {regsub -all {[\u0003\u0002\u0016\u001f\u000f]} [strip_color $str] \"\"}\n",
  "gaydar:scope": "{} { return $::gaydarascii }\n",
  "aimweirdbible": "args { aim -n [aimname $args] [weirdbible] }\n",
  "okeys?": "{} {bgbt [expr [llength [lfilter *okey* [names]]] ] okeys}\n",
  "rump": "{{who {}}} {chinee [lump $who]}\n",
  "blogentry": "{{who {}}} {return \"[political_word] pundits such as [name $who] imply that everyone from [country_name] are filthy [ethnic_group]. As someone who is of [blogentry:words1]  origin, I find this [size_word]-minded approach to be [blogentry:words2].\"}\n",
  "ulf2": "{} {. \\ SUK\\nTHIS\\n\\ \\ |\\n\\ \\\\|/\\n[ncock 3]}\n",
  "vorh": "{} {return \"[color black on black]oo[color cyan on cyan]oo[color black on black]oooooo[color cyan on cyan]oooo[color black on black]oooo[color cyan on cyan]oooo[color black on black]oooooo[color cyan on cyan]oo[color black on black]oo\\n\"}\n",
  "ninjalie": "args {return \"< ninjalie > I left my $args in my bosses car\\n< ninjalie > how am i supposed to stay hydrated?\"}\n",
  "devo": "{} {next_in_list {\"Are we not men?\" \"We are DEVO\"}}\n",
  "pee2": "{} {ajoin \"\" [pee] [bigtext by\\ egg]}\n",
  "sam2": "{} {return \"<@sam> FUCK YOU MAC\"}\n",
  "omgtowers2": "args {aflip [ajoin \"\" [rain [mega omgbeegeometry]] [wrap [join $args] 25] [rain [flip [mega omgbeedna]]] [flip [rain [mega omgbeegeometry]]]]}\n",
  "image-doom": "url {magick_overlay $url [?? {http://xs135.xs.to/xs135/09014/doom-overlay307.png http://xs135.xs.to/xs135/09015/doom-pistol-fire656.png http://xs135.xs.to/xs135/09015/doom-pistol157.png http://xs135.xs.to/xs135/09015/doom-chainsaw138.png}]}\n",
  "fanfiction": "{} gbsfm_fanfiction\n",
  "show": "info feem\n",
  "go:black": "{} {uchar 263b}\n",
  "niggergoon": "{} { goonsay [niggerize [shsc_thread]] }\n",
  "targetpractice": "{} {embed [embed [embed [embed [embed [flip [flip [chinsamid]]] [ncock 3] 23 6] . 30 6] . 32 5] . 34 4] [flip [omg]] 35 2}\n",
  "todo_box": "{} {. [choose \"\\[[uchar 2717]\\]\" \"\\[ \\]\"]}\n",
  "ctz": "{} {return \"<@ctz> [internetacro], i'm [ethnic_cleansing_verb]ing [faglame]s and eating [unplural [ethnic_group]]-[food_word]s with [political_word]s\"}\n",
  "pad_line": "{str length} {set slen [string length $str]; if {$slen < $length} { return \"$str[string repeat { } [- $length $slen]]\"  } { return $str } }\n",
  "poopers?": "{} {c [wget http://poopstat.us/count.yaws] poopers}\n",
  "gnuradio": "{} {return [twoproblems \"python and c++ code in the same project using SWIG bindings and doxygen documentation\"]}\n",
  "bike": "{{pol {}}} {if {$pol == \"\"} {set pol [?? $::bike_pols]}; set html [unescape_html_entities [wget http://${pol}isyournewbicycle.com/]]; string toupper [html [strip_html [lindex [regexp -all -inline {<body.*href=.*?>([^*]*?)\\.?</a>} $html] 1]]]}\n",
  "okey_act": "{} {lindex_random $::okey_act}\n",
  "aesop": "{} { return \"im gonna go take a shit be back in a few hours\" }\n",
  "hello7": "{} {return \"<@^o_o^> I get [random_word] drunk\"}\n",
  "abezsaltedbroth": "{} {gayflagify [. \"[upside_down [pad_lines [catbus_g]]]\\n[ncockrow 8]\\n SALTED BROTH\"]}\n",
  "omgComp": "a {return [rainbow [repeatblock2 \"    __    ___     \\n   /..\\\\ /| |'-.   \\n  .\\\\_O/ || |   |  \\n /  \\`._ \\\\|_|_.-'  \\n/  \\\\__.\\`=._) (_   \" $a]]}\n",
  "twicture": "statusid {. http://twictur.es/i/$statusid.gif}\n",
  "wt": "args {set str [strip_all [join $args]]; if {[string length $str] > 14} {error \"too long, spic\"}; set prefixes [list \\n {} \\n \\n\\n]; set args [list]; set i 0; foreach c [split $str {}] {if {$c eq \" \"} {lappend args \"    \"} {lappend args [lindex $prefixes [expr {$i % 4}]][bgbt $c]; incr i}}; eval [concat [list ajoin \" \"] $args]}\n",
  "lsmod": "{} {set q [list]; lappend q [lsmodhead]; foreach i [seq 1 9] {lappend q [lsmodbody]}; return [join $q \\n]}\n",
  "ibm": "{} {flip [chinkamid]}\n",
  "chirpz": "{} { subst [lindex_random $::chirpz] }\n",
  "STsonic": "{} {join $::STsonic_lines \\n}\n",
  "whiteboy": "{} {return \"get up hungover, [whiteboy_activity],  [whiteboy_activity], [whiteboy_activity], [whiteboy_activity],  [whiteboy_activity], [whiteboy_activity], [whiteboy_activity],  [whiteboy_activity], [whiteboy_activity], [whiteboy_activity],  [whiteboy_activity], [whiteboy_activity], [whiteboy_activity],  [whiteboy_activity], [whiteboy_activity]... Who says they don't work hard?\"}\n",
  "lec": "{} {return \"[dikky_word]! I really [fuckword]ed this one.  My [internetword] is covered in [sex_fluid].\"}\n",
  "madclown": "{} {return \"madclown sux\"}\n",
  "greetingcard": "{} {. Happy holidays! View this greeting card: http://tinyurl.com/holidays08 }\n",
  "urmoms?": "{} {return \"\u0003[gay]moira is a filthy drunk\"}\n",
  "grog": "{} {return \"something stupid here\"}\n",
  "vorstyles": "{} {return \"no vor, no lulz, KNOW VOR, KNOW LULZ\"}\n",
  "knowher": "{{word {}}} {if {$word eq \"\"} {set word [word er$]}; return \"$word? I don't even know her!\"}\n",
  "twatname": "nick {if [info exists ::twatmap($nick)] {return $::twatmap($nick)} {return $nick}}\n",
  "dutch": "txt { string map -nocase $::dutch $txt }\n",
  "drug_doing": "{} {lindex_random $::drug_doings}\n",
  "wut": "{} {return \"[nick]: wut\"}\n",
  "huge_burgin": "{} {embed [embed [canvas 80 20] [ajoin \" \" [hugegoon] [string repeat \"[ajoin \" \" [STburger] [STburger] [STburger]]\\n\" 2]] 1 1] [bt \"burgin'\"] 18 15}\n",
  "v%dns:c": "{h c p a} {\r\n\tif {[string length [array get {::v%whois:dns} ${h}]] == 0} {\r\n\t\tif [regexp {^(([0-9]+\\.){3}[0-9]+|[:0-9a-fA-F]+)$} ${h}] {\r\n\t\t\t${p} ${h} ${c} ${a};\r\n\t\t} else { catch [list dnslookup ${h} v%dns ${c} ${p} ${a}] r; };\r\n\t} else {\r\n\t\t${p} [lindex [array get {::v%whois:dns} ${h}] end] ${c} ${a};\r\n\t};\r\n}\n",
  "darfur": "{{who Puntme}} {return \"$who: [join $::darfur_lines \\n]\"}\n",
  "grouphug": "{} {?? [grouphugs]}\n",
  "cosharc": "{word n} { join [map [seq $n 1] {{x} {. [string repeat \" \" [expr int(10 + 10 * cosh(3.14 * $x/20))]] $word }}] \\n }\n",
  "array_to_list": "array_name {upvar $array_name array; set ret [list]; foreach {key value} [array get array] {lappend ret [concat $key $value]}; return $ret}\n",
  "lol": "str {return \"\u0002\u00031,1[rainbow \"*~*~* [hacker $str] *~*~*\"]\u000f\"}\n",
  "lremove": "{list_var index} {upvar $list_var list; set list [lreplace $list $index $index]}\n",
  "pornthread": "{{who {}}} {if {$who eq \"\"} {set who [lindex_random [names]]}; return \"<$who> check out this thread on [strip_u [fetish_porn]] [thread_gen]\"}\n",
  "aimf_cached_sfart": "args {aimify cached_sfart $args}\n",
  "nazi_ad": "{} {. [macro nazi][macro msnazi]}\n",
  "ed209": "{} {lindex_random $::ed209_words}\n",
  "STwitch": "{} { return \"   _/\\\\_      \\n   ('')~~~   \\n  ,//\\\\ \\\\     \\n  ---/_/-I\\[K \\n     \\`\\`      \";}\n",
  "strip_u": "str {return [regsub -all _ $str { }]}\n",
  "aflip": "what {ajoin \"\" [. $what\\n[vflip $what]] [. [flip $what]\\n[vflip [flip $what]]]}\n",
  "iphone_feature": "{} {. iPhone version [?? $::next_iphone_ver] will have [choose \"[debian_feature]\" \"[?? $::mac_apps]\"]}\n",
  "rmredir": "a { return \".rmredir [stripcolon $a]\"}\n",
  "randsubst": "args {eval [lindex_random $args]}\n",
  "camelCase": "args {string_first tolower [apply CamelCase $args]}\n",
  "paz2": "{} {strip_color [stampsay -s omgComp [ncockrow 4]]}\n",
  "cobol": "{} {stampsay -l -s fullcsammis [s_a]}\n",
  "niggertime": "{} {return \"\u0002\u001f\u000312http://www.fischerfam.net/ftp/bionic/whiteblack.swf\"}\n",
  "likeaboss": "args {upper [join [or $args [next_in_list $::likeabosslyrics]]] ([next_in_list {{LIKE A BAWSS} {LIKE A BAWSS} {LIKE A BAWSS} {LIKE A BOSS}}])}\n",
  "y": "args {if {$args eq \"\"} {set s y} {set s [join $args]};mega concat $s}\n",
  "CANADA": "b { set a [string repeat \" [COLOR 04 04] [COLOR 04 00]*[COLOR 04 04] [COLOR 04 00] \" 5] ; return \"$a $b ;P $a\" }\n",
  "rocks": "{} {. \"no, YOU rock\"}\n",
  "wkr": "{} {fedoragoonsay \"[lindex_random $::wkr_dict]\"}\n",
  "rot:mktuples": "v {\n\tset col \"\"; set bold 0; set reverse 0; set out [list];\n\tforeach {c} $v {\n\t\tif {[rot:iscoloroff $c]} { \n                    set col \"\"; \n\t\t} elseif {[rot:isoff $c]} { \n                    set col \"\"; \n                    set bold 0;\n                    set reverse 0;\n\t\t} elseif {[rot:iscolor $c]} {\n\t\t\tset col $c;\n\t\t} elseif {[rot:isbold $c]} {\n\t\t\tset bold [rot:not $bold];\n\t\t} elseif {[rot:isreverse $c]} {\n\t\t\tset reverse [rot:not $reverse];\n\t\t} else {\n\t\t\tlappend out [list $c $col $bold $reverse]\n\t\t}\n\t}\n\treturn $out\n}\n",
  "rimshot": "{} {return \"Ba-dum, TISH\"}\n",
  "poof": "{{who {}}} {if {$who eq \"\"} {set who [lindex_random [names]]}; set ret \"$who is a poofter\"; return $ret}\n",
  "lemons": "{} {fart 20060328.html}\n",
  "apophis2": "{} {return \"-\u000310-\u000311-\u000f Cannot join\u000311 \u0002#btb \u000f(You are banned).\"}\n",
  "saq": "{} {return \"http://limux.biz/img/saq.jpg\"}\n",
  "spook": "{{count 6}} { join [lselect_random $::spook_dict $count] \" \" }\n",
  "aimhug": "{{who {}}} {aim -n [aimname $who] [grouphug]}\n",
  "blackjack_finish": "{} { set out {}; set score [blackjack_score_hand [blackjack_get_player dealer]];  foreach {p} [blackjack_players] { if {$p==\"dealer\"} { } else { set pscore [blackjack_score_hand [blackjack_get_player $p]]; if { $score < $pscore && $pscore <= 21 || $score > 21} { lappend out [blackjack_wins $p]; } else { lappend out [blackjack_loses $p]; }; }; }; blackjack_init; return [join $out \" \" ]; }\n",
  "themoreyouknow": "{} {return \"[bgt the more]\\n[bgt you know]\"}\n",
  "randcare": "{} carechat\n",
  "moiraethnics": "{} {return \"<@moira> doesn't [string tolower [country_name]] have a large [string tolower [singleethnic]] population?\"}\n",
  "csam_dikkyize": "args {. [csammize [dikkyize $args]]}\n",
  "cleland": "{} { . <@max_cleland> i didnt even bend those pins }\n",
  "cdown": "args {cdown_to [or [join $args] [?? [cdown_events]]]}\n",
  "downs?": "{{who {}}} {. [name $who] [choose \"has\" \"does not have\"] downs}\n",
  "radeon33": "{} {return {<@radeon> What is apsergers?\n<@radeon> aspergers*\n<@radeon> Shut the fuck up about pin bending}}\n",
  "STdog": "{} { return \"   .--_      \\n  _ooi |     \\n ('_,(_)     \\n   )=(__     \\n (_(__(__|); \";}\n",
  "surprise": "{} {. http://content.ytmnd.com/content/7/6/f/76fd919f280535a74063af9946712e2d.mp3}\n",
  "spend": "{{who {}}} {join [map [split [sinewave \"[name $who] should spend his [?? $::badjectives] riches on [upper [mccain_word]]\"] \"\\n\"] {line {. \"\\00300,[rand 15]$line\"}}] \\n}\n",
  "random_dict": "{} {set zaphodsux [lindex_random $::dicts]; return \"$zaphodsux\"}\n",
  "hello_quiz": "{{who hello}} {return \"$who are neocons for or against [random_word]?\"}\n",
  "uno": "{} {ajoin \" \" [themoreyouknow] \"\\n\\n[bgt .-*]\"}\n",
  "find_in_vars": "str {set ret [list]; foreach var [info globals] {if {![array exists ::$var]} {if {[string first $str [set ::$var]] != -1} {lappend ret $var}}}; return $ret}\n",
  "radster": "{} {return \"<@radeon> dude these ide cables hold twice the bits\"}\n",
  "manbabis": "{} {c man babis}\n",
  "todo": "{{who {[nick]}}} {set idx 0; set who [name [subst $who]]; if [array exists ::todo{$who}] { regsub -line -all {^  } [. \"\\002TODO\\002-items for $who:\\n\" [join [. \"\\n\" [map [last [array get ::todo{$who}]] {e {set idx [expr $idx + 1]; if ![regexp \"\\003\" $e] { set e \"\\002[string index [string touppe $e] 0]\\002[string range $e 1 end]\"; };  . \" \\xe2\\x80\\xa2 \\[#$idx\\] $e\"}}]] \\n]] \" \" } else { . \"$who has no \\002TODO\\002!\";}}\n",
  "Winkies?": "{} {set Winkies {}; foreach name [regexp -inline -all {Winkie} [names]] { lappend Winkies $name; }; return [c \"420 [winkz_word]s:\" [join $Winkies \",\"]];}\n",
  "omg": "{} {return \"  __\\n /..\\\\\\n \\\\_O/\"}\n",
  "sunglassify": "string {string map [list {[ .]} [invert {[//]}]] $string}\n",
  "truism": "{} {return \"a nigger is a nigger is a nigger\"}\n",
  "STfullmoira": "{} {string map {{.__/  } {.__/__}} [embed [embed [canvas 12 17] [STfullgoon] 5 6] [flip [STmoirahead]] 10 1]}\n",
  "toplulz": "{} {set ret [list]; foreach idx [array get ::lulzscores] { lappend ret [array get ::lulzscores{$idx}] }; join $ret \\n; . $ret }\n",
  "jewsurname": "{} {return \"[jewname][subst [string repeat {[lindex_random $::jewsurnames]} [expr {int(rand()*3)+1}]]]\"}\n",
  "aimsaq": "args {  aim -n [aimname $args] [subst [lindex_random $::aimsaq]] }\n",
  "ohgodcockslol": "{} {subst [lindex_random $::changingmeasures]}\n",
  "nickmap_add": "{fakenick id} { set ::nick_map($fakenick) [string tolower $id] }\n",
  "square": "{} {return \" _ \\n|_|\"}\n",
  "mmaeventintro": "{} { . \"Ladies and gentlemen, the TALE OF THE TAPE tonight, provided to you by [goonjob] - the difference is [string toupper [singlerandomword]ability]!\"}\n",
  "image-dick": "url { magick_overlay $url http://imgur.com/wvoTx.png }\n",
  "killa": "{} {join [list [bt *yo nigga*] [bgbt macro killa]] \\n}\n",
  "smallcap_map": "{} {ceval {inject [array names ::smallcap_map] {} {{map char} {lappend map $char [uchar $::smallcap_map($char)]}}}}\n",
  "saymexico": "args {set wstring [join [times [expr [string length $args]+3] {}]];  return \"[color green on green]      [color white on white]$wstring[color red on red]      \\n[color green on green]      [color yellow on white] [name $args] [color red on red]      \\n[color green on green]      [color white on white]$wstring[color red on red]      \\n\"}\n",
  "force_image": "url {if [regexp {\\.(|jpe?g|JPE?G|gif|GIF|png|PNG|tiff?|TIFF?|pdf|PDF|bmp|BMP)$} $url] {return $url} {return ${url}#.jpg}}\n",
  "alhi": "{{name Al}} {smega {strcat \"<@[name $name]> [name]: [al_insult]\"}}\n",
  "fr": "{} {pick 5 {} 1 {return \"Just A Lil \" } 1 {return \"Red Hot \" } 1 {return \"Ice Cold \"} 1 {return \"Back In The Days Of \"} 1 {return \"Return Of The \"} 1 {return \"That's Slamming \"} 1 {return \"Some Nice \"} 1 {return \"Mega \"} 1 {return \"Free Me From The \"} 1 {return \"Tomorrow...\"} 1 {return \"Real Smooth \"} 1 {return \"You're My \"}}\n",
  "tap": "{} {me \"taps the NIGGA PLEASE sign\"}\n",
  "drugs": "{} {return \"PILLZ HERE\"}\n",
  "moirabuffet": "{} {aflip [join [lrange [lines [flip [ajoin \"\" [string repeat \\n 6][ncock 1] [STmoirahead]]]] 0 end-1] \\n]}\n",
  "gradient_probabilities": "n {list [expr {21-$n}] [expr {$n-1}]}\n",
  "fullencode": "str { set chars [list]; foreach char [split $str {}] { lappend chars %[format %02X [scan $char %c]] }; join $chars {}}\n",
  "decding": "str { encoding convertto dingbats $str }\n",
  "fatgoon_lmiot": "{{foods {}}} {if {$foods eq \"\"} {embed [lmiot [fatcookingword]ed [food_word] ] [chins 7] 4 1 } {embed [lmiot $foods] [chins 7] 4 1} }\n",
  "STcalvin": "{} { return \"  \\\\ \\\\  /\\\\     \\n__ \\\\ \\\\/  \\\\/\\\\  \\n  /`- -    \\\"_ \\n  | O O  = `= \\n  |  C_    )  \\n   \\\\ (,) /\\\"   \\n    `---'     \" }\n",
  "matrixify": "s {gay_pl_color_ify  matrix_colours [wrap \"$s\" 72]}\n",
  "surname": "{} {lindex_random \"[jewsurname] [waspsurname]\"}\n",
  "i'm": "{{args {}}} {if {$args eq \"in your room\"} {return \"back out\"} {}}\n",
  "timeunit": "{} {lindex_random $::timeunits}\n",
  "howwilltheworldend": "{} {return \"Gayness was upon the universe and everything dissolved into golden dust and only the screams of gay spirits and ghostly fags could be known throughout eternity. The chants of \\\"master is a fag who lays his hand upon the gland! Master is a man of many Asses!\\\" could be heard anywhere. Eventually the universe was nothing but a void of grape juice and all that could be seen was wisps of gay essence.\"}\n",
  "onebutan_buyers_guide": "{{what {}}} {set what [name $what]; set when [join [clock format [expr int(rand() * [clock seconds])] -format \"%B %e, %Y\"]]; return \"[bold]$what Buyers Guide[bold]\\nLast Release: $when\\nDays Since Update: [days_since $when]\\nRecommendation: [bold][onebutan_recommendation_for $what][bold]\"}\n",
  "amat": "{{nick {}}} {return \"<@amat> yo who is impersonating [name $nick]\\n<@amat> that's fucked up\"}\n",
  "uniwhat": "args {[first [?? [lines [string trimright [~http://givingin.org/unicode/search/?[? q [join $args]]]]]]]}\n",
  "hirolloffle": "{{who rolloffle}} {smega {strcat \"<[name]> $who: [greeting] [eval [choose niggerword black_star_trek_character]]!\"}}\n",
  "cached_hurfle": "{} {if [catch hurfle result] {set result [lindex_random $::cached_hurfle]}; cache_list cached_hurfle $result}\n",
  "hird": "{} {return \"[hurd] of Interface Representing Depth\"}\n",
  "c3": "{str1 str2 str3} {join [adjacent_join [list [nsplit [bgr [rrand_color] $str1]] [nsplit [bgr [rrand_color] $str2]] [nsplit [bgr [rrand_color] $str3]]]] \\n}\n",
  "arabnews3": "{} {return \"The offender, known to the public only as \\\"Mr. [muslim_firstname]\\\", was sentenced to [rand 10] years of hard labour at [goonjob].\"}\n",
  "magick-scale-composite-top-right": "{url1 url2 {scale 0.5}} { magick_scheme [scale-and-composite-gen $url1 $url2 $scale T R] }\n",
  "japboi": "{} {gis gackt}\n",
  "mac_icon": "name {. http://nonexiste.net/i/file:///System/Library/CoreServices/CoreTypes.bundle/Contents/Resources/${name}.icns#.png}\n",
  "cockbutteslogo": "{} { join $::cockbuttes \\n }\n",
  "spankbank:withdraw": "{} {lindex_random $::spankbank}\n",
  "randaim": "{} {eval [lindex_random [info procs aim*]]}\n",
  "cfjord": "{} {string map {* \\ *\\ } [ajoin \"\" \"\\n\\n[uchar 2708][color red]*[color]\" [STvikingboat] \"\\n\\n   THX FOR FLYING FJORD!\\n  9/11 NEVER CONNECT\"]}\n",
  "find_in_procs": "str {set ret [list]; foreach proc [info procs] {if {[string first $str [info body $proc]] != -1} {lappend ret $proc}}; return $ret}\n",
  "slot_pull_value_single": "stamps {set max [slot_stamp_max_value]; foreach stamp $stamps {if {[slot_stamp_value $stamp] == $max} {return $max}}; return 0}\n",
  "LK-fav": "{} { lindex_random $::LK_fav }\n",
  "megagoon": "{} {return \"[goonhost], [fastfood] [goonhost] with [goonhost], [fatcookingword] in the [cooking_appliance] for [expr {int(rand()*5)+2}] minutes and top off with [gamer_phrase]. [fatgoon_finale] while playing my level 70 [wow_race] [wow_class] in [wow_raid].\\n[stampsay -s boger \\n]\"}\n",
  "whatisbuttes?": "{} {return \"We are a [size] collective of [adjective] [choose [ethnic_group] [marginalize]s [faglame]s [niggerword]s]\"}\n",
  "harrybozack": "{} {biggaybowtext FIRST\\ POST}\n",
  "audi": "{} {return \"http://www.20bucket.com/2009audiS4.jpg\"}\n",
  "feem2": "{} { return \"<@feem> HEY GUYS! YAKKITY SAX!\" }\n",
  "willfm": "{} {. [color [butanfm_color]]wsc [color [butanfm_color]][uchar f8ff] [color [butanfm_color]]Britney Spears [color [butanfm_color]][uchar f8ff] [color [butanfm_color]]Toy Soldier}\n",
  "pebkac": "{} {return \"around pebkax, give birth to blax\"}\n",
  "moiraonthejob": "{} {embed [flip [moiracam4]] [ncock 3] 6 3}\n",
  "cbt": "args {colorize [bt [join $args]]}\n",
  "aimterds": "args {aimify terds $args}\n",
  "carechat": "{} {?? [subst \"\\$::[?? [choose $::care_dicts]]\"]}\n",
  "adjective": "{} {lindex_random $::adjectives}\n",
  "tinyimg": "url {force_image [tinyurl $url]}\n",
  "celeb_drudge": "{} {newdrudge On [day] [daypart], I will kill myself with [suicide], I have nothing else to live for, [choose \"[celebrity]\" \"[political_figure]\"] has betrayed me, [lastwords]}\n",
  "happy": "{} {cx :)}\n",
  "aimftrawl": "args { if {[llength $args] > 0} { smega { aimfish [raim [lindex $args 0]]}; } else { smega { aimfish}; } }\n",
  "blackjack_players": "{} { return [array names ::blackjack_bid]; }\n",
  "catcap": "{{ticker cat}} {catback [marketcap $ticker]}\n",
  "waspfullname": "{} waspname\n",
  "boger": "{} {return \"[gudrize [pick 1 albot 1 niggerphrase 1 overheardline 1 cached_onehug 1 mystic]]\u0002\u00038,1 boger for president 2008\u00031,1XXXXXXXXXX\u0003\u0002\\n[bogersay I'm Dorothy Boger and I approve this message.]\"}\n",
  "drudgebribe": "{} {string toupper \"[political_figure] took bribe from [corporation] to endorse [hotbutton], says [source]\"}\n",
  "mroach2": "{} {return \"V creepy mroachism incoming V\"}\n",
  "gobs_program": "{} {icosa . \"penus penus penus penus penus\"}\n",
  "dict.org": "{word {db *}} {set html [cwget http://www.dict.org/bin/Dict?Form=Dict2&Database=$db&Query=$word];html [strip_html [lindex [regexp -inline {<pre>\\s*(.+?)\\s*</pre>} $html] 1]]}\n",
  "moreteavicar?": "{} toot\n",
  "biggoldtext": "str {text goldchar $str}\n",
  "lulzdown": "{{who {}} {minusthis 1} args} {set user [string toupper $who]; if {[nick] == $user} {. [selfmodder $user]} else {if [array exists ::lulzscores{$user}] {array set ::lulzscores{$user} [list $user [concat [expr [last [array get ::lulzscores{$user}]]-[expr $minusthis]]]]}  else {array set ::lulzscores{$user} [list $user [concat $minusthis]]}; return \"Lame Comment, $user!\\n \\[\\-$minusthis\\] $args\"}}\n",
  "delegate:multiple": "args {[car [info level 1]]:[car [car $args]] [cdar $args]]}\n",
  "bent_pins?": "{} {cn [llength [info procs radeon*]] bent pins}\n",
  "master_get_stat": "i {set l [lindex [array get ::mastermind_stats $i] 1]; if {[llength $l]<1} { array set ::mastermind_stats [list $i [list 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]]; set l [lindex [array get ::mastermind_stats $i] 1] } else {}; return $l;}\n",
  "randatag": "{} {set tag [?? [atags]]; . $tag: [aud-$tag]}\n",
  "zybl0re_bash": "{} {return \"<Zybl0re> get up\\n<Zybl0re> get on up\\n<Zybl0re> get up\\n<Zybl0re> get on up\\n<Zybl0re> get up\\n<Zybl0re> get on up\\n<Zybl0re> get up\\n<Zybl0re> get on up\\n<Zybl0re> get up\\n<Zybl0re> get on up\"}\n",
  "aimf_coin": "args {aimify coin $args}\n",
  "mikael": "{} {return http://www.ikea.com/us/en/catalog/products/00079215}\n",
  "anime": "{{who {}}} {if {$who eq \"\"} {set who [name]}; return \"<$who> So you guys can go on about your [random_word] and your [random_word] and whatever bullshit you talk about to pass the time and make the constant throbbing reminder that your life is a living hell go away. I'll be hanging out with my FRIEND, watching anime.\"}\n",
  "attackad2": "{{pol {}}} {if {$pol == \"\"} {set pol [political_figure]}; return \"$pol's own words:\\n[hotbutton]: \\\"[niggerphrase]\\\"\\n[hotbutton]: \\\"[niggerphrase]\\\"\\n[hotbutton]: \\\"[niggerphrase]\\\"\"}\n",
  "image-driver": "url { magick_overlay $url http://imgur.com/CuEcal.png }\n",
  "master_col": "a {return [color [lindex [list fuchsia cyan red lime yellow blue] $a]]$a[color]}\n",
  "ucun": "{{dong {}}} {string toupper \"FUK UP [name $dong] U CUN\"}\n",
  "goon_recipe": "{} {set method [goon_cooking_method]; set food [goon_ingredient]; return \"[goon_recipe_title $method [regsub \".*? of \" $food \"\"]]\\n$food\\n[goon_ingredient]\\n[goon_ingredient]\\n[goon_ingredient]\\nCombine together and [string map {\"ied\" \"y\" \"aved\" \"ave\" \"ded\" \"d\"} $method].\"}\n",
  "mc_goon": "{} {. [upper [pringles] [kanye] [gaybar]  [kanye] [pringles] [gaybar] [doctoral] [fuckit].  [pringles]!]}\n",
  "ffw": "args {fullwidth_with_formatting [join $args]}\n",
  "smallheh": "{} {return [underline [bold \"heh\"]]}\n",
  "exqueue": "args {return [biggaybowtext \"x_Q\"]}\n",
  "buttesalarm": "args {sadunsay [color black on red]BUTTES[color white on blue]ALARM[color]}\n",
  "b": "args {bold $args}\n",
  "vertigo2": "{{who {}}} {if {$who eq \"\"} {set who [lindex_random [names]]}; return \"<$who> If I workedfor UPS, I'd have the pimpest truck around. I'd be running 22 inch spinners, hydraulic suspensions, police headlights, yellow windows and chain steering wheel. Hell yeah!\"}\n",
  "dickroulettechoosen": "{n l} { if {$n == \"octalc0de\"} { set l 0; } else {}; return [dicktopwise $l]\\n$n}\n",
  "letter_to_grandma": "{} {. \"\\nGrandma,\\n \\n[gen_letter]\\n \\nLove, [makename]\\n\"}\n",
  "imdb": "pattern {set buf \"\"; foreach {match url tt} [regexp -inline -all {<a href=\"(/title/tt[0-9]+?/)\">([^>]+?)</a>} [cwget \"http://www.imdb.com/find?s=all&q=$pattern\"]] { set tt [html [strip_html $tt]]; set url [html [strip_html $url]]; append buf \"\u0002$tt\u0002 - \u001fhttp://www.imdb.com$url\u001f\\n\" }; return $buf}\n",
  "trumpets?": "{} {string map {radeon trumpet\\ player} [count_nicks radeon]}\n",
  "scale-and-composite-gen": "{imgtop imgbottom scale tb lr} {\n set H [if {$tb == \"B\"} {. (- (height img) (height img3)) } { . 0 }]\n set W [if {$lr == \"R\"} {. (- (width img) (width img3)) } { . 0 }]\n return \"\n         (let ((img (image $imgtop))\n               (mh (* $scale (height img)))\n               (mw (* $scale (width img)))\n               (img2 (image $imgbottom))\n               (w (width img2)) \n               (h (height img2))\n               (ws (if (> w h) (* (/ mw w) w) (* (/ mh h) w)))\n               (hs (if (> w h) (* (/ mw w) h) (* (/ mh h) h)))\n               (img3 (resize img2 ws hs)))\n               (composite img img3 $W $H))\"\n}\n",
  "oops": "{} {. oops did i say that out loud? :-p}\n",
  "bubble_letters": "str {return \"( [regsub -all {\\|   \\|} [join [split $str {}] \" | \"] {) (}] )\"}\n",
  "big_smd": "{} {if { [nick] eq \"engimo\" } { bt engimo is a faggot } else { ajoin \" \" [sdraw {0 0 11111 00001 00001}] [bt (] [sdraw {00100 001}] [bt ~`\\;)]  [sdraw {0 0 11111000000 1 1}] [bt s my d] }}\n",
  "crw_litany": "{} { litany {[crw_word]} }\n",
  "xset": "args {if {[llength $args] < 2} {error \"wrong ## of args: should be \\\"xset var1 ... list\\\"\"}; set vars [lrange $args 0 end-1]; set list [lindex $args end]; foreach var $vars {set value [lindex $list 0]; set list [lrange $list 1 end]; uplevel [list set $var $value]}}\n",
  "nicks": "{} {return $::nicks}",
  "rot:C": "{} { return $::rotC; }\n",
  "Zonurus": "{} {pick 1 {. PUNTME PICKS FRUIT} 10 {. !Zonurus tcl Zonurus}}\n",
  "gaygay": "{} {return { \u00031,1-\u00034,1G\u00038,1A\u00033,1Y\u000312,1!\u00031,1-\u00034,4######\u00031,1-\u00034,4######\u00031,1-\u00034,4##\u00031,1--\u00034,4##\u00031,1-\u00036,1P\u00034,1R\u00038,1I\u00033,1D\u000312,1E\n \u00031,1-\u00038,1G\u00033,1A\u000312,1Y\u00036,1!\u00031,1-\u00038,8##\u00031,1-----\u00038,8##\u00031,1--\u00038,8##\u00031,1-\u00038,8##\u00031,1--\u00038,8##\u00031,1-\u00034,1P\u00038,1R\u00033,1I\u000312,1D\u00036,1E\n \u00031,1-\u00033,1G\u000312,1A\u00036,1Y\u00034,1!\u00031,1-\u00033,3##\u00031,1-\u00033,3###\u00031,1-\u00033,3######\u00031,1--\u00033,3####\u00031,1--\u00038,1P\u00033,1R\u000312,1I\u00036,1D\u00034,1E\n \u00031,1-\u000312,1G\u00036,1A\u00034,1Y\u00038,1!\u00031,1-\u000312,12##\u00031,1--\u000312,12##\u00031,1-\u000312,12##\u00031,1--\u000312,12##\u00031,1---\u000312,12##\u00031,1---\u00033,1P\u000312,1R\u00036,1I\u00034,1D\u00038,1E\n \u00031,1-\u00036,1G\u00034,1A\u00038,1Y\u00033,1!\u00031,1-\u00036,6######\u00031,1-\u00036,6##\u00031,1--\u00036,6##\u00031,1---\u00036,6##\u00031,1---\u000312,1P\u00036,1R\u00034,1I\u00038,1D\u00033,1E\nBUTTESNET GAY PRIDE NETWORK WIDE}}\n",
  "animalprefix": "{} {lindex_random $::animalprefix}\n",
  "rndtcl_variable": "{} {return \"\\$::[rndtcl_identifier]\"}\n",
  "radeon2": "{} {return \"Not to sound like a giant racist here, but some of stormfront.org does bring up some interesting points, concerning the jewish population and the holocaust anyway.  Where are the ashes? There has been no ashes or other remains of the cremated jews.\"}\n",
  "job": "{} {lindex_random $::job_dict}\n",
  "g_l": "{} gen_letter\n",
  "rainbow": "args {set ret \"\"; foreach char [split [strip_all [join $args]] {}] {if {$char eq \" \" || $char eq \"\\n\"} {append ret $char} {if {$char eq \",\"} {set char \",,\"}; append ret \u0003[gay]$char}}; return $ret}\n",
  "n/m/i": "{} {return \"El N/M/I Association de America presentÃ³ hoy una nueva especificaciÃ³n N/M/I-[expr [year]+1] que traerÃ¡ la atenciÃ³n no en el siglo 21 por primera vez.\"}\n",
  "syn": "args {return \"ack\"}\n",
  "magick_overlay": "{urlbottom urltop} {magick overlay $urlbottom [magick_id $urltop]}\n",
  "david": "{} {return \"\u001f  /\\\\  \u001f\\n\\\\/  \\\\/\\n\u001f/\\\\  /\\\\\u001f\\n  \\\\/  \"}\n",
  "pornroulette": "{} {gis [?? $::porn_adj] [?? $::porn_noun]}\n",
  "image-god-bless": "url {magick-scale-composite-bottom-left $url  http://rolloffle.churchburning.org/images/overlays/lady-liberty-god-bless.png  0.66}\n",
  "kanyewest": "{} {return \"yo [name] i'm happy for u, imma let u finish, but [name] is one of the best [faglame]s of all time!\"}\n",
  "wfml": "{} weird_fml\n",
  "ljoin": "args {set r [list];foreach l $args {foreach e $l {lappend r $e}};return $r}\n",
  "bickering_nords": "{} {stampsay -s vikingboat [upper [norway [strip_newlines [cached_onehug]]]]}\n",
  "tt": "{a b} {join [list [bigtext $a] [biggaybowtext $b]] \\n}\n",
  "loser_word": "{} {lindex_random $::loser_word_dict}\n",
  "andrzej_say_recipe": "{} {stampsay -s andrzej [stripnick [andrzej_recipe]]}\n",
  "goosebumps": "{} {return \"A WHORE HANDED ME DAD'S WALLET\"}\n",
  "capture": "{vars {level 1}} {\r\n\tset arrays [set scalars [list]]\r\n\r\n\tforeach var [uplevel $level {info vars}] {\r\n\t\tif {$vars eq \"-all\" || [lsearch -exact $vars $var] != -1} {\r\n\t\t\tif [uplevel $level [list array exists $var]] {\r\n\t\t\t  lappend arrays $var [uplevel $level [list array get $var]]\r\n\t\t\t} else {\r\n\t\t\t  lappend scalars $var [uplevel $level [list set $var]]\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tlist scalars $scalars arrays $arrays\r\n}\n",
  "or": "args {foreach value $args {if {$value ne \"\"} {return $value}}}\n",
  "nethackbox": "{{width 5} {height 5}} {set edge \"+[string repeat - $width]+\"; set inside \"|[string repeat . $width]|\"; . $edge\\n[string repeat \"$inside\\n\" $height]$edge}\n",
  "gaylist": "{} { return \"\u0002The following people are gay:\u0002\\n\u00021.\u0002 [name]\\n\u00022.\u0002 [name]\\n\u00023.\u0002 [name]\" }\n",
  "uaflip": "what {uajoin \"\" [. $what\\n[uvflip $what]] [. [flip $what]\\n[uvflip [flip $what]]]}\n",
  "niggerhug": "{{who {}}} {aim -n [aimname $who] [niggerize [grouphug] ]}\n",
  "suckzooka": "{} {return \"  _________________________________                       _______\\n |_________________________________|                 |====_______ >\\n             / /_|       / /\\n            /_/         /_/                    nigga where my bazooka be at\"}\n",
  "RAruler": "{{who {}}} {raruler $who}\n",
  "master_gete": "{i b} { set a [master_get $i]; return [lindex $a $b]; }\n",
  "bampersand": "{} {biggaytext B&}\n",
  "mathjoke": "{} {lindex_random $::mathjoke}\n",
  "invented": "{{i {}}} {return \"<moira_> I remember when I invented [random_word $i], way back in [regsub -all {(\\d\\d)0(\\d)} [rand 1900 2008] {\\1-aught-\\2}]\"}\n",
  "norgedream": "{} {dickroulettechoosen ÃÃ¬KKy 5}\n",
  "okeyramble": "{} {return \"<okey> [okeyphrase]\"}\n",
  "ceil": "x { expr ceil($x) }\n",
  "koran": "{} { lindex_random $::koran }\n",
  "rndtcl_operator": "{} {lindex_random {+ - < > >= <= == !=}}\n",
  "bigmac": "{} { return \"\u00037,4\u0002/\\\\/\\\\\u0002\u0003 \u0002can i get a big mac\u0002\" }\n",
  "hun": "{} {}\n",
  "curse_you_steve": "product {ajoin \" \" [bgbt [lindex [regexp -inline {Update: (\\d+)} [buyers_guide $product]] 1]] \"\\n\\nDAYS SINCE [string toupper $product] UPDATE\\nCURSE YOU \\$TEVEN P. JOB\\$!!!!!\"}\n",
  "barbarawalters": "{{args {}}} {if {$args eq \"\"} {set args [random_word]}; return \"If you were $args, what sort of $args would you be?\"}\n",
  "krys": "{{who {}}} {return \"<+[name $who]> [name]: makeouts?\"}\n",
  "bobbyfischer": "{} {return \"[bobbyfisher]\"}\n",
  "nickberg": "{} {return \"\u00035,1N I C K B E R G\\n\u00038,1K \u00032,2#\u00030,2_O_/\u00032,2,#\u00038,2|\u00032,2,#\u00038,2|\\\\\u00038,1 G\\n\u00038,1T \u00030,2/\u00032,2,\u00030,2\\\\__..\u00038,2|\u00034,2~\u00030,2O\u00038,2|\u00032,2,\u00038,1 O\\n\u00038,1H \u00033,3#,\u00030,3/\u00033,3#,#,\u00038,3|\u00033,3#,\u00038,3|\u00033,3#\u00038,1 A\\n\u00038,1X \u00038,3-----\u00033,3,#,#,\u00038,3|\u00033,3#\u00038,1 L\\n\u00035,1N I C K B E R G\"}\n",
  "slot_deposit": "{{amount 100}} {set who [normalize_nick [nick]]; incr ::slot_jackpot $amount; slot_debit $who $amount; incr ::slot_stats(played,$who)}\n",
  "real_paste": "{cmd args} {if {[catch [concat $cmd $args] val] == 1} {error $val} {lindex [regexp -inline {<a href=\"(.*?)\">} [http post http://ossfans.org/paste paste $val function new .submit {Create paste}]] 1}}\n",
  "bats": "{} {join [concat [lrange [split [wt ^^^^^^^] \\n] 0 4] [list [center \"OH NO!!! BATS!!!\" 40]]] \\n}\n",
  "xssnimp": "{} {subst [lindex_random $::xssnimp]}\n",
  "aimmiller": "{{who {}}} {return \"[aim -n [aimname $who] \"Not to get off on a rant here, but listening to you makes me wish I was [celebrity] joining [political_figure] in the [crime] of several [ethnic_group] during [historical_event]. Asking [country] to not [ethnic_cleansing_verb] [plural [niggerword]] is like asking [celebrity] to contract [disease_word], rub his [body_part] against my [penis_word], then stay away from the [food_word].\"]\"}\n",
  "fmt": "{} {. Today, [myt]. FML}\n",
  "conspiracy_group": "{} {lindex_random $::conspiracy_groups}\n",
  "sendthemback": "{} { stampsay -s ghost \"Send those [niggerword]s back to [niggerplace]. That's what I've always said.\" }\n",
  "STbonerhead": "{} {. \"   _ \\n  /\\\\)\\n / /  \\n/__\\\\  \\n/..\\\\  \\n\\\\_O/  \\n\"}\n",
  "strip_color": "str {regsub -all {\u0003\\d{1,2}(,\\d{1,2})?} $str {}}\n",
  "mroach4": "{} {. <mroach> ELI COULD YOU GET ME [upper [mroach_item]]}\n",
  "vote": "{} {pick 1 1 1 2 1 3 1 4 1 5}\n",
  "bqs": "{} {return \"Bot Query Syndrome\"}\n",
  "fecal_shape": "{} {lindex_random $::fecal_shapes }\n",
  "stamps": "{{filter *}} {map1 [info procs ST$filter] {string map {ST {}}}}\n",
  "puntme_crew": "{} {wget http://limux.biz/puntme_crew.txt}\n",
  "samsay": "{url args} {set ws \"                                                              \"; foreach l [split [wrap [join $args] 45] \"\\n\"] {lappend s \"                                          $l\"}; . \"[join $ls \"\\n\"]\\n$ws  /\\n$url\"}\n",
  "go:top": "{} {uchar 2533}\n",
  "rbl": "{} {return \"RANDOM FAKE BUTTES LOG: [rbl_time] [rbl_line]\"}\n",
  "yahoozee_lyrics3": "{} { return \"awa o n se osomo gbomo ti  aaaun\\nwaw o n se osomo gbomo gbin oh\\nto ba wunmi mo le gba tokyo loo\\nto ba wunmi ma lo jamaica oo\\nbo le tie wunmi kini mo fe lo gamani ooo\\nkini mo fe lo ojo meji pere, owo lo n soro ohh\\nti n ba hammer,  1st thing the hummer\\n1 million dollars, elo lo ma je ti n ba se ni naira\\nowo n be lapo mi o, dide ko bamijo\\n\" }\n",
  "kalleclean": "{} {return \"<@Kalle> [kallecleanline]\\n<@Kalle> [kallecleanline]\\n<@Kalle> [kallecleanline]\\n<@Kalle> [kallecleanline]\\n\"}\n",
  "jnzburga": "{{who {}}} {set who [name $who]; anyburga $who [random_word] [sex_act] [random_word]}\n",
  "hitman": "{} {return \"Can you [ethnic_cleansing_verb] [aquaintance_word], the [faglame] [unplural [ethnic_group]]?\"}\n",
  "scalar": "x { return $x }\n",
  "dead_country": "{} {?? $::former_countries}\n",
  "frottage": "{} {ajoin \" \" [rain [crw_word]\\n[crw_word]\\n[crw_word]\\n[crw_word]\\n[crw_word]] [biggaytext 8=======>] [flip [biggaytext 8======>]]}\n",
  "cache_stats": "bucket {let {keys {. [llength $keys] entries, [inject $keys 0 {{bytes key} {($bytes + [string length [cache get $bucket $key]])}}] bytes}} [cache keys $bucket]}\n",
  "is_unprintable": "char {set c [scan $char %c]; expr {$c < 32 || $c > 126}}\n",
  "brokenjew": "{} {return \" \u001f  /\\\\\u001f  \u001f/\\\\  \u001f \\n \\\\/ /  \\\\ \\\\/\\n \u001f/\\\\ \\\\\u001f  \u001f/ /\\\\\u001f\\n   \\\\/  \\\\/  \"}\n",
  "spc": "arga {return \"[join [times [expr $arga] { }]]\";}\n",
  "clockus": "{} { set base [ourbasetime]; set clicks [clock clicks]; set diff [expr  $clicks - [lindex $base 1]]; set us [expr  ($diff - [lindex $base 1])%1000000]; set seconds [expr [expr $diff - $us]  / 1000000]; set time [expr [lindex $base 0] + $seconds]; format $time.%06d $us}\n",
  "lasttwat": "user { unescape_html_entities [html [lindex [regsub -all {&amp;} [regexp -inline {<text>(.*?)</text>} [600~http://twitter.com/statuses/user_timeline.xml?screen_name=[twatname $user]&count=1]] &] 1]] }\n",
  "rt": "args {set ret \"\";foreach l [split [strip_all [bgbt [join $args]]] \\n] {set c [gay];lappend ret [regsub -all {\\*+} $l \u0003$c,$c&\u000f]};join $ret \\n}\n",
  "14nords": "{} {return \"We must secure the existence of our people and a future for nord children.\"}\n",
  "butte": "{} {return \" BUTTES\\n ------\\n_|    |_\"}\n",
  "cock_combat": "{performing_amateur_surgery_on goontopia Lowtax} {lappend arachnid $his_sister; lappend cutting [nfo [rainmanbabies $rasterbate] $cockrubbin]; return $boxin}\n",
  "shut": "args {return \"no you shut [join $args]\"}\n",
  "911spiracy": "{{who {}}} {return \"[name $who] didn't happen\\nit was just a conspiracy\";}\n",
  "inspect": "{args} {\n    set proc [lindex $args 0]\n    set procs [info commands [escape_glob $proc]*]\n    \n    if {[llength [info commands [escape_glob $proc]]] == 1} {\n        src $proc\n    } elseif {[llength $procs] == 0} {\n        if [llength [set handler [apply_84 unknown:handler_for {*}$args]]] {\n          src [lindex $handler 0]\n        } else {\n          error \"\\\"$proc\\\" isn't a procedure\"\n        }\n    } elseif {[llength $procs] == 1} {\n        src [first $procs]\n    } else {\n        error \"\\\"$proc\\\" is one of [conjoin [lsort $procs] or]\"\n    }\n}",
  "poodle": "{} { string map {W-- --- {Cow Sex} {A poodle's yip} {Here's The Beef} {Engorges my tip} { __} { @@} {_______} {@@@@@@@}} [cowsex] }\n",
  "rev": "args {map [split_on_formatting [lines [join $args]]] {{f t} {. $f[invert $t]}}}\n",
  "STmlad": "{} {return {     _,....--......__       \n   ,-'8888888888M8MM'._     \n  /d888888888888888HHMM`.   \n /t888888____888888Y__HMN|  \nH|d8888P/   '`'`--''z'HMD|. \n'H8888P|              jX8bO \nmq8888.|               .88#.\n:c8M88W   ____      __  W8#!\n:eY88P   ` ..'_    :''''U8zJ\n::9`8     ''U''   \\\\ <U./`8i_\n : 88              :     d8 \n : .8          /   H     88 \n  ::88         .|..`     88 \n  :088`    ..###:|+,\\\\Hv _888\n   +.88._.j888U --- `-bd8888\n   kX8888b88    /+\\\\   |88888\n    .X88888b.._,Q8'.o;'88888\n    HMY888888b8888888888888P\n    HNgY88#8MMM88888888888P \n     &HHMY888888888888888P  \n        &&W9Y888888P^^:     }}\n",
  "catquote": "{{ticker cat}} {catback [string map {+ {UP } - {DOWN }} [strip_all [stock $ticker]]]}\n",
  "napply-block": "{n cmd {input {}}} { set ret $input; for {set x 0} {$x < $n} {incr x} { set ret [\"$b $ret\"] }; return $ret; }\n",
  "randomgarfieldplusdicks": "{} {while 1 {set t [expr {int(rand()*946707779)+267062400}]; if [clock format $t -format \"%w\"] break}; garfieldplusdicks [clock format $t -format \"%Y\"] [clock format $t -format \"%m\"] [clock format $t -format \"%d\"]}\n",
  "arotate90": "strl {  rot:serializematstringmap [rot:rotatematrix90 [split $strl \\n]] [rot:arotate90map] }\n",
  "image-fu-right": "img {  magick-scale-composite-bottom-right $img [~magick flop http://churchturing.org/x/middlefinger.png] 0.65 }\n",
  "aimf_norse_poem1": "args {aimify norse_poem1 $args}\n",
  "nsplit": "list {split $list \\n}\n",
  "vista": "{} {. [img-vista]; string map {pooped {released vista} Poopers Developers} [poop]}\n",
  "corrinize": "args {set ret [choose \"\u0002\u000311^_^\u000313 $args \u000311^_^\u0003\u0002\" \"\u0002\u000313^_^\u000311 $args \u000313^_^\u0003\u0002\"]; return $ret;}\n",
  "peeer": "{} {return \"(   ( .--.   \\n \\\\  \\\\/    .  \\n /\\\\  \\\\     : \\n/ / /_      :\\n(_(___\\\\      \"}\n",
  "niggers": "{} { return \"niggers? they're the second worst type of people alive on planet Earth.\" }\n",
  "c/d": "args {?? {c d}}\n",
  "go:topleft": "{} {uchar 250f}\n",
  "master_match_print": "{i a b c d m} { return \"$i [master_num $a $b $c $d] Perfect Matches [lindex $m 0] Not So Perfect Matches [lindex $m 1] Misses [lindex $m 2]\"; }\n",
  "relax": "{{word {}}} {if {$word eq \"\"} {set word [word a(x|cks)$]}; return \"around [regsub cks$ $word x] never relax\"}\n",
  "legisteldomain": "{} {chinksay [registerdomain]}\n",
  "niggerfulname": "{} {return \"[niggername] [waspsurname]\"}\n",
  "rndtcl_expr": "n {pick 1 {return \"\\[expr [rndtcl_expression $n] [rndtcl_operator] [rndtcl_expression $n]\\]\"} 4 {rndtcl_expression $n}}\n",
  "perlop_map": "{} {?? {+ - * / % . << >> & | ^}}\n",
  "aimf_jnz": "args {aimify jnz $args}\n",
  "swede_first_name": "{} {?? $::swede_first}\n",
  "phobe": "{} {return \"[lindex_random $::pervprefix]phobe\"}\n",
  "fedoragoonsay": "args {stampsay -l -s fedoragoon [join $args]}\n",
  "frotamid": "{} {join [times 7 [. [embed [ajoin \" \" [STdance] [oldflip [STdance]]] \"_ _\" 4 2]]] \\n}\n",
  "dolfin": "{} { return \"fck off\" }\n",
  "STdeadcat": "{} {vflip [STcat]}\n",
  "gud1": "{} {return [bold][color [choosecolor]][haioh]}\n",
  "STsam": "{} {.  \\ __\\n|.-.\\n|_o|}\n",
  "aim_pledge": "args { aim -n [aimname $args] [pledge] }\n",
  "advise_moira": "{{who ConcernedChatter}} {join [concat [repeat 5 {. <moira> [choose \"brb [booze_act_word] a [drink]\" [moiradrunk]]}] [list \"<$who> moira perhaps you should watch your alcohol intake\" \"<moira> HEY I DNO'T NEED YORU ADVICE ON THE MAINTENNANCE OF MY ANANOTOYMY\"]] \\n}\n",
  "f2c": "f {. [format \"%.2f C\" [expr (5.0/9.0)*($f-32)]]}\n",
  "jca": "{} {. \"<jca> [fml]\"}\n",
  "wet": "args {set str [strip_all [join $args]]; if {[string length $str] > 14} {error \"too long, spic\"}; set prefixes [list \\n {} \\n \\n\\n]; set args [list]; set i 0; foreach c [split $str {}] {if {$c eq \" \"} {lappend args \"    \"} {lappend args [lindex $prefixes [expr {$i % 4}]][et $c]; incr i}}; eval [concat [list ajoin \" \"] $args]}\n",
  "loadproc": "args {. [join $args]: [strip_space [html [strip_html [last [regexp -inline {<div class=.definition.>(.*?)</div>} [cwget http://pluto.xzibition.com/~redukt/v.tcl +]]]]]]]}\n",
  "furcism": "{} {return \"Furcism is just as bad a racism jackass, if you dont have anything intelligent to say shut the fuck up.... Obviously furry is in demand if the mod created a board for it, therefore he needs to fix the link, and you can just avoid it with your furcist ass. Geez im getting tired of lil pricks saying stupid shit. May a tiger eat your entrails.....\"}\n",
  "randomStamp": "{} { return [pick  1 {sperm 1} 1 {rncockrow 1} 1 { jew } 1 {jews} 1 {MAGICMUSHROOM 1} 1 {nomg 1} 1 {rainbow [nomg 1]} 1 {nomg 2} 1 {bgr [rrand_color] [unix]} 1 {bgr [rrand_color] [unix]} 1 {bgr [rrand_color] [unix]} 1 {bgr [rrand_color] [unix]} 1 {bgr [rrand_color] 8=D} 1 {bgr [rrand_color] ~~~} 1 {bgr [rrand_color] C=8} 1 {c 8=D ~} 1 {ncockrow 1}  ]; }\n",
  "anxious": "{} {smega {rain [tranny_channel]}}\n",
  "infid3l": "{} {rain {heyyy :)}}\n",
  "STfeetup": "{} { return \" ,...o o,,,. \\n (   ) (   ) \\n  \\\\ (   ) /  \\n   \\\\_) (_/   \";}\n",
  "â¡": "args {apply cnbc $args}\n",
  "bittorrent": "{} {return \"why is it that every time I download warez and shit from bittorrent, I'm connected to like 100 people and the speeds are lame, yet when I torrent these videos from common-lisp.net, I connect to 15 seeds and get like 800 KB/s?\"}\n",
  "uliphrase": "{} { lindex_random $::uli_quotes }\n",
  "tincanada": "str {tinfoil [shittify [canada [say \"$str\"]]]}\n",
  "cor": "{} {return \"\u0002BLIMEY\u0002\"}\n",
  "â¼â": "{} {. Me and Giuliani Down by the School Yard (A True Story)}\n",
  "dadey": "{} {return \"DADEY GETING A HOEL IN HIS BALLESAKE\"}\n",
  "sombrerify2": "{comic {head { .'```\"\".}}} {inject [locate $head $comic] $comic {{canvas coords} {embed $canvas ____n____ [expr [first $coords] + 1] [expr [- [last $coords] 1] + 1]}}}\n",
  "sweetballs": "{{who {}}} {ajoin \" \" \"\\n[join [lrange [split [STcock] \\n] 0 2] \\n]\\n /   |\\n[flip [STass]]\" \"[sperm 1]\\n\\n\\n\\n      \u0002SWEETBALLS\\n      FOR \u0002[string toupper [name $who]]\"}\n",
  "dickroulettechoose": "n { set length [rand 2 6]; if [isasian $n] { set length 0 }; return  [string repeat \"\\n\" [expr  8 -  3 - $length  ]][ncock $length]\\n$n }\n",
  "gay_count": "{} {llength [intersect [string tolower [names]] [string tolower $::gay_count]]}\n",
  "bigbutte": "{} {return \"[bgt [butte_word]]\"}\n",
  "STdoctor": "{} {. \"     .----.    \\n    ===(_)==   \\n   // 6  6 \\\\\\\\  \\n   (    7   )  \\n    \\\\ '--' /   \\n     \\\\_ ._/    \\n    __)  (__   \\n /\\\"`/`\\\\`V/`\\\\`\\\\ \\n/   \\\\  `Y _/_ \\\\\"}\n",
  "swedes?": "{} {set i 0;foreach swede $::swedes { set i [expr $i + [llength [lfilter $swede [string tolower [names]]]]] };c $i swedes}\n",
  "STsmallkin": "{} { . \"  ___/(__\\n / Q\\\\ /Q \\\\\\n|  \\\\/\\\\/\\\\  |\\n \\\\_______/\"}\n",
  "catbusbrb": "{} {return \"<Catbus> [internetacro] [sex_act] [choose kids boiz lolis] [face]\"}\n",
  "chanfm": "{} {drawtable [subst [wget http://manimal.prettybrd.com/~leedo/scripts/lastbutte.pl?u=[join [map [names] {name {. $name [lastfm:namemap $name]}}] ,]]]}\n",
  "acro": "args {set a [string tolower [lindex $args 0]];set c [string tolower [lindex $args 1]];if {$a eq \"add\"} {acro $c [acroadd $c [lrange $args 2 end]]} elseif {$a eq \"del\"} {acrodel $c [lindex $args 2]} elseif {$a eq \"clear\"} {acroclear $c} elseif {$a eq \"list\"} {acrolist $c} {acroret $a}}\n",
  "sa_fetch_threads": "{forumid {pagenumber 1}} {set html [wget http://forums.somethingawful.com/forumdisplay.php?forumid=$forumid&pagenumber=$pagenumber]; set ret [list]; foreach {match threadid title} [regexp -all -inline {<a class=\"thread\"(?:.*?)threadid=(\\d+)[^>]+>([^<]+)</a>} $html] {lappend ret [list $threadid [html $title]]}; return $ret}\n",
  "cflags": "{{length 0}} {if {$length == 0} {set length [expr {[rand 10]+5}]}; string trim [subst [string repeat {[cflag] } $length]]}\n",
  "lfilter_not": "{glob list} {join [map $list {w {if ![string match $glob $w] { . $w}}}] { }}\n",
  "goonname": "{} {return \"[adjective] [colour][choose goon pirate bot monkey tax geno] [choose \"\" \"\" \"\" \"v2.0\"]\"}\n",
  "moiratv": "{} {moiravision [pt anime]}\n",
  "get": "var author\n",
  "hindu": "{} { dot }\n",
  "swallowing": "{{n {}}} {return \"[name $n] deserves only the best, and that includes swallowing his cum after a blowjob.\"}\n",
  "image-border": "{url {offset 50}} { image-border_scheme $url $offset }\n",
  "gernrant": "{{who {}}} {if {$who eq \"\"} {set who [name]}; return \"<$who> This is a [56k_word] on my [crw_word] experience.\"}\n",
  "puntme4": "{} {return \"you mean puÃ±tme\"}\n",
  "go": "args {delegate $args}\n",
  "reindeer": "{{args {}}} {return \"[name $args]: your mother is a reindeer\"}\n",
  "dasvw": "{} {return \"[bgc 01 04 1 volk]\\n \\n[bgc 04 01 1 reich]\\n \\n[bgc 01 04 1 getriebe]\"}\n",
  "negromg": "{} {return [rainbow [omg]]}\n",
  "slot_stats_spent": "who {if ![info exists ::slot_stats(spent,$who)] {set ::slot_stats(spent,$who) 0}; return $::slot_stats(spent,$who)}\n",
  "STfuncock": "{} { return [rainbow [ncock [expr [rand 3]+1]]]  }\n",
  "third": "list { lindex $list 2 }\n",
  "gamerphrase": "{} {lindex_random $::gamerwords}\n",
  "usfolks": "{} {lindex_random $::usfolks}\n",
  "acrochars": "chars {mapx $chars char {acrochar $char}}\n",
  "dullboy": "{{who {}}} {set who [name $who]; if {$who eq \"\"} {set who [lindex_random [names]]}; return \"all [random_word] and no [random_word] makes $who a [marginalize] boy\";}\n",
  "CanadianSlots": "{} {return \"[canadian_object], [canadian_object], [canadian_object], [canadian_object]\"}\n",
  "caption": "{image_url args} {caption_raw $image_url [latext_escape [join $args]]}\n",
  "dontcallslotsinsideastamp": "{} { return \"[slots]\"; }\n",
  "mike_count": "{} {llength [intersect [string tolower [names]] [string tolower $::mikes_count]]}\n",
  "timeout": ". words\n",
  "trippy_spew": "{} {aflip [moiraspew]}\n",
  "myfm": "{} {lastfm:singleuserquery [lastfm:nameunmap [nick]]}\n",
  "zYBLORE": "{a b} { return \"[string repeat \"(_\" $a][seamen $b 3] [zybl0re]\"}\n",
  "norseline": "{} { lindex_random $::norse }\n",
  "frotteur": "{} {?? $::frotteur_quotes}\n",
  "ahso": "{} {return [biggaybowtext moira\\ sux]}\n",
  "disease": "{} {?? $::disease_dict}\n",
  "STsnoopy": "{} { join $::snoopy \\n }\n",
  "rot:rotate90": "strl {\n    rot:serializemat [rot:rotatematrix90 $strl]\n}\n",
  "colleges": "{} { return $::collegeaim }\n",
  "nigger2": "{} {return [nigger1]}\n",
  "mult": "{} {string map {\" + \" \" * \"} [arith]}\n",
  "mate": "{} {. [bold]GREAT}\n",
  "rot:listxy": "{l x y dfl} { set k [lindex [lindex $l $y] $x]; if {$k==\"\"} { return $dfl; } { return $k; };  }\n",
  "bt2": "args {set str [join $args]; bigtext2 $str}\n",
  "codepage": "{a b} {set a [format %c $a]; set b [format %c $b]; return \"$a$b[join [mapx [seq 128 191] x {format %c $x}] $a$b]\"}\n",
  "internetword": "{} {return [lindex_random $::internet_dict]}\n",
  "num": "{a args} { regsub \"^.aim\" [eval $args] \".aim:$a\" }\n",
  "youcomment": "{{name {}}} {if {$name eq \"\"} {set name [lindex_random [names]]}; return \"<$name> [youtube_comment]\"}\n",
  "aimrands": "{{who {}}} {return \"[aim -n [aimname $who] [rands]]\"}\n",
  "mr_x": "{} mrx\n",
  "dalnet": "{} {. #[string repeat ! [rand 0 12]]100%[s/_//g [fetish_porn]]sexpics}\n",
  "jewfullname": "{} {return \"[jewname] [lindex_random [cseq A Z]]. [jewsurname]\"}\n",
  "serena": "{} {. < serena> [?? [list .. afk :\\]]]}\n",
  "unknown:7:cmd(fuzzy_find_command)": "{matches args} {error \"invalid command name \\\"[first $args]\\\" - did you mean \\\"[join $matches \"\\\", \\\"\"]\\\"?\"}\n",
  "karafinger": "{} {return \"<@Karabiner> I fingered [acquaintance] (relax, she's older than me \\[don't ask])\"}\n",
  "anal": "{{balls {}}} {return \"[nick] has anal sex with [name $balls]\"}\n",
  "thinice": "{} {. [img-verythinice] \\n [aud-thinice]}\n",
  "set-union": "{a b} { remove-duplicates [concat $a $b] }\n",
  "expand": "args {set list [lindex $args end]; set args [lrange $args 0 end-1]; foreach var $args {uplevel [list set $var [first $list]]; set list [lrange $list 1 end]}}\n",
  "mockobama": "{} {magick annotate [gis obama] 18 230 60 white [wrap [bixnood] 20]}\n",
  "jewcanoe": "{} { jews }\n",
  "saq_beer_review": "{{line {}}} {if {$line eq \"\"} {set line [saq_beer_line]}; string map $::saq_beer_review_map $line}\n",
  "mroach13": "args {. {<@mroach> my problem with hitler is that everyone overreacted to what he did and it put  europe into a political correctness coma}}\n",
  "char2": "c {if [catch {regsub -all {\\*} [decode $::alphabet([string toupper $c])] \"*\"} err] {return [join [string repeat \"{   } \" 5] \\n]} {return $err}}\n",
  "saynorthkorea": "{{propa {}}} {set wstring \"\";set wstring2 \"\"; for { set i 1 } { $i<=([string length $propa]+6) } { incr i } { append wstring \"_\"; append wstring2 \" \" } ;  return \"[color white on blue]$wstring\\n[color white on red] \\* [name $propa]   \\n[color blue on blue]$wstring2\"}\n",
  "gayxzibit": "{} {string map {\"YO DICK\" \"YO ASS\" \"U FROT\" \"U FUK\"} [string map {CARS DICKS CAR DICK DRIVE FROT} [xzibit]]}\n",
  "testpump": "{{width {}} {height {}} {amount {}} {trans {}}} {return \"[fit [wget http://wepump.in/ascii/chrishansen.txt]]\"}\n",
  "randomwaffle": "{} {set html [unescape_html_entities [wget http://waffleimages.com/random]]; set url [lindex [regexp -all -inline {<IMG SRC=\"(.*?)\"} $html] 3]; . \"${url}#.jpg\"}\n",
  "absence": "{} {?? [lines [cwget http://pastie.textmate.org/252478.txt?key=fvszqg6hc3mjxodm8hvbfa]]}\n",
  "ffsoy": "{} {return \"[bt FAGS FOR]\\n \\n[bt SOME OF YOU]\"}\n",
  "nazisay": "txt {ajoin \"\" [wrap [join $txt] 50] \"\\n\\\\\" [STnazi]}\n",
  "bj_score": "{} { return \"[nick] has \\$ [blackjack_get_score [nick]]\"; }\n",
  "onaboat": "{} {. http://content.ytmnd.com/content/a/8/6/a86e4591556d7a798e257d2393515781.mp3}\n",
  "famousniggerwoman": "{} {lindex_random $::dict_famousniggerwomen}\n",
  "threat": "{{n {}}} {return \"[name $n], I'll [act_word] your [body_part] if you don't [choose \"watch it\" \"cut it out m8\"]!\"}\n",
  "jizz": "{} { . \"some gay ass shit\"}\n",
  "unknown:1:cmd/^@(.*)/": "{matches args} {apply [list macro [last $matches]] [lrange $args 1 end]}\n",
  "restaurant": "{{args {}}} {return \"[name $args]: let me take you to a 5 star restaurant\"}\n",
  "menu_food_prefix": "{} {subst [lindex_random $::menu_food_prefix]}\n",
  "gamercardfor": "{{gamertag {Dishonest Man}}} {. http://card.mygamercard.net/nxe/[urlescape $gamertag].png}\n",
  "rather": "{} {return \"I'd rather [act_word] [choose \"my own\" \"your\" \"[name]'s\"] [body_part] [choose \"in front of a group of\" \"for the amusement of\"] [ethnic_group] than discuss [hotbutton]\"}\n",
  "randback": "args {apply [?? [array names ::cutbackpix]]back $args}\n",
  "~~~~~~~~~~~~~~~~~~~shoa.": "{} {return \"~~~~~~~~~~~~~~~~~~~shoa\"}\n",
  "stuff": "{} {act \"stuffs herself into Alien's mouth\"}\n",
  "evanm": "{} {return \"FLIP THE BITS\"}\n",
  "kember": "{str {color {}}} {set color [or $color [?? {13 10 8 6 3}]]; join [map [split $str] {word {pick 1 [list . [color white on $color] $word [color]] 2 [list . $word]}}]}\n",
  "hactar": "{} {return \"I like dicks\"}\n",
  "hateporn": "{{puntime {}} {shemales {}}} {if {$puntime eq \"\"} {set puntime [lindex_random [names]]}; if {$shemales eq \"\"} {set shemales [strip_u [fetish_porn]]}; set lol \"$puntime: why do you hate $shemales\"; append lol \"?\"; return $lol}\n",
  "fixxbox": "{} {say \"\u00033,6AESOP FIX XBOX \"}\n",
  "slot_format": "amount {format {$%.02f} [expr {$amount/100.}]}\n",
  "mccain_geography1": "{} { . \\\"It's a very hard struggle, particularly given the situation on the [country_name]/[country_name] border.\\\" -- John McCain, July 21}\n",
  "master_score_get": "i { set a [lindex [array get ::mastermind_score $i] 1]; if {$a == \"\"} { array set ::mastermind_score [list $i 0]; return 0; } else { return $a };}\n",
  "jerkrain3": "{} {sinewave [join [map [jerkcity] {word {. \"\\00300,[gridse_colour] $word \"}}] \"\"]}\n",
  "age": "{} {lindex_random $::age}\n",
  "rss_headlines": "url {map1 [odd_elm [rss_parse_feed [wget $url]]] html}\n",
  "latex": "args {magick noop http://www.codecogs.com/eq.latex?[urlencode [join $args]]#.png}\n",
  "italian_first_name_f": "{} {jc 225}\n",
  "lulzcrime": "args {return \"[name $args] does not entail the lulz; [name $args] IS the lulz.\"}\n",
  "idetect": "{{who {}}} {return \"\\]\u0002IsraelDetect\u0002(\u001ftM\u001f)\\[   \u00034WARNING\u0003  The presence of a \u0002jewish citizen of \u001fIsrael\u001f\u0002 has been detected in the vicinity of \u001f[name $who]\u001f.\";}\n",
  "crw_ad": "{} {embed [tail [head 17 [macro tux]]] \"[color black][crw_word].\\n[color black][onebutan_word].\\n[color black][tranny_word].\\n[b][color black]BUTTESNET[b]\" 5 5}\n",
  "ratio2": "{} {. \"[expr 1.0 * [mike_count] / [jew_count]] mikes per kike (mpk)\"}\n",
  "rand_color": "{} {set colors {08,04 12,10 08,01 01,13 09,01 11,12 11,03}; return \"\u0003[lindex $colors [rand [llength $colors]]]\"}\n",
  "gaymath": "{} { stampsay -s kkk \"[lindex_random {homosexuals faggots {white people} chinks ragheads towelheads {sand niggers} {lol, honkeys} jews kikes niggers spics mexicans nords swedes {german fags} homos}] + [drug_word]s in [size_word] [booze_container_word] = [lindex_random {{bad news} trouble {big problems} {there goes the neighborhood} {a serious pickle}}]\" }\n",
  "blackjack_hitme": "p { if [blackjack_bust_check $p] { return \"YOU'RE BUSTED\"; } else { }; set o [blackjack_hit $p]; if [blackjack_bust_check $p] { return [ajoin \" \" \"BUSTED\" $o]; } else { return $o }; }\n",
  "worthless_degree": "{} {. [ucwords [?? $::worthless_degree]] }\n",
  "theshitedevil": "{} {. popeye is a faggot}\n",
  "coddman": "{} {ta coddman}\n",
  "debian": "{} {. \"does debian stable support [?? $::debian_stable_features] yet?\"}\n",
  "blog": "{} {. Blah, blah, blog. My blog, blah, blah, blah. Blog, blah, blog.}\n",
  "aimjewlist": "{{who {}}} {set str \"<b>LIST OF <font color=red>JEWS</font> I AM GOING TO KILL:</b><br>[join [split [mega jewfullname] \\n] <br>]\"; if {$who eq \"\"} {aim $str} {aim -n $who $str}}\n",
  "hug": "{{who {}} {size 0}} {let {{who size} {. [string repeat \"{\" $size] $who [string repeat \"}\" $size]}} [name $who] [if $size {. $size} {rand 5 15}]}\n",
  "firebird": "{} {return \"garbage\\ndoesn't have the tried and tested experience that mysql has\\nnothing can stop mysql\\nwith innodb tables, it is the best solution\"}\n",
  "ethnic_group": "{} {lindex_random $::ethnic_group_dict}\n",
  "samesnake": "{} {return {  ___  __ _             /  ___                  \n / __|/ _` |_____      /  / - -                 \n \\__ \\ (_| |_____|     \\ C    >                 \n |___/\\__,_|            _)' _( .' ,             \n  _ __ ___   ___     __/ |_/   \" *.  __         \n | '_ ` _ \\ / _ \\   /` \\_\\ \\/     % <_~\\   __   \n | | | | | |  __/  /  )   \\/|      _/ \\ \\_/  \\/|\n |_| |_| |_|\\___| /' /-   o/        '  \\___/\\_/ }}\n",
  "goonfox": "{} {fedoragoonsay [javafox]}\n",
  "buttesnet": "{} {regsub Z.{5} [czirc] BUTTES}\n",
  "aimbigot": "{{who {}}} {aim -n [aimname $who] [bigot]}\n",
  "STlady": "{} {return \"       _,,,_\\n     .'     `'.\\n    /     ____ \\\\\\n   |    .'_  _\\\\/\\n   /    ) a  a|\\n  /    (    > |\\n (      ) ._  /\\n )    _/-.__.'`\\\\\\n(  .-'`-.   \\\\__ )\\n `/      `-./  `.\\n  |    \\\\      \\\\  \\\\\\n\"}\n",
  "mroachagenda": "{} {regsub -all {( WITH\\s+)[^\\n]+(\\n|$)} [string map {{BUTT ORGY} {ADJUSTING CLOCKS TO 24-HOUR TIME} {SODOMY} {DRIVING 180 KM/H} {APPLE STORE} {VICTOR'S DAD'S COMPANY} {MORE COCK SUCKING} {EMERGENCY TRIP TO SINGAPORE!} {SUCK DICKS} {WATCH J-POP DVDS} GAY MROACH CHER ABBA} [gayagenda]] {\\1KALLEBOO\\2}}\n",
  "underscoreize": "str {regsub -all { } [regsub -all {[^[:alpha:][:digit:] ]+} [string trim [string tolower $str]] {}] _}\n",
  "atron": "{} {return \" [pick 1 {. \"[name]: sup\"} 1 {. \"oh man\"} 1 {. \"i'm [pick 1 {. \"downloading\"} 1 {. \"reading\"} 1 {. \"watching\"}] a quite terribly interesting [pick 1 { . \"wikipedia article\"} 1 { . \"documentary\"}] on [w_topic]\"} 1 {. \"brb [food_word] in the oven\"} 1 {. \"brb\"} 1 {. \"[name]: i say can you help me with my [pick 1 {. \"perl\"} 1 {. \"php\"} 1 {. \"C++\"}]  \"} ]\"}\n",
  "kukluxklandeon": "{} kukluxrandeon\n",
  "warholcat": "{} {return [ajoin \"\" \"[mega bold]\\n[mega bold]\" \"[mega color yellow on blue]\\n[mega color lime on orange]\" \"[STkitty]\\n[STkitty]\"  \"[mega color fuchsia on red]\\n[mega color navy on green]\" \"[STkitty]\\n[STkitty]\"]}\n",
  "unicornmob": "{} {ta unicorn}\n",
  "todo:kill": "{{who {[nick]}}} {set who [name [subst $who]]; array unset ::todo{$who}}\n",
  "tiggersay": "args { return \"             ',\\n          .-`-,\\\\__\\n            .'`   `,\\n          .'_.  ._  `;.\\n      __ / `    _ `  `.\\\\ _.--.\\n     /--,| 0)   0)     )`_.--,)   [name $args]\\n    |    ;.-----.__ _-');,   /\\n     '--./       | `.`\\\\ / `'`\\n  ___..,/;       ;  |--/--._\\n `_.---'| \\\\     /  /`;'-._  '.\\n.'   .--'\\\\ '---'  / /|`-. '.\\n         .'     ;-----;` / |\\n         /``-...' /.:;\\n        |        |'`` \\\\\"}\n",
  "lmiot": "args {string map [list \"BUTTES CHAT\" [string toupper [join $args]]] [butteschat]}\n",
  "christian": "{} {raim christian}\n",
  "wrap": "{str cols} {string range [broken_wrap $str $cols] 1 end}\n",
  "STrickyskull": "{} { join { {      ______     } {   .-\"      \"-.  } {  /            \\ } { |              |} { |,  .-.  .-.  ,|} { | )(_o/  \\o_)( |} { |/     /\\     \\|} { (_     ^^     _)} {  \\  |\"\"\"\"\"\"|  / } {   |-\\I\"\"\"\"I/-|  } {   \\          /  }} \\n}\n",
  "plan": "{{who {[name]}}} {set m [rand 12]; each [seq 0 ${m}] {n {if {${n} == 0} { uplevel {. \"${m} STEP PLAN FOR [string toupper [subst ${who}]] TO STOP HIM FROM ACTING LIKE AN IDIOT:\"} } else { . \"${n}: SHUT THE FUCK UP\" }}}}\n",
  "5manbabies": "{} {rain [mega thread_gena]}\n",
  "lulzreset": "{{who {}}} {set user [string toupper $who]; if [array exists ::lulzscores{$user}]  {array set ::lulzscores{$user} [list $user [concat 0]]} else {return \"$user has no lulz\";}}\n",
  "2mh": "{{who {}}} {if {$who eq \"\"} {set who [strip_u [fetish_porn]]}; return \"\u0002TWO MINUTES HATE:\u0002 $who\"}\n",
  "dev": "{{who {}}} { return \"[string toupper [name $who]]: GUESS WHAT, ASSHOLE? I WAS ONE OF THE EARLIEST HACKERS IN THE 1980S. I KNEW KEVIN MITNICK. PHONE PHREAKING IS AS SECONDARY TO ME AS SKULLFUCKING YOUR DAUGHTER. I'M GOING TO KEEP CALLING YOUR HOUSE, OVER AND OVER, AND THE PHONE COMPANY WILL NEVER BE ABLE TO TRACE THE CALL. YOU'RE GOING DOWN.\" }\n",
  "lool": "{{length 0}} {string map {t l 0 l} [toot $length]}\n",
  "csammize": "args {. [regsub -all {(\\w(?= )|\\w$)} [join $args] {\\0.}] \"End of story\"}\n",
  "morejars": "{} {more {http://churchturing.org/w/jars.txt}}\n",
  "jkl": "{} {wt2 GET OUT POOPY MARK}\n",
  "twatmystery": "{} {twat [fastmystery]}\n",
  "macro:scale": "args {set scalef ${::scalef}; each [lines [join $args]] {l {set l2 [regsub -all {([^,0-9])} ${l} [string repeat {\\1} [uplevel {. $scalef}]]]; . ${l2}\\n${l2}}}}\n",
  "charter": "{} {more @charter}\n",
  "aimprank": "sn {aim -n $sn \"You've been PRANKED By the SomethingAwful AimBot v0.9 BETA!  PHP/MySQL Codebase by: Radium.  Creative consulting by: Lowtax.  Your Prank Code is: US[rand 9][rand 9][rand 9][rand 9]N. Unclaimed prizes will go to the next winner after [clock format [clock seconds] -format \"%D\"]!\"}\n",
  "tranny_cyber": "{{who {}}} {set who [name $who]; cyber2 $who [regsub -all {(\\S)e?s\\M} [tranny_word] {\\1}]}\n",
  "lolperson": "{} {return \"[title] [lolname], [honourary]\"}\n",
  "drudge_major_story": "html {string trim [strip_html [lindex [regexp -inline -nocase {<font size=\"\\+7\\\">(.*?)</font>} $html] 1]]}\n",
  "roulette_win": "{} {return \"[gold \"CLOSE CALL\"], [string toupper [nick]]\"}\n",
  "normalize_tag_name": "tag {regsub -all {[^&/:[:alpha:][:digit:]]+} [string tolower $tag] {}}\n",
  "squid": "{} { join [list \"[color violet] /?\\\\\" \"[color violet]/ [color yellow]O[color violet] \\\\\" \"[color violet]\\\\   /\" \"[color violet] )|(\" \"[color violet]((|))\"] \\n }\n",
  "gisc": "{{color {}} args} {force_image [urldecode [lindex_random_ne [regexp -all -inline {imgurl\\\\x3d(http://.*?)\\\\x26} [6~http://images.google.com/images?safe=off&imgcolor=$color&[? q $args]]]]]}\n",
  "dolemite": "args mre666\n",
  "shitty_company": "{} {lindex_random $::shitty_company}\n",
  "cook": "{} {. i let my [gay_word] [cooking_verb] [distasteful_word] with a bit of [crw_word] after}\n",
  "noradio": "{is fukken gay} {return \"error: wrong # args: should be \\\"noradio is fukken gay\\\"\"}\n",
  "goonfix": "{} {?? $::goon_fix_dict}\n",
  "omgpi": "{} {join [map [split [embed [embed [embed [circle2 [pi]] [pi] 30 10] [STomgComp2] 30 5] [bt OMG PI @_@] 10 12] \\n] {l {. [rain $l]}}] \\n}\n",
  "myxbox": "{} {urxbox [nick]}\n",
  "sb": "args {proc strip_buf args {return [regsub -all buffelo [. $args] {\u0002BUFFELO\u0002} ]}}\n",
  "bogersay": "args {stampsay -s boger [join $args]}\n",
  "aimf_needs": "args {aimify needs $args}\n",
  "qwantzgen": "proc {qwantz [map [repeat 11 $proc] {{x} {wrap [cstrip $x] 20}}]}\n",
  "STbutterfly": "{} { return \" __ .  . __  \\n(o.\\\\ \\\\/ /.o) \\n \\\\__\\\\/\\\\/__/  \\n /()/==\\\\()\\\\  \\n(;_/ \\\\/ \\\\_;) \";}\n",
  "scholar": "a {if !{[string length [set r [last [regexp -inline {^-([0-9]+?) } $a]]]]} { set r 10; } else { set a [last [regexp -inline {^-[0-9]+? (.+)$} $a]] }; if {[regexp {^-[0-9]+? } $a]} { set r \\1; }; each [regexp -all -inline {<h3 class=r><a href=\"(.+?)\"[^>]+?>(.+?)</a>.*?</h3>} [last [http get http://scholar.google.com/search?q=[urlescape $a]&num=$r]]] {{match url title} {. \"\\002[html $title]\\002 - \\x1f$url\\x1f\"}}}\n",
  "mladfrot": "args {return \"<mlad> hey [name $args] lets do some [crw_word]\\n<mlad> i bet i can [crw_word] the shit out of you\"}\n",
  "rmsn": "{} {smega {subst {.rmsn 0}} 5}\n",
  "rss_parse_feed_body": "{xml {ele 1}} {set items [list]; foreach {item body} [regexp -all -inline {<item>(.*?)</item>} $xml] {set content [rss_parse_item_ele $body \"description\"]; lappend items [lindex $content $ele]}; return $items}\n",
  "hmm": "{} darren\n",
  "STowl": "{} {return \"   ^...^\\n  / o,o \\\\\\n  |):::(|\\n====w=w===\"}\n",
  "sport": "{} {lindex_random $::sports}\n",
  "slot_pull_info": "value {return \"[nick]\\nhas\\nwon\\n\\002[slot_format $value]\\002!!!\"}\n",
  "STkike": "{} { return \" $$$    $$$\\n   .\\\\  /. |\\n    _  \\\\   \\\\\\n   (_   \\\\   \\\\\\n$    \\\\__/   |\\n$$`------  $$\\n $$$  $$  $$\\n  $$$$$$$$$\\n    $$$$$\\n      $$\"; }\n",
  "big911": "{} {draw {0001000000111001110 1000100000111001110 0111111110111001110 1000100000111001110 0001000000111001110}}\n",
  "chile": "{} {return \"\\00312,12dspdspdsp\\00304,04dspdspdspdspdspdsp\\n\\00312,12dspdspdsp\\00304,04dspdspdspdspdspdsp\\n\\00300,00dspdspdspdspdspdspdspdspdsp\\n\\00300,00dspdspdspdspdspdspdspdspdsp\"}\n",
  "toot": "{{length 0}} {let {length {. t[join [repeat $length {?? {o 0}}] {}]t}} [if {$length == 0} {rand 15 40} {set length}]}\n",
  "STpika": "{} {return {\u00031,8(\\___/)\n\u00031,8(\u00034o\u00031,8^:^\u00034o\u00031,8)\n\u00031,8(\")_(\")\n}}\n",
  "buttes_sign": "{} {box \"\u0002\u000308,01/!\\\\ CAUTION /!\\\\\\n\u0002\u000301,08[string toupper [channel]] AHEAD\\n\u000301,08POTENTIAL HAZARDS INCLUDE:\\n\u0002\u000301,08[crw_word]\\n\u0002\u000301,08[gay_word]\\n\u0002\u000301,08[crw_word]\\n\u0002\u000301,08[gay_word]\\n\u0002\u000301,08[crw_word]\"}\n",
  "ops": "{} {. [lindex_random $::opers]}\n",
  "randomsubmitdrudge": "{} {return \"[submitdrudge [drudgestory]]\"}\n",
  "nuclear_fuel_for_iran": "{truth Lowtax} {set dropsy $gout; return \"[goonerosity goons] i just found a hobo cannibalizing nipple clamps what should i do???? (56k anal bleeding)\"; set resolution $disintegration; return $vaginal_prolapse}\n",
  "latext": "args {latex \\$[join $args]\\$}\n",
  "tb": "{} img-tinyblake\n",
  "rms": "{} {. [img-rms]\\n[aud-rms]}\n",
  "koshersalami": "{} {return {                   _.----.                         \n .----------------\" /  /  \\                        \n(   KOSHERSALAMI | |   |) |                        \n `----------------._\\  \\  /                        \n                    \"----' \u0002egg\u0002                     \n HOLY SHIT !!! IT FEELS JUST LIKE A REAL PUSSY !!!!\n  WAIT THIS IS JUST A NORMAL FLASHLIGHT OW OW OW OW\n   I NEED SUTURES AND A HUG STAT                   }}\n",
  "funding": "{} {. YOU CAN'T CUT BACK ON FUNDING! YOU WILL REGRET THIS!}\n",
  "moira4": "{} {lindex_random {huh what gross}}\n",
  "ultrarain": "str {rainb [rain $str]}\n",
  "unknown:nick/eli/": "args {error [grift [nick]]}\n",
  "isdarren": "{{who {}}} {switch -regexp -- [hostmask [name $who]] { {\\.(co|net)\\.nz|jp$} { return \"\\0034[name $who] is a traitor to darrenism\"; } {^arab@|^root@127\\.0\\.0\\.1$} { return \"[name $who] is arab\\nnooooo\"; } default { amat2 darren } } }\n",
  "voicemail": "{{name1 {}} {name2 {}}} {return [upper [name $name1], [name $name2], [shitty_company], [choose {following up on} {returning your call about} {wanted to chat about} {want to touch base on} {wanted to connect about}] [crw_word]. i'll be busy with [choose \"a [regsub {(s|ing)\\b} [crw_word] {}]ING\" \"a [regsub {(s|ing)\\b} [furry_verb] {}]ING\" \"[ethnic_cleansing_verb]ing [ethnic_group]\"] most of the day but call me back]}\n",
  "tail": "{n args} {if {[llength $args] == 0} {set str $n; set n 10} {set str [lindex $args 0]}; join [lrange [lines $str] end-[expr $n-1] end] \\n}\n",
  "+gis": "args {set query [join $args]; xset timestamp index [cache fetch +gis $query {list [clock seconds] -1}]; if {$timestamp < ([clock seconds] - 300)} {set index -1}; set result [ngis [incr index] $query]; cache put +gis $query [list [clock seconds] $index]; return $result}\n",
  "unisearch": "args {each [lines [~http://givingin.org/unicode/search/?[? q [join $args]]]] {line {. [[first [split $line]]] $line}}}\n",
  "swedefullname": "{} {return \"[swede_first_name] [swede_last_name]\"}\n",
  "parse_html": "{html cmd} { regsub -all \\{ $html {\\&ob;} html; regsub -all \\} $html {\\&cb;} html; set w \" \\t\\r\\n\"; proc HMcl x {return \"\\[$x\\]\"}; set exp <(/?)([HMcl ^$w>]+)[HMcl $w]*([HMcl ^>]*)>; set sub \"\\}\\n$cmd {\\\\2} {\\\\1} {\\\\3} \\{\"; regsub -all $exp $html $sub html; eval \"$cmd {} {} {} \\{ $html \\}\"; }\n",
  "marriage": "{} {return \"([newsservice]) [upper [arabland]] - Feminist organizations across the world rise in protest as [newscompany] reports on the arranged marriage between a [lindex_random [seq 5 13]] year old girl and her [lindex_random [seq 30 50]] years older [relative], [muslimtitle] [muslimname].\"}\n",
  "smokedick": "{{lmao {}}} {if {$lmao eq \"\"} {return \"radeon sucks dick okay\"}; return \"$lmao smokes two dicks before he smokes two dicks and then he smokes two more\"}\n",
  "gaypride_abuse": "{} {[gayflagify [unicode_abuse [ffw [cosinewaveembeddedaflipheartiezscroll]]]]}\n",
  "sreverse": "str { set reversed \"\"; foreach c $str { set reversed \"$c$reversed\" }; return $reversed }\n",
  "swingler_todo": "{} {. [subst [join [string repeat {[swingler_list_item] } 5] \\n]]}\n",
  "unknown:4:cmd": "{} { good1 dork }\n",
  "fastmystery": "{{who {}}} {set mysteryproc [lindex_random [info procs]]; if {$who eq \"\"} { if {[llength [info args $mysteryproc]] < 1 } { set mysteryresult [eval $mysteryproc]; return \"$mysteryresult\" } else { fastmystery }} else { if {[llength [info args $mysteryproc]] == 1 } { set mysteryresult [eval $mysteryproc $who]; return \"$mysteryresult\" } else { eval fastmystery $who }}}\n",
  "image-fu": "img { magick-scale-composite-bottom-left $img http://churchturing.org/x/middlefinger.png 0.65 }\n",
  "newcountry": "{} {return \"The [choose African European Islamic] [political_word] [choose Republic State Union] Of [ethnic_group]!\"}\n",
  "literai": "{} {lindex_random $::literati_dict}\n",
  "abez_caps": "{} {each [select [log] {line {expr {[lindex $line 1] eq \"abez\" && [lindex $line 3] eq [string toupper [lindex $line 3]]}}}] [& format_log_line]}\n",
  "master_get_perfect": "{i a b c d} { return [expr [expr $a == [master_gete $i 0]] + [expr $b == [master_gete $i 1]] + [expr $c == [master_gete $i 2]] + [expr $d == [master_gete $i 3]]]; }\n",
  "notamac": "args {isntamac $args}\n",
  "shakti": "{} {return \"[banner \"This Channel Enhanced by \u0002[rainbow SHAKTI\\ STONES]\u0002\"]\"}\n",
  "clan": "{} { return \"[hacker \"\u001f\u0002\u00036~x~x~\u001f\u00033 if you know more than\u00039 10 \u00033linux command, join mah new \u00034linux clan\u0003,\u000f \\{\\{[randacro \"[lindex_random [seq a z]][lindex_random [seq a z]]\"]\\}\\},\u0002\u00033 \u001fopenings fillin up fast!!\u001f \u00036\u001f~x~x~\u001f \u00033first scrimmage saturday \u00036\u001f~x~x~\u001f\u0003\u0002\"] \u00037\u0002CLAN LEADA:\u0003\u0002 [vertigize [underscore [random_word]\\ [random_word]]] \u00037\u0002WEBMASTA:\u0002\u0003 [vertigize [underscore [random_word]]] \u00037\u0002RECRUITA:\u0002\u0003 [vertigize [underscore [random_word]]]\"}\n",
  "gaydar": "{{nick {}}} { matrix [gaydar:placename [gaydar:scope] $nick] }\n",
  "radeon11": "{} {return \"<@radeon> so i bought an external audigy 2\\n<@radeon> USB 2.0\" }\n",
  "instapop": "{{num 12}} { smega {pick 1 gaybar 1 rickroll 1 bgb 1 kanyeupper 1 liljon 1 boobscotch } $num }\n",
  "STcow": "{} { return \" ,__,\\n (oo)____\\n (__)    )\\\\\\n    ||--|| *\"; }\n",
  "gdbladed": "{{text {}}} {. \"[or $text [irclog 1]] <-- [?? $::gdblade_diss]\"}\n",
  "whyamitalking": "{} {talking [nick]}\n",
  "master_inc_stat": "{i k} {set l [master_get_stat $i]; set k [expr $k - 1]; if {$k<20 && $k>=0} { master_set_stat $i [lreplace $l $k $k [expr [lindex $l $k] + 1]]; } else {};}\n",
  "ufc": "{{who1 {}} {who2 {}}} { caption [gis ufc submission] \"Fig 1. [mmafighter [or $who1 [name]]] performs a standard [choose [crw_word] [butte_word] [body_part]] [ufc_attack] on [mmafighter [or $who2 [name]]].\" }\n",
  "sinewave": "word { join [map [seq 1 15] {{x} {. [string repeat \" \" [expr int(10 + 10 * sin(3.14 * 3 * $x/20))]] $word }}] \\n }\n",
  "mith": "args {. tcl btc}\n",
  "STturkey": "{} { return [join [list \"   .-\\\"\\\"\\\"\\\"\\\"\\\"\\\"-.\\n\" \"  \\{     .----. .-.\\n\" \" \\{     \\{      (  o\\{\\\\\\n\" \"\\{     \\{        \\\\ \\\\~`\\n\" \"\\{    \\{         _\\\\ \\\\\\n\" \" \\{   \\{        /    |\\n\" \"  \\{___\\{______/     |\\n\" \"   '/   /    /     /\\n\" \"    '--'\\\\___/ \\\\___/\\n\" \"             /\\\\ /\\\\\"]]; }\n",
  "args_lmiot": "args {subst -nobackslashes [string map {{BUTTES CHAT} {[string toupper [eval $args]]}} [butteschat]]}\n",
  "insult": "{{who {}}} {return \"[omg] hey, [name $who]! you [faglame] [unplural [ethnic_group]]!\"}\n",
  "zlkv": "{} okey\n",
  "okey_specattack": "{} {lindex_random $::okey_specattack}\n",
  "weev": "{} {tcl stampsay -s vxp [mega . weev is a jewish earthworm]}\n",
  "aim_bigtext": "{who msg} {join [map1 [split [strip_all [biggaybowtext $msg]] \\n] {format \".a\\im [string tolower [regsub -all \" \" $who \"\"]] <font face=\\\"Courier New\\\">%s</font>\"}] \\n}\n",
  "lastfm:isNewTrack": "{html {now 2000000000}} {set user [lastfm:user $html]; set trackid [lastfm:trackid $html]; set ltime [lastfm:lasttracktime $user];  if {$trackid == [lastfm:lasttrack $user]} { if {[expr $now - $ltime] >  $::lastfmtimeouttime} { return 0 } { return 1}} { return 1}}\n",
  "fire": "{} { return \"  \\/^\\\\ \\n \\{\\{ \\}\\}\";}\n",
  "magick_uncached": "{cmd id args} {set url [string trim [http://magick.buttes.org/magick.rb?[? cmd $cmd id $id args [join $args +]]]]; if [regexp ^Error: $url] {error [string range $url 7 end]}; return $url}\n",
  "letmeinonthis": "{} {smega {pick 1 {concat \"\u0002\u00038,1\u0016 \u001f/!\\\\\u001f \u00035,1 ERROR \u000f\u0002 Lost connection to BOS\"} 1 {concat \"Previous error was fatal. Reloading bot...\"} 4 {concat \"Alert: AIM server reports rate limit hit. Message queue emptied.\"}}}\n",
  "tinhate": "{{hater {}} {hated {}}} {if {$hater eq \"\"}  {set hater [lindex_random [names]]}; if {$hated eq \"\"} {set hated [lindex_random [names]]};  tinfoil [hate $hater $hated]}\n",
  "butteschart": "{} {return \"\u00030,4\u0002Buttes Stool Chart\u0003\u0002\\n\u001f\u0002Type 1\u0002\u001f  [buttes_stool_line]\\n\u001f\u0002Type 2\u0002\u001f  [buttes_stool_line]\\n\u0002\u001fType 3\u0002\u001f  [buttes_stool_line]\\n\u0002\u001fType 4\u0002\u001f  [buttes_stool_line]\\n\u0002\u001fType 5\u0002\u001f  [buttes_stool_line]\\n\u0002\u001fType 6\u0002\u001f  [buttes_stool_line]\\n\u0002\u001fType 7\u0002\u001f  [buttes_stool_line]\"}\n",
  "nbr": "{} nigger_beer_review\n",
  "heil": "{} {wet o/ o/ o/ o/ o/}\n",
  "literati": "{} {lindex_random $::literati_dict}\n",
  "BEZO$": "{} kindle\n",
  "bonery": "{} { return \"[ajoin \" \"  [dicktopwise [randor 1 4]] [dicktopwise [randor 1 4]] [dicktopwise [randor 1 4]] [dicktopwise [randor 1 4]] [dicktopwise [randor 1 4]] [dicktopwise [randor 1 4]] [dicktopwise [randor 1 4]]]\\n I'm DETECTING A BONERY SIGNAL\" }\n",
  "niggertown": "{} {set ff  {{[capitalize [niggerword]sville]} {Mt. [capitalize [niggerword]]} {The [capitalize [niggerword]] Seas} {The [capitalize [fecal_shape]] [capitalize [niggerword]] Plains}}; return [subst [lindex_random $ff]];}\n",
  "dcccatbus": "{} {return \"Accept DCC transfer of [string map {\" \" \"\"} [string repeat ! [rand 25]][rand 15]yo-[pedo_word]][rand 999].jpg from user Catbus?\"}\n",
  "blackjack_draw_card": "{} { set card [lindex $::blackjack_deck 0]; set ::blackjack_deck [lrange $::blackjack_deck 1 [expr [llength $::blackjack_deck] - 1]]; return $card; }\n",
  "STdolla": "{} {draw {00100 01111 10100 01110 00101 11110 00100}}\n",
  "test_proc2": "{} { catch { set k \"faggots\" } ret; return $ret }\n",
  "twitgrep": "q {\n        set q [string map {# {%23}} $q];\n        set page [wget http://search.twitter.com/search.atom?q=$q];\n        set titles [regexp -all -inline {<title>(.*?)</title>} $page];\n        set names [regexp -all -inline {<uri>(.*?)</uri>} $page];\n        set i 3;\n        set j 1;\n        set x [lindex $titles $i];\n        set n [lindex $names $j];\n        while {$x ne \"\"} {\n            lappend out \"[bold]$n[bold] $x\";\n            incr i 2;\n            incr j 2;\n            set x [lindex $titles $i];\n            set n [lindex $names $j];\n        }\n        html [join $out \"\\n\"]\n    }\n",
  "fatgoonweb": "{{glob {}}} {goonsay [fatgoonwebquote $glob]}\n",
  "tk": "{} {. \"GIVING MOTIF A RUN FOR ITS MONEY SINCE 1991\"}\n",
  "rufasreport": "{} {. $::rufas_report}\n",
  "unknown:2:cmd/^s/((?:\\\\.|[^/])*)/((?:\\\\.|[^/])*)/?$/": "{matches cmd args} {regsub [lindex $matches end-1] [or [join $args] [format_log_line [lindex [[nick]log] end-1]]] [last $matches]}\n",
  "blackjack_unset": "{} { array unset ::blackjack_player; array unset ::blackjack_bid; }\n",
  "abrn": "{} { ncock 0 }\n",
  "lulzscore": "{{who {}}} {set user [string toupper $who]; if [array exists ::lulzscores{$user}] {return \"$user has a lulzscore of \\[[last [array get ::lulzscores{$user}]]\\]\"}  else {return \"$user has no lulz\"}}\n",
  "shaniqua": "{} {giga spew}\n",
  "nice_names": "{} {return \"[join [lrange [names] 0 end-1] \", \"] and [lindex [names] end]\"}\n",
  "aimf_zenwhen": "args {aimify zenwhen $args}\n",
  "stabby": "{{who {}}} { if {$who eq \"\"} {set who [lindex_random [names]]}; return \"you and $who are the snobbiest, most derisive fucks i've ever had the misfortune to encounter\"}\n",
  "alice": "{} {. git clone git://github.com/leedo/alice.git}\n",
  "getnoradio": "{} {return $::noradio}\n",
  "nigz": "{} {niggerize [irclog 10]}\n",
  "color_of": "name {if {$name == 0} {set i 0} elseif {[regexp {^\\d+$} $name]} {set i [string trimleft $name 0]} elseif {[set i [lsearch -glob $::color_names $name*]] == -1} {error \"no such color \\\"$name\\\"\"}; format %02d $i}\n",
  "andrzej_advice2": "{} {. [andrzej_advice]\\n \\n15:09:59 <@andrzej> highlight of the day: my girlfriend letting me know she hasn't got her period yet during a lecture on premie babies}\n",
  "encoding": "{args} {. args}",
  "unparse_formatting": "{formatting {state {}}} {set e [empty_formatting];if {$state eq \"\"} {array set old $e} {array set old $state};array set new $formatting;if $old(o) {array set old $e};if $new(o) {return \u000f};set ret \"\";foreach k {b u r} {if {$old($k) != $new($k)} {append ret [string map {b \u0002 u \u001f r \u0016} $k]}};return [unparse_formatting_color [array get new] [array get old]]$ret}\n",
  "STsaq2": "{} { return \"    _   \\n  _/\\\\)_ \\n /( Y)| \\n^  |\\\\ ^\\n   ` `\";}\n",
  "gisroulette": "{} { gis [choose puppies kittens puppies kittens puppies r@ygold] }\n",
  "octaltest": "args {tt \"action update:\" [join $args]}\n",
  "factor_rank?": "{{n {}}} {\n\tglobal factor_stats\n\tif {$n eq \"\"} {set n [nick]}\n\tset scores [lsort -decreasing -command cmp_factor_stats [array_to_list factor_stats]]\n\tset i [lsearch [map1 [lsort -decreasing -command cmp_factor_stats [array_to_list factor_stats]] {every_n_from 3 0}] $n]\n\tif {$i < 0} {\n\t\treturn \"$n hasn't factored any polynomials\"\n\t} elseif {$i eq 0} {\n\t\treturn \"$n can't be ranked any higher\"\n\t} else {\n\t\tset p1 [lindex [lindex $scores [expr $i-1]] 0]\n\t\tset p2 [lindex [lindex $scores $i] 0]\n\t\tset f1 [lindex [lindex $scores [expr $i-1]] 1]\n\t\tset f2 [lindex [lindex $scores $i] 1]\n\t\tset e1 [lindex [lindex $scores [expr $i-1]] 2]\n\t\tset e2 [lindex [lindex $scores $i] 2]\n\t\tset d [expr int(ceil((pow($f1,2)-2*$e1*$f2+sqrt(pow($f1,2)*(4*$e1*$e2+pow($f1,2)-4*$e1*$f2)))/(2*$e1)))]\n\t\treturn \"$p2 needs to factor $d polynomials correctly to overtake $p1\"\n\t}\n}\n",
  "puntme5": "{{who puÃ±tme}} {. \"<[name $who]> [hacker [lindex_random $::puntme_phrases]]\"}\n",
  "eppigy": "{} { nazisay \"FUCK A GUY\" }\n",
  "mobileprefix": "{} {lindex_random $::mobile_prefix_dict}\n",
  "niggerword": "{} {lindex_random $::niggerwords}\n",
  "tstamp": "{} {. [clock format [clock seconds] -format %Y%m%d]}\n",
  "catpoop": "{} {catback [poop]}\n",
  "normalize_nick": "nick {string map {[ \\{ ] \\}} [string tolower $nick]}\n",
  "currency": "{} {lindex_random $::currencies}\n",
  "blame": "{{name octalc0de}} {return \"I BLAME IT ON [string toupper $name]\"}\n",
  "STsaq4": "{} { return \"    _   \\n  _/\\\\),\\n /( Y)\\\\\\n^  /\\\\  ^\\n  `  `\";}\n",
  "shaktimond": "{} {subst [regsub -all {\\(} [diamond (.)] {\u0002\u0003[gay]&}]}\n",
  "fatgoon_finale": "{} {lindex_random $::fatgoon_finale}\n",
  "Aunt_Jemima": "the_lucky_charms_leprechaun {return [rotflmao]; set sleeping $Dili; return $pedarast; lappend a_Certified_eBay_10_Star_Buyer $AVG_Anti_Virus; return [lisa]}\n",
  "i.buttes.org": "url {. \"http://i.buttes.org/index.php/[regsub {^http://i.buttes.org/index.php/} $url {}]\"}\n",
  "businessinsider": "{} { each [choose {red crashing â¼} {green surging â²} {violet steady :arrow_forward:}] {{color status arrow} {. [color $color]$arrow ([format \"%06.2f\" [expr 10000*rand()]]) [random_word][choose bit coin] $status $arrow}} }",
  "nourmom": "{} {return \"urmom is a [marginalize] [unplural [ethnic_group]] from [country] who rubs [topping] into her [sexpart]\"}\n",
  "valentines": "{} { if [catch {subst [?? $::valentines]} ret] { return [valentines]} { return $ret }}\n",
  "chop_jihad": "{} {. \"[upper [circumsize_word]] those who [insult_verb] [upper [crw_word]]\"}\n",
  "revconcat": "{a b} { return \"$b$a\" }\n",
  "bigmooninite": "{} {draw {{}}}\n",
  "haioh": "{} {return \"HAI-OHHH[string repeat H [rand 25]]\"}\n",
  "aimf_helpwanted": "args {aimify helpwanted $args}\n",
  "beachball": "{} {. \"http://i.buttes.org/index.php/http://i33.tinypic.com/16c73av.jpg\"}\n",
  "SToctalc0de": "{} {join {{ _______} {(  _  _ )} {(____.__)}} \\n}\n",
  "+": "args {expr [join ${args} \" + \"]}\n",
  "database": "{} {lindex_random $::databases}\n",
  "historical_quote": "{} {return \"\\\"[niggerphrase]! [niggerphrase]\\\"\\n - [political_figure] on [historical_event]\"}\n",
  "cooking_verb": "{} {lindex_random {fry nuke broil bake {deep fat fry} toast simmer grill reheat defrost}}\n",
  "aprs_weather": "s {\n\tset aprs_re {(\\w+)>APRS,TCPXX\\*,qAX,CWOP-\\d:@\\d\\d(\\d\\d)(\\d\\d)\\w(\\d+\\.\\d\\d[NS])\\/(\\d+\\.\\d\\d[EW]).(\\d+)\\/(\\d+)((?:[a-zA-Z][\\d\\.]+)+)}\n\tset raw_weather [html [cwget http://www.findu.com/cgi-bin/raw.cgi?call=$s]]\n\tset latest_weather [lindex [lines $raw_weather] end]\n\tregexp $aprs_re $latest_weather m station time_h time_m lat long w_dir w_speed etc\n\tset rw_gust {};regexp {g(\\d+)} $etc m rw_gust\n\tif {$rw_gust == \"\"} {set w_gust \"No data\"} {set w_gust \"[expr ${rw_gust}.] kts\"}\n\tset rtempf {};regexp {t(\\d+)} $etc m rtempf\n\tif {$rtempf == \"\"} {set tempf \"No data\"} {set tempf \"[expr ${rtempf}.]ÃÂ°F\"}\n\tset rr_day {};regexp {p(\\d+)} $etc m rr_day\n\tif {$rr_day == \"\"} {set r_day \"No data\"} {set r_day \"[expr ${rr_day}./100.]\\\"\"}\n\tset rhumid {};regexp {h(\\d+)} $etc m rhumid\n\tif {$rhumid == \"\"} {set rhumid \"No data\"} {set humid \"[expr ${rhumid}.]%\"}\n\tset rbaro {};regexp {b(\\d+)} $etc m rbaro\n\tif {$rbaro == \"\"} {set baro \"No data\"} {set baro \"[expr ${rbaro}./10.] mb\"}\n\tif {$rhumid != \"\" && $rtempf != \"\"} {\n\t\tset tempc [expr 5.*(${rtempf}.-32.)/9.]\n\t\tset g [expr (17.27*$tempc)/(237.7+$tempc)+log(${rhumid}./100.)]\n\t\tset dpc [expr (237.7*$g)/(17.27-$g)]\n\t\tset dpf [format \"%.0fÃÂ°F\" [expr 1.8*$dpc+32.]]\n\t} { set dpf \"No data\" }\n\tregexp {(\\d+?)(\\d\\d)\\.(\\d+)([NS])} $lat m lat_d lat_m lat_s lat_h\n\tset lat [format \"%.0fÃÂ°%.0f\\\"%.0f'%s\" ${lat_d}. ${lat_m}. ${lat_s}. $lat_h]\n\tregexp {(\\d+?)(\\d\\d)\\.(\\d+)([EW])} $long m long_d long_m long_s long_h\n\tset long [format \"%.0fÃÂ°%.0f\\\"%.0f'%s\" ${long_d}. ${long_m}. ${long_s}. $long_h]\n\tset c [clock seconds]\n\tset current_h [clock format $c -format %H -gmt 1]\n\tset current_m [clock format $c -format %M -gmt 1]\n\tset delta [format \"%.0f hrs %.0f mins\" [expr ${current_h}.-${time_h}.] [expr ${current_m}.-${time_m}.]]\n\tset ret [list]\n\tlappend ret [format \"%s (%s %s) last report: %s\" $station $lat $long $delta]\n\tlappend ret [format \"Temperature: %s  Dew Point: %s\" $tempf $dpf]\n\tlappend ret [format \"Humidity: %s  Pressure: %s\" $humid $baro]\n\tlappend ret [format \"Wind Speed: %.0f kts @ %.0fÃÂ° %s  Gust: %s\" ${w_speed}. ${w_dir}. [degrees2cardinal ${w_dir}.] $w_gust]\n\tlappend ret [format \"Precipitation (24 hrs): %s\" $r_day]\n\tjoin $ret \\n\n}\n",
  "aimpanties2": "args {aim -n [aimname $args] What kind of panties are you wearing?  [rands]}\n",
  "butans?": "{} {c 1 butan}\n",
  "unknown:1:cmd/(.+)_scheme$/": "{matches cmd args} {magick_scheme [apply [last $matches]-gen $args]}\n",
  "weev2": "{} {return [lol \"i hack, i ruin, i make piles of money\"]}\n",
  "bj_dhand": "{} { return [blackjack_print_player dealer]; }\n",
  "ssh": "{} {return \"@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@    WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED!     @\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\nIT IS POSSIBLE THAT SOMEONE IS DOING SOMETHING NASTY!\\nSomeone could be eavesdropping on you right now (man-in-the-middle attack)!\\n\"}\n",
  "STcocksegway": "{} {string map {\"  '_'\" \" /'_'\"} [embed [ajoin \" \" \"\" [ncock 8]] [regsub -all \" +\\n\" [flippedomgdude] \"\\n\"] 0 1]}\n",
  "hoser": "{{nick {}}} {. [or $nick [name]]: [subst [?? $::hoser]], eh? }\n",
  "rotate180": "v { rotate90 [rotate90 $v] }\n",
  "failure": "{} {choose http://greenmeat.blogspot.com/ http://shutuphippie.blogspot.com/ http://fleshtruck.blogspot.com/  http://afattyk.blogspot.com/ http://bigtosmall.blogspot.com/ http://m3jsh.blogspot.com/ }\n",
  "xml": "{} {return \"XML is a new database format, wildly outperforming the previous top-speed database MyISAM\"}\n",
  "myb": "{} {if {[nick] == \"stopmakingsense\"} {. \"missing\"} else {. \"s it\"}}\n",
  "aimf_ctz": "args {aimify ctz $args}\n",
  "wolfie": "{} {act [maleyiff_word]}\n",
  "nl_catbus": "{} {return \"Accept DCC transfer of [string map {\" \" \"\"} [string repeat ! [rand 25]][rand 15]yo-[nicklist]][rand 999].jpg from user Catbus?\"}\n",
  "aimmomma": "{{who {}}} {aim -n [aimname $who] [yomomma]}\n",
  "remove-duplicates": "l {set o [list]; foreach elm $l { if {-1==[lsearch $o $elm]} { lappend o $elm } }; return $o }\n",
  "pua_verb2": "{} {subst [?? $::pua_verb2]}\n",
  "incog2": "{} {return \"<@incog> i just posted in /v/ about [sex_act] [ethnic_group]\\n<@incog> haha they are so trolled by the [seinfeld_word]\"}\n",
  "aimf_xssnimp": "args {aimify xssnimp $args}\n",
  "incogjb": "{} {return \"[bold][color fuchsia]^_^[color green] <[+ 15 [rand 3]]|m|[city]> HI INCOG!!! I DREAM OF YOU [string toupper [sex_act]] MY [choose UNSHAVEN HAIRY TRIMMED UNKEMPT WAXED FUZZY BRAZILLIAN] [string toupper [butte_word]]! FUCK ME NOW. [color fuchsia]^_^\"}\n",
  "find_in_cockes": "args {return \"[face]\"}\n",
  "topgis": "args {each [lrange [gis_results [join $args]] 0 4] [& force_image]}\n",
  "ceval_stats": "{} {cache_stats ceval}\n",
  "jewname2": "{{who {}}} {join [map [split [name $who] {}] {c {. [regsub {^(.)} [lindex_random [lfilter [subst {[string toupper $c]*}] $::jewnames]] \"\\002\\\\1\\002\"]}}] \" \"}\n",
  "freeweev": "{} FREEWEEV\n",
  "shsc": "{} {return \"irb(main):001:0> shsc = Thread.new {}\\n=> #<Thread:0x3006db10 dead>\"}\n",
  "talkingpoint": "{} {wget \"http://rolloffle.churchburning.org/troll_me_text.php\"}\n",
  "blackjack_print_hand": "hand { return [eval \"ajoin \\\"\\\" [blackjack_print_hand_rec $hand]\"]; }\n",
  "slot_stats": "{{who {}}} {if {$who eq \"\"} {set who [nick]}; set nick [normalize_nick $who]; return \"\\002$who\\002: [slot_stats_played $nick] games played, [slot_format [slot_stats_spent $nick]] spent, [slot_format [slot_stats_earned $nick]] earned, \\002[slot_format [slot_stats_net $nick]]\\002 net gain\"}\n",
  "weather2": "station {\n\tset station [string toupper $station]\n\tset weather [split [cwget \"http://weather.noaa.gov/pub/data/observations/metar/decoded/$station.TXT\"] \\n]\n\tset wind \"\"\n\tset vis \"\"\n\tset cond \"\"\n\tset precip \"\"\n\tset temp \"\"\n\tset misc \"\"\n\tset ret \"\"\n\tset head [lindex $weather 0]\n\tforeach w $weather {\n\t\tswitch -regexp $w {\n\t\t\t\"^cycle:\" -\n\t\t\t\"^ob:\" -\n\t\t\t\"UTC\" {}\n\t\t\t\"^Wind:\" {set wind \"Wind: [regsub \":\\[^:]$\" [regsub \".*?: \" $w \"\"] \"\"]\"}\n\t\t\t\"^Visibility:\" {lappend vis \"Visibility: [regsub \":\\[^:]$\" [regsub \".*?: \" $w \"\"] \"\"]\"}\n\t\t\t\"^Sky conditions:\" {lappend cond [regsub \":\\[^:]$\" [regsub \".*?: \" $w \"\"] \"\"]}\n\t\t\t\"^Weather:\" {lappend cond [regsub \":\\[^:]$\" [regsub \".*?: \" $w \"\"] \"\"]}\n\t\t\t\"^Precipitation\" {lappend vis \"Precipitation: [regsub \":\\[^:]$\" [regsub \".*?: \" $w \"\"] \"\"]\"}\n\t\t\t\"^Temperature:\" {lappend temp \"Temperature: [regsub \":\\[^:]$\" [regsub \".*?: \" $w \"\"] \"\"]\"}\n\t\t\t\"^Windchill:\" {lappend temp \"Windchill: [regsub \":\\[^:]$\" [regsub \".*?: \" $w \"\"] \"\"]\"}\n\t\t\t\"^Dew Point:\" {lappend temp \"Dew point: [regsub \":\\[^:]$\" [regsub \".*?: \" $w \"\"] \"\"]\"}\n\t\t\t\"^Relative Humidity:\" {lappend misc \"Humidity: [regsub \":\\[^:]$\" [regsub \".*?: \" $w \"\"] \"\"]\"}\n\t\t\t\"^Pressure\" {lappend misc \"Pressure: [regsub \":\\[^:]$\" [regsub \".*?: \" $w \"\"] \"\"]\"}\n\t\t}\n\t}\n\tif {$head ne \"\"} {lappend ret $head}\n\tif {$wind ne \"\"} {lappend ret $wind}\n\tif {$vis ne \"\"} {lappend ret [join $vis \" / \"]}\n\tif {$cond ne \"\"} {lappend ret \"Conditions: [join $cond \" / \"]\"}\n\tif {$temp ne \"\"} {lappend ret [join $temp \" / \"]}\n\tif {$misc ne \"\"} {lappend ret [join $misc \" / \"]}\n\tjoin $ret \\n\n}\n",
  "blackjack_dealer": "{} { set hand [blackjack_get_player dealer]; set score [blackjack_score_hand $hand]; if [expr $score >= 17] { return \"STANDS\"; } else { set output [blackjack_hit dealer]; if [blackjack_bust_check dealer] { return \"BUSTS\"; } else { return \"HITS\"; }; }; }\n",
  "rape": "{} {pt apple store}\n",
  "pre": "{args {n 10}} {join [each [lines $args] {l {. [repeat [uplevel {. $n}] {. \" \"}] $l}}] {}}\n",
  "goonyx": "{} {return \"A goon without [food_word] is like sumthin' is missin' - that was my employer when I ain't had a pot to piss in, so LISTEN: keep some [food_word] even if it ain't cooked, cuz it's better than have none and be in deep shit!\"}\n",
  "mac_weather_icon": "condition {. http://manimal.prettybrd.com/~leedo/weather/${condition}.png}\n",
  "t1": "{} {. testing}\n",
  "onebutan_default_rec": "{} {?? $::onebutan_rec}\n",
  "randart:towharray": "piece {\n    set out [list]\n    foreach {w h} [maxdims $piece] {\n        foreach {l} [split $piece \\n] {\n            lappend out [split $l \"\"];\n        }\n    }\n    return [list $w $h $out];\n}\n",
  "samanthasay": "args {urlsay http://i.buttes.org/http://samanthajean.net/aboutimg1.gif  [join $args]}\n",
  "sumtest": "{a b} {. [expr $a + $b] }\n",
  "aimmathjoke": "args {aim -n [aimname $args] [mathjoke]}\n",
  "rails3": "{} {. \"script/generate [choose model controller migration] [CamelCase [crw_word]]\"}\n",
  "yahoozee_lyrics": "{} { return \"\\newo awon boys yi,  kawakaze on a kentro level\\nyahoooze e jamisi!\\noouuoo yahooooo\\noouuoo yahooozee\\nyahooozee\\nti n ba hammer,  1st thing the hummer\\n1 million dollars, elo lo ma je ti n ba se ni naira\\nmonday, tuesday, wednesday, thursday,  boys dey hustle eh!!\\n\" }\n",
  "mockblake": "{{n 0}} {blakediapersay [last [lastblake $n]]}\n",
  "rhelix": "{} {subst [choose {[vflip [ squared * ]]} {[squared *]} {[flip [isquare *]]} {[vflip [isquare *]]} {[isquare *]} {[flip [squared *]]}]}\n",
  "buttesmovie": "{{fag {}}} {return \"[bt [name $fag]: the movie]\\n  \\n[bt starring]\\n  \\n[bt [actor]]\"}\n",
  "cockefession": "{} {ajoin \"\" [wrap [join [niggerize \"\\<[name]\\> [grouphug]\"]] 50] \"\\n \\\\ \\n \" [flip [dicktopwise 5]]}\n",
  "pi": "{} {expr acos(-1)}",
  "mladsay": "args {if {$args eq \"\"} {set what [cached_onehug]} {set what [join $args]}; stampsay -s mlad [string toupper $what][string repeat ! [rand 1 10]] UNBAN MLAD[string repeat ! [rand 1 10]] [mlad]}\n",
  "aimspew": "{{nick {}}} {if {$nick eq \"\"} {set nick [rand_aim]}; return \".a\\im $nick [string range [spew] 0 350]\"}\n",
  "unknown:nick/Zaphod/": "args {error \"your fingers are too fat. please purchase a typing wand.\"}\n",
  "aimvirus": "args {  aim -n [aimname $args] [subst [lindex_random $::virus_phrases]] }\n",
  "dickfite": "{other {self {}}} {ajoin \" \" [dickroulettechoose [or $self [nick]]] [let {lines {. [flip [join [lrange $lines 0 end-1] \\n]]\\n[regsub {(.+)(\\s*)} [lindex $lines end] {\\2\\1}]}} [lines [ajoin \"\" [dickroulettechoose $other] \"[^O]\"]]]}\n",
  "munge": "str {. $str}\n",
  "perlblock": "{} {let {t {. $t \\{ \\$_ [perlop_$t] \\$[underscoreword] \\} }} [choose grep map sort]}\n",
  "tanwave": "word {join [map [seq 1 20] {{x} {. [string repeat \" \" [expr int(10 + 10 * tan(3.14 * 3 * $x/20))]] $word }}] \\n}\n",
  "foodgoon": "{} {return \"[goonsay I like to eat [food_word], [food_word], [food_word] and [food_word], all topped off with heaps of [topping].]\"}\n",
  "interlace": "str {join [split $str \\n] \"\\n \\n\"}\n",
  "findphone": "args {lindex $::phonenumber [lsearch -regex $::phonenumber $args]}\n",
  "cached_onehug": "{} { set out [lindex_random $::cached_onehug]; if {[rand 6] == 0} { catch { set out [onehug]; lappend ::cached_onehug $out} }; return $out }\n",
  "parse_formatting": "{str {state {}}} {set e [empty_formatting];if {$state eq \"\"} {array set f $e} {array set f $state};set f(c) [set f(o) 0];switch -- [string index $str 0] {\u0003 {regexp {^\u0003((\\d*)(,(\\d*))?)?} $str {} a b {} c;if {$a eq \"\"} {set f(fg) [set f(bg) -1]; set f(c) 1};if {!($b eq \"\")} {set f(fg) $b};if {!($c eq \"\")} {set f(bg) $c}} \u0002 {set f(b) [expr !$f(b)]} \u001f {set f(u) [expr !$f(u)]} \u0016 {set f(r) [expr !$f(r)]} \u000f {set f(o) 1}};array get f}\n",
  "ok_perform": "{} {return \"performs [okey_specattack]\"}\n",
  "gigapanties": "{} {giga panties}\n",
  "UNIX": "{} { return [ ajoin \"\u0003 \" \"[unix] [name]\" [bigPIPE] [randomStamp] [bigPIPE] [randomStamp] [bigGT] [randomStamp] ]; }\n",
  "image-hodapp-washer": "url {magick_overlay $url http://churchturing.org/x/hodappwasher.png}\n",
  "peniscube": "{} {set y [ajoin \" \" \"[ncock 0]\\n\\n[vflip [ncock 0]]\" \"[flip [ncock 0]]\\n\\n[vflip [flip [ncock 0]]]\"]; append y \"\\nTIME CUBE\"; return $y;}\n",
  "aimf_recentdeaths": "args {aimify recentdeaths $args}\n",
  "8(": "{} {mega rain [say 8))]}\n",
  "estandardeoro": "{} {return \"[bold][color black on yellow]SOLAMENTE RON PAUL APOYA EL ESTï¿½NDAR DE ORO[color][bold]\"}\n",
  "znutar": "{} {return \"\\< znutar\\> I used to [rain LARP]\"}\n",
  "fail_reason": "{} {lindex_random $::fail_list}\n",
  "swingler_list_item": "{} {. \"[todo_box] [?? $::swingler_list_action] [string map {his my} [swingler_word]]\" }\n",
  "magickroulette": "{{x 1}} {http://magick.buttes.org/random.rb?count=$x}\n",
  "brute_force": "{pattern block {count 50}} {first [lgrepi $pattern [repeat $count $block]]}\n",
  "mockabez": "{{n 0}} {caption [img-abez 2] [^ $n abez]}\n",
  "talking": "{{who {}}} {set who [name $who]; return \"Why is $who always talking about [talking_word_for $who] and [talking_word_for $who]?\"}\n",
  "indian_city": "{} {lindex_random $::indian_cities}\n",
  "oclet": "{} { strip_color [stampsay -s omgComp \"I took [rand 100] [drug_word]s, [rand 100] [drug_word]s, [rand 100] [drug_word]s,  [rand 100] [drug_word]s, topped off with [rand 100] [drug_word]s. [fatgoon_finale]. [ripper_line]. i'd rather live with my mom than work in a datacenter.\"] }\n",
  "STsaq": "{} saq2\n",
  "orange": "{} { return \"It is the duty of all free Buttesians to always [insult_verb] orangedrink. It is written: you must [kill_verb] him.\"}\n",
  "kallebooze": "args {kallebooize [string map {moira kalleboo} [moira]]}\n",
  "bigpoop": "{} {smega poop 2}\n",
  "saqstory": "args {if {$args eq \"\"} {set fag \"saq\"} else {set fag $args}; return [truestory $fag]\\n[truestory $fag]\\nfgt\\ perl\\ 'tcl\\ saqstory\\ $fag'}\n",
  "aimhello": "args {aim -n [aimname $args] [HELLO]}\n",
  "unknown:1:cmd/^c[ad]+r$/": "{matches cmd list} {cxr $cmd $list}\n",
  "canucks?": "{} {c [llength [intersect [string tolower [names]] [string tolower $::canucks]]] canucks}\n",
  "leftmost": "{} {  subst \"<Leftmost> [lindex_random $::leftmost]\"}\n",
  "urm\u0003om": "{} {bgt moira sux}\n",
  "prion_suicide": "{} {. [prions] [mmm] [lastwords]}\n",
  "J2EE": "{} {. \"Does it scale?\" [checkbox {who cares}]}\n",
  "svn": "{} {return \"Skipped missing target: \\'/[underscore [crw_word]]/[underscore [crw_word]]/[underscore [crw_word]].rb\\'\"}\n",
  "strip_blank_lines": "str {set ret [list]; foreach line [split $str \\n] {if ![regexp {^\\s*$} $line] {lappend ret $line}}; join $ret \\n}\n",
  "islamac": "{} {sys6 [islam [?? $::mac_apps]]}\n",
  "tai": "{{who {}}} {thinkaboutit $who}\n",
  "8D": "{} {mega rain [say 8D]}\n",
  "sdd2": "{} {return \".aim [rand_aim] It's a jungle out there; let me be your guide. - Hackers, identify thieves, and advertising agencies lurk in the shadows doing everything they can to steal your personal information. I have a vast array of tools at my disposal to build a strong digital defense against outside attacks.\"}\n",
  "your_procs_name": "{} { return \"[presentation], although my internet name is [name], and I enjoy [random_word], [crw_word], [name], [zulu_word] and above all: [random_word]! I live in [location_word], vote [political_word] and my favourite pastime is [hate_crime_word].\" }\n",
  "randacro": "{} {overlay [embed [canvas 24 24] [STcatbus] 5 1] [embed [canvas 20 15] [ncock 4] 0 5]}\n",
  "gernshscrant": "{{who {}}} {if {$who eq \"\"} {set who [name]}; return \"<$who> Someone please tell me how to disable this. This is a [56k_word] on my [shsc_word] experience.\"}\n",
  "act": "args {set str [join $args];return \"\\001ACTION [join [split $str \"\\n\"] \"\\001\\n\\001ACTION \"]\\001\"}\n",
  "atags": "{} { lsort [array names ::audio_tagged] }\n",
  "inventory": "{} {rain \"\u0002I have: \\nA 10 foot extention pole.\\nSome small saw blades.\\nA utility knife.\\nDuct tape.\\nA crossbow.\"}\n",
  "uunknown": "args {set cmd [lindex $args 0]; if [regexp {s\\?$} $cmd] {count_nicks $cmd} elseif [regexp {^(.)(_+)\\1$} $cmd {} a b] {return $a${b}_$a} elseif {[llength [set match [info commands $cmd*]]] == 1} {uplevel 0 [concat $match [lrange $args 1 end]]} else {error \"$cmd licks from the shaft to the dome of the dick\"}}\n",
  "blacksun": "{} {rainbow [cwget http://ruin.ath.cx/blacksun.txt]}\n",
  "untag": "{url {tags {}}} {if {$tags eq \"\"} {set tags [tags_for $url]}; . $tags ; foreach tag [tags] { . lremove_item $::images_tagged($tag) $url}}\n",
  "college": "p { set a [collegeidiot]; eval \"$p $a\"; }\n",
  "waffle": "{} waffleimages\n",
  "aimoldtest": "args { aim -n [aimname $args] [oldtest_insult] }\n",
  "asterix": "{} { join { {          ===.} {      =====.==`.       } {         ===`.8=);   _/)} {         _ (G^ @@__ / '.} {   ,._,-'_`-/,-^( _).__:} {  (    / .MMm.Y_)/ } {   `'(|.oMMMM } {   d88:'mOom  } {   88::(::\\d88b} {   Y88  ':88888}} \\n}\n",
  "STmacintrash": "{} { . \" ,----------.\\n |,--------.|\\n ||        ||\\n ||        ||\\n ||        ||\\n |`--------'|\\n | ==     o |\\n `----------'\"}\n",
  "unknown:handler_for": "{args} {set cmd [lindex $args 0]\nset cmd [lindex $args 0]\n set nick [nick]\n set line [join $args]\n set regex {^unknown:(?:\\d+:)?(.*?)(/(.*)/|\\((.*)\\))$}\n set handler [list]\n\n if {$cmd ne \"\"} {\n   foreach proc [lgrep $regex [lsort [info procs unknown:*]]] {\n     regexp $regex $proc {} var arg\n     set value [string range $arg 1 end-1]\n\n     switch -- [string index $arg 0] {\n       \"/\" {\n         if [llength [set matches [regexp -all -inline $value [set $var]]]] {\n           set handler [list $proc $matches]\n           break\n         }\n       } \"(\" {\n         if {![catch {unknown_$value $cmd match} matches] && $matches} {\n           set handler [list $proc $match]\n           break\n         }\n       }\n     }\n   }\n }\n\n return $handler\n}",
  "fidel": "{{who {}}} {goonsay \"HEY [upper [name $who]] IM GONNA STUFF YOUR ASS FULL OF CAKE\"}\n",
  "aimify": "args { set n [aimname [lindex $args 1]]; set p [lindex $args 0]; set l [lrange $args 2 end]; set m [llength [info args $p]]; if {$m==0} { return [aim -n $n [eval $p]]; }; if {$m==1} { return [aim -n $n [eval $p $n]]; }; return [aim -n $n [eval $p $n $l]]; }\n",
  "wigger": "{} keepitreal\n",
  "watching": "args {return \"   __,-'____| ___      /' |\\n /'   `\\\\,--,/'   `\\\\  /'   |\\n(       )  (       )'\\n \\\\_   _/'  `\\\\_   _/\\n   \\\"\\\"\\\"        \\\"\\\"\\\"    I R WATCHING Y0U \u0002[string toupper [join $args]]\"}\n",
  "underscoreword": "{} {return [underscoreize [random_word]]}\n",
  "fartdown": "{{fart random.cgi}} {upside_down[if {$fart eq \"random.cgi\"} {set cache \"\"} {set cache \"~\"}; html [b][join [lrange [regexp -inline -all {</a>:(.*?)</h1>.*<pre>(.*?)</pre>} [${cache}http://www.asciiartfarts.com/$fart]] 1 2] \\n]]}\n",
  "d/c": "{} {return \"[upper [city]], [upper [state]] (PR Newswire) -- The D/C Association of America today introduced a new D/C-[expr [year]+1] specification that will bring not caring into the 21st century for the first time.\"}\n",
  "mrg": "args {macguy [apply macrumors $args]}\n",
  "berniemac": "{{who {}} {post 0}} {niggerize [fundiemac $who $post]}\n",
  "okeyattack": "{} { return \"[upper [bold]A gang of [color blue]Okeys[color] draw near![bold]] \\n[okeyline]\\n  [color yellow][lindex_random [seq 100 200]]HP    [lindex_random [seq 5 9]]HP   [lindex_random [seq 1 3]]HP[color]\\n \\n[largeokey]\\n[smallokey]\\n[tinyokey]\"}\n",
  "subverted": "{{name {}}} {return \"<[name $name]> As a young lad I was subverted by [cartoon_show], kickstarting my descent into [faglame] [dnd_word] and [dnd_word]\"}\n",
  "utd": "{} {lindex_random $::utd_aim_dict}\n",
  "farkheadline": "{} {subst [lindex_random $::farklines]}\n",
  "urbandictionary": "args {. [join $args]: [strip_space [html [strip_html [last [regexp -inline {<div class=.definition.>(.*?)</div>} [cwget http://www.urbandictionary.com/define.php?term=[join $args +]]]]]]]}\n",
  "strangefruit": "{} {return \"  _|\\n /XX\\\\ \\n \\\\_O/\\n _==_\\n/    \\\\\"}\n",
  "wrong": "{{who {}}} {if {$who eq \"\"} {set who [name]}; return \"$who: you will eventually find that you are wrong\"}\n",
  "punch": "{{name {}}} {act \"PUNCHs [name $name]\"}\n",
  "drudge_stamp": "{} {. [stampsay -s [choose \"bomb\" \"axe\" \"skull\" \"cocksegway\"] [s_d]]}\n",
  "pornstar": "{} {lindex_random $::pornstars}\n",
  "my_brother": "gudroids {return $sensual_frottage; set dry_cleaning $my_mom; return $mspaint}\n",
  "aimfoodgoon": "args {return \"[aim -n [aimname $args] \"I like to eat [food_word], [food_word], [food_word] and [food_word], all topped off with heaps of [topping].\"]\"}\n",
  "cnnhd": "{} {return http://bonzoesc.net/images/upload/1/mroach_you_creepy_fuck.png}\n",
  "goonchat": "{} {return \"            _ __                                    _ __\n         _,' /  \\\\       aka two rocks talking    _,' /  \\\\\n      _^/  ^/    `--.                         _^/  ^/    `--.\n     /.' ^_   \\\\_   .'\\\\                       /.' ^_   \\\\_   .'\\\\\n     ;.  _/ \\\\ -. `_/   \\\\                    ;.  _/ \\\\ -. `_/   \\\\\n     /  _ `--./ .-'  `-                     /  _ `--./ .-'  `-\n     --'      '-._ `._                        ' '-      '-.-'\n\"}\n",
  "magick-scale-composite-bottom-left": "{url1 url2 {scale 0.5}} { magick_scheme [scale-and-composite-gen $url1 $url2 $scale B L] }\n",
  "stack": "args {apply caption $args}\n",
  "urlescape": "str {string map $::url_pairs $str}\n",
  "randomRangeString": "{length {chars ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789}} {set range [expr {[string length $chars]-1}]; set txt \"\"; for {set i 0} {$i < $length} {incr i} {set pos [expr {int(rand()*$range)}]; append txt [string range $chars $pos $pos]}; return $txt}\n",
  "bj_bid": "n { if {[blackjack_get_bid [nick]]>0} { return \"ALREADY BID\"; } else { }; blackjack_bid [nick] $n; return \"[nick] bid \\$$n\"; }\n",
  "glug": "{{what {}}} {moirasay [knowher $what] [haioh]}\n",
  "chickenf": "{{whodat {}}} {return \"$whodat, keep fucking that chicken!\"}\n",
  "flaps?": "{} {bgbt \"[llength [names]] FLAPS\"}\n",
  "preview": "{} {return \"\u00030,1\u0002This [movieseason],\u0002 [celebrity] is \u001f[choose Dr. Mrs. Father {The Great}] [al_man_word][choose [al_hat_word] [string tolower [slur]]]\u001f!\\n\u000314,1\\\"[choose [niggerphrase] [albot]]\\\"\\n\u000315,1 [rand 5] [element_word] [string totitle [marginalize]]babies\u0003 - \u00034[source]\"}\n",
  "philia": "{} {return \"[lindex_random $::pervprefix]philia\"}\n",
  "aimdate": "{{name {}}} {aim -n [aimname $name] \"Hey, I was wondering if you wanted to see [buttesonfilm] with me on Friday...\"}\n",
  "aimhax": "args {  aim -n [aimname $args] [subst [lindex_random $::aimhax]]}\n",
  "hectchart": "args {hepchart hector}\n",
  "diary": "{{who {}}} {return \"Dear diary, I was trying to make a point in [channel] but [name] kept calling [ethnic_group] sub-human.  No one cared what I had to say.  I think they're stupid.  [name] is a [faglame].  So I left the house and tried to argue my point on the bus, but the guy next to me in the [job] uniform was in fact a PhD in [butte_word]s.  What a terrible day.  I smoked 2 bowls of [drug] I was so sad.  -- [name $who]\"}\n",
  "import_level": "{{level 1}} {incr level; foreach name [uplevel $level {info locals}] {if [uplevel $level [list array exists $name]] {uplevel 1 [list array set $name [uplevel $level [list array get $name]]]} {uplevel 1 [list set $name [uplevel $level [list set $name]]]}}}\n",
  "moirastone": "{} {moirasay \"[moirastone1]\\n[moirastone2]\"}\n",
  "nc2": "{} {stampsay -s vikingboat \"I have the new [string toupper [swede_word]] [choose \"computer desk\" table chair lamp bedfram \"shelf system\" pillow] from IKEA in my room\"}\n",
  "unknown:nick/mroach/": "args {error \"rubbish\"}\n",
  "dhseyz": "wat {wget http://www.spaceweave.com/lol.txt}\n",
  "import_sn": "{a b} { set result \"$b NOT ADDED\"; catch { add_sn $a $b } result; return $result }\n",
  "applestoredown": "{} {. [img-siren] [img-applestoredown] [img-siren]}\n",
  "radeon36": "{} {return \"<radeon> She was like 'omg i woke up and my ass cheeks were like glued shut from the cum from my ass\"}\n",
  "swinglerbet": "{{who {}}} {. \"<[name $who]> i'll bet $[lindex_random [seq 10 100]] swingler won't be able to go another [choose day hour \"ten minutes\"] without mentioning [swingler_word] or [swingler_word]\"}\n",
  "pandemic": "{} {return \"\u000312WHO alert system\\n[who_levels]\\n[who_level]\"}\n",
  "ipoz": "{{fag {}}} {ajoin \"\" [igridpod] \"\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nThis iPod belongs to: [name $fag]\"}\n",
  "vortest": "args {if {$args == 1} {return \"one\"} {return \"not one\"}}\n",
  "proc:find": "p {set n 0; each [lsearch -regexp -inline -all [info proc] $p] {m {set a [info args $m]; if ![string length $a] { set a \"(none)\"; }; . \"\\002[uplevel {incr n}]\\002) proc \\002$m\\002 (arguments: \\002$a\\002)\"}}}\n",
  "rot:serializemat:test": "{} {\n    set i1 [list \"[rot:C]1,1  1  2  3  4\" \"[rot:C]2,2  5  6  7  8\" \"[rot:C]3,3  9 10 11 12\" \"[rot:C]4,4 13 14 15 16\"];\n\n    return [rot:serializemat [rot:convertstrlist $i1]];\n\n}\n",
  "ballmer": "{} {join {DEVELOPERS DEVELOPERS DEVELOPERS DEVELOPERS DEVELOPERS} \"\\n\"}\n",
  "Grog": "{{who arab} {name Grog}} {. \"<[name $name]> [subst [lindex_random $::Grog]]\"}\n",
  "german": "args {subst [regsub -all {\\y(\\w+)\\y} [string map $::german_alphabet [string tolower [join [escape $args]]]] {[replace_exact $::german_translation_key \\1]}]}\n",
  "tcljre": "{} {return \"<@jre> tcl [goon_word]\\n<@jre> tcl [goon_word]\\n<@jre> tcl [goon_word] \\[[56k_word]\\]\\n<@jre> tcl [goon_word]\\n<@jre> tcl [goon_word]\"}\n",
  "dickcount": "{} {return \"I have sucked [info cmdcount] dicks\"}\n",
  "pubmystery": "{} {publish [strip_all [fastmystery]]}\n",
  "quiz": "{} {. \"[string totitle [texture]], [adjective], and a lot of [shakti_word]: Am I describing...\\n1. [random_word]?\\n2. [random_word]?\\n3. [random_word]?\\n4. [random_word]?\"}\n",
  "randmeasure2": "{} {return \"http://[singlerandomword].on.nimp.org/[singlerandomword].html/?u=buttes\"}\n",
  "insanegame": "{} {return \"\u000308A\u000304B\u000313S\u000312O\u000311L\u000309U\u000308T\u000304E \u000313F\u000312A\u000311G\u000309G\u000308O\u000304T\u000f\"}\n",
  "gudbabies": "{} {return [gudrize [thread_gen]]\\n[gudrize [thread_gen]]\\n[gudrize [thread_gen]]\\n[gudrize [thread_gen]]\\n[gudrize [thread_gen]]}\n",
  "collogay": "{} {. collo[next_in_list {gay fag queer}] is for [next_in_list {fag queer gay}]s}\n",
  "sig": "{} {. Sent from my [?? $::internet_devices]}\n",
  "mlad2": "{{who mlad}} {return \"<[name $who]> why is it so hard to believe that im a [lindex_random $::religion_adherant]\";}\n",
  "league": "{} {return \"[choose National Regional Southern Northern Western Eastern] [country] [string totitle [marginalize]] [string totitle [sport]] League\"}\n",
  "hepchart": "{{name hep}} {join [map [zip [list {      .-- } {      |.------------- } {      ||.-- } {      |||.--------------- } {      ||||.-- } {      |||||.----------------- } \" $name -- \" {      |||||`----------------- } {      ||||`-- } {      |||`------------ } {      ||`-- } {      |`------------- } {      `-- }] [getnuniq 13 name]] {{a b} {. $a $b}}] \\n}\n",
  "gbs_pee": "{} {ajoin \"\" [pee3]\\n\u0003[gay][center G 15] [pee3]\\n\u0003[gay][center B 15] [pee3]\\n\u0003[gay][center S 15] \\n\\n\\n\\n[string map {. '} [flip [omg]]]}\n",
  "meta767": "{} {string map [list [invert [uchar 3000]] [uchar 2708 2708]] [ultra767]}\n",
  "randart:make_canvas_old": "{w h} {\n    set out [list];\n    for {set y 0} { $y < $h } {incr y} {\n        set l [list];\n        for {set x 0} { $x < $h } {incr x} {\n            lappend l \" \";\n        }\n        lappend out l;\n    }\n    return $out;       \n}\n",
  "aimf_facebook": "args {aimify facebook $args}\n",
  "dare": "str {return \"How bout you do me a favor leave me a time and place to meet you $str so we can settle this shit. i made it clear that im tired of this shit talken and im gunna fucken put this shit to a stop. so lets go I FUCKEN DARE YOU TO LEAVE ME YOUR NAME.\"}\n",
  "tlc": "{} {. I don't want no scrubs}\n",
  "911goonoi": "{} {  embed [tower_of_goonoi 9] <-' 44 3 }\n",
  "aimf_lump": "args {aimify lump $args}\n",
  "maxstringlength": "a {set m 0; foreach j $a { set sl [string length [strip_all $j]]; if {$m < $sl} {set m $sl}}; return $m}\n",
  "necco": "{} {subst [regsub -all {[^ ]} [subst [string map {* {[next_in_list {Y I F F}]}} [strip_all [bgt necco]]]] \"\u0003\\[gay],\\[gay]&\u000f\"]}\n",
  "moiracam": "{} {box [embed [moiracam?*] \"\u0002\u00030,1Live Moira Cam\u0003   [clock format [clock seconds] -format {%a, %b %d / %H:%M:%S}]\u0002\" 2 1]}\n",
  "arabify": "args {regsub -all -nocase {(?:^|\\s+)(a)([^ \\x09\\n]+)} $args { \\1 \\2}}\n",
  "frotrock": "{} {ajoin \"\"  \"\\nFOR THOSE ABOUT TO [color red][upper [crw_verb]][color]\\n\\n[color red][bold]FIRE[color][bold]\\n\\nWE SALUTE YOU\" [ncock 3] [stream 10 7]}\n",
  "lo5": "{{who {}}} {set who [or $who [?? [names]]]; ajoin \" \" [nick] [embed [ajoin \" \" [STdance] [oldflip [STdance]]] \"_ _\" 4 2] $who}\n",
  "go:map_board_xyhwp": "{gboard f} {set ol [list]; foreach {w h board} [go:whboard $gboard] { for {set y 0} {$y < $h} {incr y} { set o [list]; set row [lindex $board $y]; for {set x 0} {$x < $w} {incr x} { set xv [lindex $row $x]; lappend o [$f $x $y $h $w $xv]; }; lappend ol $o }; return $ol }}\n",
  "song_modifier": "{} {subst [?? $::song_modifier_dict]}\n",
  "bigmatixhasu_test": "{} { set lines [cache_get_default bigmatix lines 0]; set lines [expr ($lines>4950)?0:$lines]; cache put bigmatix lines [+ 20 $lines]; set urli [expr ($lines % 4950) / 500]; set start [expr $lines %500]; set data [lines [~[modlindex $::bigmatixtesturls $urli]]]; join [lrange $data $start [+ 19 $start]]\\n}\n",
  "realplayer": "{} {return \"[mega realp]\"}\n",
  "cowsex": "{} {join [list {     __} {    /..\\ } {   .\\_O/ Cow Sex} {  /  \\  Here's The Beef} { /  \\ \\          __} {/ ._/( )_______@/oO\\@} {\\. 8==@           -o} { /_/ | W------| |} {(__) | |      | |} {`-`  ^ ^      ^ ^}] \\n}\n",
  "radeon8": "{} { return \"<@radeon> hoyl shit guys i think i might be gay\\n<@radeon> i walked in on my brother masturbating and got a huge fucking boner\" }\n",
  "mroach3": "{} {return \"just added another picture to my [lindex_random $::mroach_obsession] flickr set: [pix mroach]\"}\n",
  "big_w/e": "{} {ajoin \" \" [sdraw {0 0 11111 00001 00001}] [bt (] [sdraw {00100 001}] [bt ~`\\;)] [sdraw {0 0 11111000000 1 1}] [bt w/e]}\n",
  "dongsicate": "url {return \"http://www.svamp.eu/cocks/?url=$url\"}\n",
  "to_phonenumber": "str { map [split [lc $str] {}] {x {string map {0 \"0\" 1 \"1\" 2 \"2\" 3 \"3\" 4 \"4\" 5 \"5\" 6 \"6\" 7 \"7\" 8 \"8\" 9 \"9\" '#' \"#\" {*} star a \"2\" b \"2\" c \"2\" d \"3\" e \"3\" f \"3\" g \"4\" h \"4\" i \"4\" j \"5\" k \"5\" l \"5\" m \"6\" n \"6\" o \"6\" p \"7\" q \"7\" r \"7\" s \"7\" t \"8\" u \"8\" v \"8\" w \"9\" x \"9\" y \"9\" z \"9\"} $x}}}\n",
  "drop_jca": "{\u0001DCC SEND STARTKEYLOGGER 0 0 0} wat\n",
  "moiglet": "{} {figlet [choose rude crass gross sick huh WHAT w/e]}\n",
  "shopping": "{} {return \"Notice the [shakti_word] of this fake plastic [choose anus cock nigina mouth life-partner].\"}\n",
  "masturbationhacksdata": "{} {return {M   M  AA   SSS  TTTTTT U   U RRRR  BBBB   AA  TTTTTT III  OOO  N   N \nMM MM A  A S       TT   U   U R   R B   B A  A   TT    I  O   O NN  N \nM M M AAAA  SSS    TT   U   U RRRR  BBBB  AAAA   TT    I  O   O N N N \nM   M A  A     S   TT   U   U R R   B   B A  A   TT    I  O   O N  NN \nM   M A  A SSSS    TT    UUU  R  RR BBBB  A  A   TT   III  OOO  N   N \n                                            H  H  AA   CCC K  K  SSS  \n                     .                      H  H A  A C    K K  S     \n    ..+7\"7:,       JQQW                     HHHH AAAA C    KK    SSS  \n.J\"`       .:      JHgM                     H  H A  A C    K K      S \n           f    `  Jqm#      `  `           H  H A  A  CCC K  K SSSS  \n   `    `.Y        dkm#                                               \n     ..Z6+...J?11.,wqq@   `                        TIPS AND TOOLS FOR \n     `?????????+...XHg@zi.                     REALLY RUBBING ONE OUT \n           ...+tOwIHH@Nw0sO.   `                                      \n        JZo.JJHwSkNMH@MdddWZy1.                                       \n        4Wszz2ddWKBqHHHMmNSzJllt+.                                    \n        +=OWsZ&JTNQHMMMHM4JZzOaQWt                                    \n         zlzwWsOz+nWWNH0wAQqHHHHH\\                              ..ZTTG\n         .OOtZdWyOzWWWkHgHHqqkkbX                             .Z^     \n           uvrrZXXmgHHHqqqqqqqqkS.                            #       \n            ?OzrwfWkkqqqmgggHHUUC`   `                      `.t       \n              ?OwWkqmmgHHHU0Zv?!`    J?Ov+`                  .F       \n                ?WkHHUUVOv+!``       NH@@H                    U.      \n                  ??zz+!!`           NkHHH                    .H.ggaJ.\n                     ``             .NkggH                 `.f= T&    \n                                    .NkmgR               ` +3    .Ta,.\n                                    .HkmHR                .F        `?\n                                    .HqmHk                J|          \n                                    .HqmHR                .b     `    \n                                    JHmmHk?.??z.           T,   .     \n                            ....+z17dNmgHHuJ++Fdo.          W,  ......\n                      ..+llzlOvi1dJHgHH@HMSe&.JrOZi          S,`` ``..\n                      dkllttOj1fKddNHM@@M@MkKdyvwvvZ,     `.?`4,      \n                      `HWzlOrzdqMgMdMNMMMMMd#Hdel4vvrX,    .!  N.     \n                      .ZWWyOG?+JNdMgXkHHMMMQMN#MJckvwvrn.   i,.,r     \n                      .XXWVyO4lJdHMmgHMMMMMNMMH#&I8Xzvzvwi   ?1,N     \n                       1OwXWkOv&1J8H@H@HHHMMNM5Ju9rvvvzvvwd,  ?vs     \n                       .zzwZXkOwww&JXNHMM8UohA&VwwvwAgQHMMM:  .d6.`   \n                        .wrwvXkZwzXXWpbbHWUXXXQmkH@MMHHHHHW ..HSC`    \n                       ` .OrrOXfyvuZyffWQkH@gHgHgHHmqqqkkkWMHkV!`     \n                          `OrrrXWpWH@@HMHHHHHmmmmmmmmmqqkHW=!`        \n                           `zwvvXWHgHHmqqmmmgggggggggggmqW0`          \n                            `zwryfkqqqqmmmgggggg@g@@@HHHW0I`          \n                             `zwXfkqqqmmggggg@@HHHHUU0VOI?! `         \n                              `zwWkqqmggg@HHHWWU0VOvz?!``             \n                              ``?WkkHHHHWWU0VZOz?!```                 \n                               ` ?XUWUUXZOI+?!``                      \n                                ` ?1zzz?!```                          \n  ____ . ___  ____ _   _           ````  `   tQn                      \n  |  | ' |__] |  |  \\_/                                               \n  |__|   |__] |__|   |                                TRAN Q. NGUYEN  \n                                     WITH A FOREWORD BY PAUL REUBENS  }}\n",
  "aimmissingunixfile": "{{name {}}} {aim -n [aimname $name] Hey, I can't start that program, it says I'm missing [unix_path]/[underscoreword]_[underscoreword].so}\n",
  "sidewaysmega": "{cmd args} {ajoin \" \" [smega \"$cmd $args\" 5] [smega \"$cmd $args\" 5] [smega \"$cmd $args\" 5]}\n",
  "megatroll": "{} {return \"this is such a huge troll, you guys\"}\n",
  "jackass": "{{jackass {}}} {return \"[color black on red]$jackass! Obama thinks you're a jackass, jackass\"}\n",
  "suicide2": "{} {lindex_random $::kill_myself}\n",
  "aimbeware": "{{who {}}} {return \"[aim -n [aimname $who] \"Beware the [adjective] [ethnic_group]\\; they're out to undermine the War on Terror with their unAmerican stance on [hotbutton]\"]\"}\n",
  "set_cdown_event": "{name time} {set ::cdown_events($name) [clock scan $time]}\n",
  "megaseinfetish": "{{who {}}} {return \"[seinfetish $who]\\n[seinfetish $who]\\n[seinfetish $who]\\n[seinfetish $who]\\n[seinfetish $who]\"}\n",
  "bubble": "args {set str [strip_all [join $args]]; join [list [bubble_top $str] [bubble_letters $str] [bubble_bottom $str]] \\n}\n",
  "goon_cooking_method": "{} {return [lindex_random $::goon_cooking_method]}\n",
  "actor_action": "{} {?? $::actor_action }\n",
  "moosex": "{} {cowsay sex}\n",
  "igridpod": "{} {. [ipozt][ipozb]}\n",
  "mobquote": "{} {?? $::mob_excuses}\n",
  "niggerman": "{} {lindex_random $::niggermen}\n",
  "porchmonkey": "{} {return \"[dumbstate] [housepart]-[primate]\"}\n",
  "track_ups_html": "number {wget http://wwwapps.ups.com/WebTracking/processInputRequest?sort_by=status&tracknums_displayed=1&TypeOfInquiryNumber=T&loc=en_US&InquiryNumber1=${number}&track.x=0&track.y=0}\n",
  "mst": "{} {chatquote mst}\n",
  "STgaspump": "{} {join {{ .'[_]'.      } {/ -==== \\     } {| o o o |--._ } {`|^^^^^| `\\ \\)} { |  G  |__/ / } { |  A  (__.'  } { |  S  |      } { |__ __|      } {|_______|     }} \\n}\n",
  "darrenonthejob": "{} {magick-scale-composite-bottom-left [first [regexp -inline http.*$ [japgirl]]] [img-fatgoon] 0.5}\n",
  "weify": "string {string map {\"I \" \"WE \" \"I'M\" \"WE'RE\" \" AM \" \" ARE \" \"MINE\" \"OURS\" \" MY\" \" OUR\" \"I'VE\" \"WE'VE\" \"I'D\" \"WE'D\" \"WAS\" \"WERE\" \" ME\" \" US\"} [string toupper $string]}\n",
  "ubuntu2": "{} {return \\ \\ \\ \\ \\ \\ \\ \\ _\\n\\ \\ \\ \\ ,--(_)\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ |\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ |\\ \\n\\ \\ _/\\ \\;-._\\\\\\ \\ __\\ \\ \\ \\ \\ \\ \\ \\ |\\ \\ |\\ |,-.\\ |\\ \\ |,--.\\ -+-\\ |\\ \\ |\\ \\n\\ (_)(\\ \\ \\ )\\ c(..)o\\ \\ \\ \\ \\ \\ |\\ \\ |\\ |\\ \\ |\\ |\\ \\ ||\\ \\ |\\ \\ |\\ \\ |\\ \\ |\\ \\n\\ \\ \\ \\\\\\ \\;-'_/\\\\(=)\\ \\ \\ \\ \\ \\ \\ \\ `--'\\ `--'\\ `--''\\ \\ '\\ \\ `-\\ `--'\\ \\n\\ \\ \\ \\ `--(_)\\ \\ /\\\\\\n\\ \\ \\ \\ \\ \\ \\ \\ w__/(_)\\ \\ \\ \\ \\ \\ \\ \\ \\ made\\ by\\ niggers\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ÃÂ /|\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ |\\ \\\\\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ for\\ niggers\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ m\\ \\ m\\n\\n}\n",
  "myd": "{} {if {[nick] == \"aenima\"} {. \"revolting and disfigured\"} else {. \"s it\"}}\n",
  "ctrlc": "{} \u0003\n",
  "seinthread": "{{who {}}} {if {$who eq \"\"} {set who [lindex_random [names]]}; return \"<$who> check out this thread on [seinfeld_word] [thread_gen]\"}\n",
  "rollofflify": "args {regsub -all {\\w} [join ${args}] {rolloffle}}\n",
  "samcoffee": "{} {. <sam> just made a delicious [?? $::espresso_drink]}\n",
  "fuckwooster": "{a b} {. \"gamme touches wooster's\" [expr $a + $b]}\n",
  "nopyc": "{} {. http://i.conio.net/nopyc.wav#.mp3}\n",
  "efsenable": "{} {. 1) im ugly and dumb\\n2) i am too fucking messed up to work\\n3) my mom doesnt cook me jack shit\\n4) i have not even a single friend in the world \\n5) my neighbors hate me\\n6) i smell like shit and sweat all the time\\n7) im a fat fuck}\n",
  "dedcat": "{} {rain [embed [embed [embed [embed [canvas 80 21] [ajoin \"\" [flip [STkitty]] \"I'm [lindex_random $::cat_dict]\" [string repeat { } 20] \"I [regsub {ing} [lindex_random $::cat_dict] {ed}]\" [STdeadcat2]] 1 8] [bt \"ALIVECAT\"] 14 2] [bt vs] 30 10] [bt DEDCAT] 20 16]}\n",
  "niggerramble": "oi {return \"So [join [subst [lselect_random {[nigger_ramblings]} $oi]] \" \"] I be all \\\"[niggerphrase]\\\"\"}\n",
  "badafterlife": "{} {lindex_random $::badafterlives}\n",
  "aimf_thegame": "args {aimify thegame $args}\n",
  "penisbird": "{} {join [mapx [seq 1 [expr {int(rand()*5)+2}]] x {lindex_random {a s d f}}] {}}\n",
  "rules": "{} {return \"uh oh, [nick] has been getting into winkie's stash\"}\n",
  "pukedick": "{} { embed [flip [moiracam4]] [ncock 3] 2 2 }\n",
  "MAGICMUSHROOM": "a {  return [rainbow [repeatblock  \"  _______  \\n / O  o  \\\\ \\n |___o__O_|\\n   |___|   \" $a]]}\n",
  "politicalcartoon3": "args {ajoin \"\" [upper [thosefuckers]]\\n[omgdude]  \"\\n\\n\\n\\n\\n / \\n - \\n \\\\ \\n\" \\n\\n\\n[namedfartcloud] \\n\\n[upper [[choose usfolks ourshit]]]\\n[flip [omg]]}\n",
  "alexjones": "{} {. \"http://www.youtubedoubler.com/?video1=http%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3D06CvUjLgK5g&video2=http%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3DTMQLLqiKaas\"}\n",
  "slot_stamp_max_value": "{} {set max 0; foreach stamp [info procs ST*] {set value  [slot_stamp_value $stamp]; if {$value > $max} {set max $value}}; return $max}\n",
  "say": "args {if {$args eq \"\"} {say octalc0de sucks} {join [mapx [seq 1 5] x {. $args}]}}\n",
  "g0sp": "{} { return \"we should ruin this guy\" }\n",
  "lastlog_text": "{{n 10}} {map [lastlog $n] [& cadddr]}\n",
  "donttroll": "{{who {}}} {string map [list \"XXXXXXXXXXXXXX\" [string toupper [join [name $who] [repeat [expr 14-[string length $who]] \"S\"]]]] [dontroll]}\n",
  "getahead": "{} { return [ajoin \" \" [ncockrow 2] [sperm 1] [nomg 3] \"Gotta\\nGet\\nAhead\"] }\n",
  "etsaman": "nick {return [concat \"\\\\||/ :\" [reverse $nick]];}\n",
  "encding": "str { encoding convertfrom dingbats $str }\n",
  "startrekreview": "{} {fedoragoonsay [dork]}\n",
  "wkrblog": "{} {mega ?? $::wkr_dict}\n",
  "slice3": "{{name {}}} {eval \"string map {{my girlfriend} {[acquaintance]} eyes {[body_part]} slice {[regsub ing [act_word] {}]}} {[slice [name $name]]}\"}\n",
  "aaron_neurosis": "{} {return \"hypochondriaaron championeurosis\"}\n",
  "sausage": "{{who {}}} {. $who would you like some sausage?}\n",
  "STdrill": "{} {return \"          _--_\\n         )    (\\n    _..--|_  _|--.._\\n    `-..,______,..-`\\n       |   o\\\\ /o|\\n       (      > )\\n        \\\\   ,--,\\n        |\\\\  `==`\\n .-----/| ---- |\\\\------.\\n/      \\\\`-.  .-/        \\\\\"}\n",
  "megaisland": "{} {return \"[island]\\n[island]\\n[island]\\n[island]\\n[island]\"}\n",
  "drinkyoverlay": "url {magick_overlay $url http://i.buttes.org/http://magick.buttes.org/temp/6dddb4e10b02db18f5fbcea533d45f8f.gif}\n",
  "time_a_block": "block {set t [clockus]; set res [eval $block]; . [- [clockus] $t] : $res }\n",
  "raindeon": "{} {rain [strip_all [randeon]]}\n",
  "fortune": "{} {wget http://gbsfm.info/~kalleboo/fortune}\n",
  "bdqa": "{{who {}}} {return \"Hello \u0002\u001f[name $who]\u000f, I am a proud \u0002member\u0002 of the \u0002B\u0002uttes \u0002d\u0002arren \u0002Q\u0002uality \u0002A\u0002ssurance panel.  Are you satisfied with the \u0002quality\u0002 of the current iteration of \u0002darren\u0002s active on \u0002#cockes\u0002? If not, I would be very \u0002pleased\u0002 to accept any sort of \u0002criticism\u0002 that you might have in \u0002mind\u0002. \u0002Thank you\u0002!\";}\n",
  "ta": "file {cwget \"https://raw.github.com/Trollforge/trollascii/master/$file\"}\n",
  "canada": "str {string map -nocase {about aboot} $str}\n",
  "vday_google_searches": "{} {format \"%02d:%02d <%s> currently on google's \\\"hot trends\\\" list for valentine's day searches\\n%s\" [expr {int(rand()*23)+1}] [expr {int(rand()*59)+1}] [lindex_random [names]] [mega list_crappy_restaurant]}\n",
  "dross": "{} {mega say \"Send patches.\"}\n",
  "electionnight": "{} {return \"[bold][news_network] is calling [state] for [eval color [choose {white on blue} {blue} {red}]][08candidate]\"}\n",
  "ufc_attack": "{} { subst [?? $::ufc_attack] }\n",
  "kalleions": "{} {. < Kalle> [string map {{you to} {me to} {you } {I } You I your my} [prions]]}\n",
  "string_reverse": "str {join [lreverse [split $str {}]] {}}\n",
  "ifyoulike": "{{args cocks}} {set dicks [join $args]; return \"If you like $dicks, why not try...\\n* More $dicks\\n* Larger $dicks\\n* Suck $dicks every day\"}\n",
  "chinkbread": "{} {~roundtrip [lrange [cornbread] 1 end] zh}\n",
  "baconator": "{} {proc dave_thomas {} {ruby_book}; return \"spicy baconator\"}\n",
  "aids": "{} {return \"[rainbow G.R.I.D.S.] \u0003\u000313\u001f/\\\\\u000f\"}\n",
  "blackjack_instructions": "{} { return \"Start a Game by Bidding. Each player has to bid - tcl bj_bid n\\nThen DEAL - tcl bj_deal\\nThen each player can hit or stand - tcl bj_hit, tcl bj_stand\\nNow let the dealer play -tcl bj_done\"; }\n",
  "vxpify2": "what {each [split $what \\n] {line {. \"\\00300,[next_in_list $::chile_colours][strip_all $line]\"}}}\n",
  "cliche_bingo": "{{n 5} {names {}}} { grid_layout [cliche_bingo_matrix $n $names] }\n",
  "stupidtax": "{} {return \"Well I'm not a [job]... I just buy what the [niggerword] tell me to buy.  When it comes to buying [random_word], all I do is write the checks and buy what I'm told to buy. I guess [lowtax_enemy_word] didn't think a [random_word] would be necessary or something, and since I know nothing about [random_word], I couldn't [act_word] him. All I do is write the checks.\"}\n",
  "swingler_cat": "{} {. \"This just in: TREVOR IS [bold][string toupper [?? $::cat_dict]].[bold] More at [?? [seq 5 11]].\" }\n",
  "fema": "{{fag {}}} {act \"watches as [name $fag] is dragged off to a FEMA camp!\"}\n",
  "STabezface": "{} { join {{     .======.     } {    /( (((( )\\    } {   ((/  \\)) \\))   } {  ((/`_______())  } {  /`-[ .] [. ]'\\  } {  \\_     _\\   _/  } {    \\  .__,  /    } {     \\  `-' /     } {     /`----'\\     } {.-\"\"\"`------'`\"\"-.}} \\n}\n",
  "typical_mac_user2": "{} {magick_scheme \"(composite (composite (resize (image \\\"[img-transparent-pixel]\\\") 1024 512) [macify-gen [typical_mac_user_image]] 0 0) [macify-gen [typical_mac_user_image]] 512 0)\"}\n",
  "feedback": "{} {subst [lindex_random $::feedback]}\n",
  "unichar": "args { eval \"uchar $args\" }\n",
  "squared": "{{symbol o} {begin {}} {middle { }} {min 0} {max 8}} { set retval \"\"; for {set i $min} {$i < $max} {incr i} { set retval ${retval}${begin}; for {set j 0} {$j < [expr pow($i, 2)]} {incr j} { set retval ${retval}${middle}; }; set retval ${retval}${symbol}\\n; }; return $retval}\n",
  "STroomba": "{} {. \"    .------.    ,\\n  ,\\'   ()   \\',.\\'\\n .            .\\'.\\n;  O  O  O  o  ; \\'\\n;              ;\\n\\'. .--------. .\\'\\n  \\'.        .\\'\\n    \\'------\\'\"}\n",
  "dogcow": "{} { . moof}\n",
  "mroach1": "{} {return \"<@mroach> i named my [lindex_random {t p z s k w}][expr 60+[rand 39]]0[lindex_random {i {}}] [jewfullname]\"}\n",
  "goblinname": "{} {. [subst [?? $::jgirlfirstnames]] [subst [?? $::jgirllastnames]]}\n",
  "delete_flag": "{} {return \"[color blue]The preceding flag has been removed, thank you for reviewing flagged chats.\"; set lines [collect_lines]; submit_oper_emerg \"***ATTN*** FLAG DELETION ATTEMPT DETECTED ***ATTN***\" $lines}\n",
  "nize": "rags {[lindex_random {norway niggerize}] $rags}\n",
  "namaste": "nick {return \"$nick: /||\\\\\";}\n",
  "pancakes": "{whipping gonorrhea} {return [benchmark]; set my_mom [utd]; return $bone_on_bone; return \"[good sir goons] i just found my sister beating spokkerjones nudes what should i do???? (56k torture)\"}\n",
  "furry_verb": "{} {lindex_random $::furry_verb_dict}\n",
  "radeon26": "{} {return {<@radeon> And the only reason i have a copy of mein kampf because i borrowed it from someone and never gave it back because she moved away\n<@radeon> i dont hate jews in any shape or form\n<@radeon> Who said i thought the holocaust was funny}}\n",
  "combination_pizza_hut_and_taco_bell": "{{who {}}} {. [name $who] is at the [next_in_list {{Pizza Hut} {Taco Bell} {Combination Pizza Hut and Taco Bell}}]}\n",
  "shaffer": "{} {sunglassify [goonsay [knowher crater]]}\n",
  "bold": "args {return [^B][join $args]}\n",
  "unknown:nick/josh/": "args {error [wntd]}\n",
  "aim_r1ch": "{} {return \".a\\im notR1CH [r1ch]\"}\n",
  "STnegromohammed": "{} { join { {    *} { __/ } {/  \\ } {\\__/ } {/..\\ } {\\_O/ } } \\n }\n",
  "resist_screed": "{} {lindex_random $::resist_dict}\n",
  "enigmos?": "{} {. \"[count_nicks enigmo] ...but it's 1 too many\"}\n",
  "track_fedex": "number {set results {}; foreach {{} {} {} date {} time {} {} {} {} {} {} {} desc {} {} {} {} {} {} {} loc {} {} {} {}} [regexp -all -inline {<td.*?>(.*?)</td>} [join [regexp -all -line -inline {^<tr bgColor=#(?:e6e6e6|ffffff) >(.*?)</tr>} [string map [list \\n \"\" <tr \\n<tr] [track_fedex_html $number]]] \\n]] {lappend results [list [join [html $loc]] [join [html $date]] [join [html $time]] [join [html $desc]]]}; return $results}\n",
  "rwb": "args {set r \"\"; foreach w $args {append r \"[bold][eval color [next_in_list {{white on blue} {blue on white} {red on white}}]] $w \"}; . $r}\n",
  "pringles": "{} {lindex_random $::mahvel_dict}\n",
  "fixtabs": "str {global tab;set ret [list];foreach l [split $str \\n] {set c \"\";foreach {m t} [regexp -all -inline {([^\\t]*(?:\\t|$))} $l] {set l [regsub \"\\011\" $l [string repeat \" \" [expr $tab-([string length $t]-1)%$tab]]]};lappend ret $l};join $ret \\n}\n",
  "queers": "{} {return \"They don't care about being hard. They play the game and have fun and then go out for dancing.\"}\n",
  "slashpoll": "{} {set html [wget http://slashdot.org/]; join [concat [list [slashpoll_title $html]] [mapx [slashpoll_choices $html] choice {concat \"* $choice\"}]] \\n}\n",
  "upside_down": "args {uchar_vflip [reverse [pad_lines [join $args]]]}\n",
  "cubegoonsay": "args {fullcubegoonsay [join $args]}\n",
  "self-fml": "{} { apply image-fml [gisfml] }\n",
  "smyd": "{} smd\n",
  "jgs": "{} {. \"http://www.geocities.com/spunk1111/jgs99.jpg\"}\n",
  "resurrect-all-niggers": "args {. what are you, crazy?}\n",
  "shaktiwave": "{} {ajoin \" \" [shaktimond] [wt [shakti_word]] [shaktimond]}\n",
  "randor": "{a b} { if {[rand 2] == 1} { return $a } else { return $b } }\n",
  "disgustdarren": "{} {return \"darren: [gis [choose \"sexy white woman\" \"pistol\" \"machine gun\" \"rifle\" \"american flag\" \"george bush\" \"pale blonde\" \"pale redhead\" \"fair skinned girl\" \"bill gates\" \"windows logo\"]]\"}\n",
  "elemental": "{} {return \"[choose [matter] [sex_fluid]] elemental\"}\n",
  "os": "{} {lindex_random $::os_dict}\n",
  "megaflag": "{} { . \"[mac_icon AlertStopIcon]\" [flag]}\n",
  "obongo": "{} {stock .dji}\n",
  "kazaa": "{} {return [string map {\" \" \"_\"} [virusfile]]}\n",
  "STchina": "{} {return [ajoin \"\" [STchink2] [STchink2] [STchink2] [STchink2]]}\n",
  "incoming": "{{who {}}} {if {$who eq \"\"} {set who [lindex_random [names]]}; return \"[negromg]  \u0003[gay]C=======8 [rainbow \"= =  -  -\"]\\n\u0002$who\u000f\"}\n",
  "ST_tard1": "{} {return \"            _.----._     _.---.\\n         .-'        `-.-'      `.\\n       .'                 .:''':.`.\\n     .'        .:'''':. .' .----.  `.\\n .-./        .' .----.    /  .-. \\\\   `.\\n/.-.           /  .-. \\\\   \\\\ ' O ' |    \\\\\\n\"}\n",
  "saqfeld": "{{fart {}}} {if {$fart eq \"\"} {set fart [lindex_random [names]]}; set ret \"<$fart> and what's the deal with \"; append ret [saq_expert_topic]; append ret \"?  [choose \"\\:-p\" \"O_O\"]\"; return $ret}\n",
  "custombar": "{} {return \"incorporating tsDesk doesn't really make sense.. If there's a logical way to do it, someone can always come up with a plugin.  I'm one person and this has already taken over two years of my life.  TDS may one day read XML files, but honestly for CustomBar editing TDS is a lot easier.  XML has a lot of structure, which can get in the way\"}\n",
  "hello6": "{} {return \"<@hello> and none of my responses in this channel have ever, ever, EVER been irrational/sarcastic\"}\n",
  "lisa needs braces": "{} {return \"dental plan\"}\n",
  "hexbitmap": "bitmap {map $bitmap {line {map [split $line {}] {color {expr {$color eq \" \" ? -1 : [scan $color %x]}}}}}}\n",
  "addfetish": "str {lappend ::fetish_dict $str; return \"\"}\n",
  "2l8": "{} {biggaytext @RETSUB\\ ORCAM@}\n",
  "image-bus": "img { magick_overlay $img http://churchturing.org/x/desert_bus.png }\n",
  "infobody": "{{procname {}}} {if {$procname eq \"\"} {set procname [lindex_random [info procs]]}; return $procname:\\n[info body $procname]}\n",
  "magick-stack-gen": "{img1 img2 {space 0} {bg http://churchturing.org/x/100x100white.png}} {\n  return \"(let ((i1 [scheme_image_or_sexpr $img1])\n                (i2 [scheme_image_or_sexpr $img2])\n                (w1 (width i1))\n                (w2 (width i2))\n                (h1 (height i1))\n                (h2 (height i2))\n                (h (+ h1 h2 $space))\n                (w (if (> w1  w2) w1 w2))\n                (w1o (if (> w  w1) (/ (- w w1) 2) 0))\n                (w2o (if (> w  w2) (/ (- w w2) 2) 0))\n                (canvas (resize (image [magick_id $bg]) w h)))\n               (composite (composite canvas i1 w1o 0) i2 w2o (+ h1 $space)))\"\n}\n",
  "happybday": "{} {rain [embed [embed [canvas 60 20] [join [repeat 20 {. [string repeat { } [rand 24]] [subst [. {[} [lindex_random {weaselize underscoreize niggerize engimize canadianize chinkerize homoize articleize kallebooize}] \"\\\"[name]: happy birthday\\\"\" {]} ]]}] \\n] 1 1] [bt ^_~] [expr [rand 40] + 20] [expr [rand 17] + 2]]}\n",
  "bubble_worker": "{str repl} {return \" [regsub -all {[^ ]} [regsub -all \" \" $str \"  \"] $repl] \"}\n",
  "trace:tree_depth": "proc {apply {set ttree} [. \"\\$::ttree_${proc}\"]; . \"Call depth for `\\x1fproc $proc\\x1f'; \\002[first [lsort -unique -integer -decreasing [regexp -all -inline {[0-9]+} $ttree]]]\\002\"}\n",
  "smdtime": "{} {. HHMM [s smmYYYYdd] [clock format [clock seconds] -format \"%H%M%S%m%Y%d\"]}\n",
  "plop": "{} {return \"[bgt plop!]\"}\n",
  "shit": "{} {. \"âââ ââ¬â   âââ ââ¬â â âââ\"}\n",
  "butteshack:symbols": "syms {join [mapx [seq 0 4] i {ajoin \"  \" [lindex $syms $i] [wrap [upper [subst [butteshack:lookup [lindex $syms $i]]]] 30]}] \\n}\n",
  "darren": "{} {lindex_random $::darren}\n",
  "mk_cached": "proc { lappend ::cached_$proc [$proc];  eval [subst {proc cached_$proc {} {if \\[catch $proc result\\] {set result \\[lindex_random \\$::cached_$proc\\]}; cache_list cached_$proc \\$result}}]}\n",
  "mibbit": "ident {set ip [list]; foreach dildo [regexp -all -inline {[a-f0-9][a-f0-9]} $ident] {lappend ip [scan $dildo %x]}; join $ip {.}}\n",
  "car_brand": "{} {?? $::car_brand}\n",
  "dualomg": "{} {return \"  __        __ \\n /..\\\\ omg! /..\\\\ \\n \\\\_O/      \\\\O_/\"}\n",
  "chinksay": "args {stampsay -s chink [chinkerize [join $args]] }\n",
  "cellphoneattack": "name {giga naw aimfish $name}\n",
  "reservedomain": "domain {http get http://www.networksolutions.com/whois/results.jsp?domain=$domain; return \"Congratulations! You've reserved $domain (if it's not registered already)\"}\n",
  "dice": "{} {return \"u rolld [expr {int(rand()*6)+1}], [faglame]\"}\n",
  "fufu": "{} { ajoin \"\" [fu] [flip [fu]] }\n",
  "grepcity": "args {regsub -all {\\.(\\W|$)} [upper [?? [lgrep [join $args] [lines [~http://cesspool.net/jerkcity/jerkcity.txt]]]]] {\\1}}\n",
  "pumpkinencounter": "{} {return \"[upper [bold]A [color blue]Big Brother Pumpkin[color] sneaks up from behind![bold]]\\n[color orange][STpumpkin][color]\\n    [color yellow][lindex_random [seq 150 200]]HP[color]\"}\n",
  "STfranceflag": "{} {mega . [color blue on blue]XXXXXX[color white on white]XXXXXX[color red on red]XXXXXX[color]}\n",
  "unknown:1:cmd/s\\?$/": "{matches cmd args} {count_nicks $cmd}\n",
  "eli": "{{who {}}} {pick 1 {grift $who} 1 {grift2 $who}}\n",
  "WHOSE": "args {if {$args eq \"STREETS\"} {return \"OUR STREETS\"}}\n",
  "unknown:1:cmd/time\\?$/": "args {wet yes}\n",
  "hicatbus": "{{who catbus}} {smega {strcat \"<[name]> $who: [greeting] [pedo_word]!\"}}\n",
  "hijacked": "{} {return \"my copy of [winprog] has hijacked [winprog]\"}\n",
  "matrix_colours": "{} {next_in_list {03 09}}\n",
  "sa_thread_index": "threadid {lsearch -exact -integer [sa_thread_ids] $threadid}\n",
  "STsadun": "{} {return \"  _____\\n=([color black on red]HEINZ[color]|\\n  --/XX\\\\\\n    \\\\O_/\\n    _==_\\n   /    \\\\\"}\n",
  "spew2": "{} {join [mapx [seq 1 30] n {set c [rand 16]; strcat \u0003$c,$c \"  \"}] {}}\n",
  "boners?": "{} {eval [concat c [count_boners]]}\n",
  "shaktibrero": "{{who {}}} {set who [name $who]; return \"\u001f    \u001f/\\\\\u001f    \u001f\\n\\\\\u001f shakti \u001f/\\n   /..\\\\\\n   \\\\_O/  Shakti sombrero for $who\"}\n",
  "bthread": "{} {last [regexp -inline {res\\/(.+?)\\.} [wget \"http://img.4chan.org/b/\"]]}\n",
  "thinkdifferent": "{{image {}}} { magick-scale-composite-bottom-right $image [img-think-different] 0.4 }\n",
  "wplace": "{{idiot {}}} {return \"    ______\\n   |______|    Know your place,\\n  / @  @ /|       [name $idiot]!\\n / @ @ /  |\\n||___||  /\\n|_____|/\"}\n",
  "nimpspace": "args {nimplink [myspace_url]}\n",
  "5words": "{} {return \"I have nothing to say.\"}\n",
  "omgdude": "{} {join $::omgdude \\n}\n",
  "dicksize": "{{who {}}} {set size [rand 50]; . \"\\002[name $who]\\002\\x1f:\\x1f [choose B 8 Q : .][regsub -all { } [repeat $size {. \"=\"}] {}][choose > D o O P]     \\x1f$size cm\\x1f\"}\n",
  "traniditions": "{} {advisorback [metradelays-twat]}\n",
  "patch2": "{} {return \"you could try parsing the cat root slash dev etcetera file for eth0 and pugling the forward identity-locking rehooliginator and symlinking it to the libgc perl humongisooler module after a kernel decompile and basic repatch update.\"}\n",
  "gayflagify": "lines {\n    if {[llength [lines $lines]] == 1} {\n        set lines [wrap $lines 30]\n    };\n    set lineheight [expr [llength [lines $lines]] / 6];\n    gayflagify_reset $lineheight;\n    set bglist $::gayflag_bg;\n    if {$lineheight > 1} {\n        set bglist [apply nzip [times $lineheight $::gayflag_bg]];\n    }\n    set output [list];\n    foreach line [lines [ajoin \"\" \"\" $lines]] {\n        lappend output [bold][color white on [next_in_list $bglist]]$line;\n    }\n    return [join $output \"\\n\"];\n}\n",
  "wget": "{url} {set result [core::curl [wget_encode $url]]; set status [lindex $result 0]; if {$status == 200} {return [lindex $result 1]}; error \"HTTP $status\"}",
  "rand_webpage_line": "url {lindex_random [split [wrap [join [split [html [wget_to_first_h1 $url]] \"\\n\"] \" \"] 60] \"\\n\"]}\n",
  "union": "{} {return \"[choose \"International Brotherhood of\" \"Union of\"] [string totitle [adjective]] [job]s[choose \"\" \", local no. [rand 49]\" \" ([city] chapter)\"]\"}\n",
  "xss": "{} { subst [lindex_random $::xss] }\n",
  "overheardline": "{} { return [lindex_random $::overheard_lines] }\n",
  "gaydisco": "{} { next_in_list {{Gay Disco} {Another Gay Disco} {Yet Another Gay Disco} {Gay Disco #1} {Gay Disco #2} {Gay Disco #3} {Gay Disco #4} {Gay Disco #5} {Gay Disco #6} {Gay Disco #7} {Gay Disco #8}}}\n",
  "STcoffee": "{} { return \" [u] S [u]\\nc\\\\_/\" }\n",
  "2dndwords": "{} {return \"[dnd_word] and [dnd_word]\"}\n",
  "darren_word": "{} {lindex_random [concat [darren] $::darren_word]}\n",
  "jews?": "{} { c [jew_count] jews }\n",
  "snakesay": "args { return [ajoin \" \" \"\\n$args\" [snake]];}\n",
  "frot_figures2": "{} {ajoin \" \" [embed [ajoin \" \" [STdance] [flip [STdance]]] [. [unichar_dec [?? $::uarrows_right]] [unichar_dec [?? $::uarrows_left]]//] 4 2] \"- let's frot!\"}\n",
  "aim14words": "args {aim -n [aimname $args] [14words]}\n",
  "cnbc": "{} {apply stock $::cnbc_symbols}\n",
  "sjgr": "{} {. \"SHIT     ,      JUST\\nGOT     (_)     REAL\\n      (______)\\n    (==========)\\n\"}\n",
  "STskull": "{} {join {{ .--. } {( oo )} { |''| } {  \"\"  }} \\n }\n",
  "okey_rave": "{} { set a \\\\; return \"   OKEY  RAVE  PARTY\\n[mega {  join [split [smega {choose \" [glowstick] \"    Â·o. .oÂ· \" [glowstick] \"   }] \\n ]} ]\"; }\n",
  "advicedog": "{first second} {. http://i.buttes.org/index.php/http:/neosoft.web.surftown.se/dev/advicedog/advicedog.php?line1=[urlencode $first]&line2=[urlencode $second]#.jpg}\n",
  "durr_im_blargh": "{} {return [durr_im_blargh]}\n",
  "ddos": "{{who {}}} {set who [name $who]; if {$who eq \"\"} {set who [lindex_random [names]]}; return \"<[nick]> [unix] [ip]\\n<[nick]> $who: do u understand that ?:D thats a command for ddos ;)\";}\n",
  "alliterate": "{a b {c {}}} {set a [string tolower $a]; set b [string tolower $b]; set c [string tolower $c]; if {$c eq \"\"} {set i -1; while {$i == -1} {set c [string index [lindex_random $a] 0]; set i [lsearch -glob $b $c*]}}; return \"[lindex_random [lfilter $c* $a]] [lindex_random [lfilter $c* $b]]\"}\n",
  "potter": "{} {return \"Harry Potter and the [choose \"[title] of [city]\" \"[string totitle [adjective]] [title]\"]\"}\n",
  "idected": "who {return \"]\u0002IsraelDetect\u0002(\u001ftM\u001f)[   \u00034WARNING\u0003  The presence of a \u0002jewish citizen of \u001fIsrael\u001f\u0002 has been detected in the vicinity of \u001f$who\u001f.\"}\n",
  "rcp": "{{fart {}}} {if {$fart eq \"\"} {set fart [name]}; return \"$fart, Before replying, please ask yourself the following question: Does my reply offer any significant advice or help contribute to the conversation in any fashion?\" }\n",
  "sex_do": "{} {lindex_random $::sex_do_dict}\n",
  "aimbait": "{{n {}}} {return \"[aim -n [aimname $n] What do you think of [hotbutton]? I think it's [lindex_random {great horrible}]...]\"}\n",
  "exde": "{} {biggaybowtext XD}\n",
  "parse_sa_thread_posts": "a { set b [parse_sa_thread $a]; set o {}; foreach {p} $b {  lappend o   [lindex $p 2] }; return $o;}\n",
  "negroponte": "{} {niggersay \"Scale will get you strategy.\"}\n",
  "hypnotize": "{} {ajoin \"[color]  \" [aflip [join [mapx [lines [randart 21]] line {join [mapx [split $line {}] char {. [color [gay] on [gay]]$char}] {}}] \\n]] \\n[bt YOU ARE]\\n\\n[bt GETTING]\\n\\n[bt SLEEPY]}\n",
  "lo0ol": "{{length 0}} {let {length {. l[join [repeat $length {?? {o 0 .}}] {}]l}} [if {$length == 0} {rand 15 40} {set length}]}\n",
  "fatwa": "{} {. [islam [faglame] [al_man_word] [al_hat_word]s! [koran] [arabic]!]}\n",
  "rand_fullwidth": "{} {unichar_dec [expr [rand 96] + 65281]}\n",
  "Tcl": "{cmd args} {apply $cmd $args}\n",
  "STmarsrover": "{} {. \"      ..--''\\n..--'' .\\\\../\\n\\\\..--''\\\\  ====O\\n( )    ( )\"}\n",
  "rot:convertstrlist": "strl {\n    set mat [list];\n    foreach {str} $strl {\n        lappend mat [rot:str2tuples $str]\n    }\n    return $mat\n}\n",
  "gudrize": "str {set ret \"\"; set color [rand_color]; foreach word $str {while {[set next_color [rand_color]] eq $color} {}; set color $next_color; append ret \"$color $word \"}; return $ret}\n",
  "hexc": "c {scan $c %c a; format 0x%02x $a}\n",
  "iwnkie": "{} {chinkerize [winkie]}\n",
  "Whatbotinfiniteloop.": "args {apply whatbotinfiniteloop. $args}\n",
  "typical_mac_user_image": "{} {pick 3 img-frot 1 img-horse}\n",
  "lastfm:artist": "html {lastfm:urlfilter [regsub {^/music/(?:\\+noredirect/)?} [regexp -inline  {/music/(?:\\+noredirect/)?[^\"\\/]+}  $html] {}]}\n",
  "next_mac_feature": "{} {choose \"[iphone_feature]\" \"[mac_feature]\"}\n",
  "nfo": "str {if {int(rand()*10) > 5} {string map {I i} [string toupper $str]} else {string map {E e I i} [string toupper $str]}}\n",
  "aenima": "{} @pricke\n",
  "dan": "{} {. \\1DCC\\1}\n",
  "c2": "{a b} {ajoin \" \" [bgr \"\" $a] [bgr \"\" $b]}\n",
  "movie": "{} {lindex_random $::movies}\n",
  "caliology": "{} {pick 1 {. PUNTME PICKS FRUIT} 10 {. !caliology tcl caliology*}}\n",
  "200mb": "{} {embed [fedoragoonsay promptly pissed my pants] \"[color black on yellow]    [color]\\n [color black on yellow] ,`[color]\" 12 10}\n",
  "pants_poopin": "{} { lmiot {pants poopin [name]} }\n",
  "broken_wrap": "{str {cols 72}} {set ret [list]; set line \"\"; foreach word [split $str] {if {[string length \"$line\"] && [string length \"$line $word\"] > $cols} {lappend ret $line; set line \"$word\"} {append line \" $word\"}}; if [string length \"$line\"] {lappend ret $line}; join $ret \\n}\n",
  "mypix": "args {pix [nick] [join $args ,]}\n",
  "svsnick": "{a b} { if {[lsearch -exact $::botnames $a] == -1} { return \"[nick]: $a is spelled [join [split $b {}] -]\"; }; }\n",
  "lolname": "{} {return \"[waspfirstname] [alshort]\"}\n",
  "stardefense": "{} {heynot I just defeated [rand 250] waves of S'rath invaders in #StarDefense Challenge Mode. Can you do better? [tinyurl [gis gay porn [random_word]]]}\n",
  "hzu": "{} {. [spew]}\n",
  "go:map_board_xyp": "{gboard f} {set ol [list]; foreach {w h board} [go:whboard $gboard] { for {set y 0} {$y < $h} {incr y} { set o [list]; set row [lindex $board $y]; for {set x 0} {$x < $w} {incr x} { set xv [lindex $row $x]; lappend o [$f $x $y $xv]; }; lappend ol $o }; return $ol }}\n",
  "okeyrap": "{} {realokeysay \"always slangin / just can't stop [word ang$]in\\nb nice / else i crank up the [word ice$]\\nstill kappin / u kno i'm just [word (?:ap|app)$]in\"}\n",
  "imben": "{} nig\n",
  "jump": "{} {embed [ultra911] [fullwidth \"o\\nv\\n|\\nn\"] 50 15}\n",
  "dreamhoststatus": "{} {return \"how the fuck should i know, why don't you check http://www.dreamhoststatus.com\"}\n",
  "beep": "{} {subst [say {\u0003[gay]\\007beep }]}\n",
  "omh": "{} {oyh [nick]}\n",
  "randhello": "{} {eval [lindex_random [info procs hello*]]}\n",
  "newscompany": "{} {return [lindex_random $::newscompany]}\n",
  "backslash": "{} {return \\\\}\n",
  "feem1": "{} {return \"<@feem> [random_word] [random_word] [random_word] [random_word] [random_word]  [random_word] [random_word] [random_word] [random_word] [random_word] [random_word] [random_word] [random_word]  [random_word] [random_word] [random_word] [random_word] [random_word] [random_word] [random_word] [random_word]  [random_word] [random_word] [random_word]\"}\n",
  "wntds_password": "{} {. [randomRangeString 10]}\n",
  "whatbot": "args {join [mapx [lines [join $args]] line {concat Whatbot: $line}] \\n}\n",
  "hightax": "{} { return \"<@hightax> [hightax_dict]\" }\n",
  "huge_w/e": "{} {sdraw $::huge_moira_image}\n",
  "hypnofit": "{} {. \"HEEEEEEEEEY watchandweight this is what I'm wearing today. I've got [articleize [ww_item]], a new [ww_item], and this [ww_item] I've had my eyes on for a long time now.  Not sure what I should do about the [ww_item] so let me know what you think!\"}\n",
  "saq_skill": "{} {?? $::saq_skills}\n",
  "allhello": "{} {set ret [list]; foreach p [lsort [info procs hello*]] {lappend ret [join [split [regsub -all {<@?[^>]+> } [ strip_all [eval $p]] {}] \\n]]}; join $ret}\n",
  "rbt": "args {rev [bt $args]}\n",
  "pornlords": "{{who {}}} {if {$who eq \"\"} {set who [lindex_random [names]]}; return \"<$who> I for one welcome our new [strip_s [strip_u [fetish_porn]]] overlords\"}\n",
  "procname": "argsgohere {body goes here}\n",
  "whitefolks": "{} {. [img-whitefolks] \\n [aud-whitefolks]}\n",
  "goonweight": "{} {return \"[fathead [rand 40]] I'm not fat, I'm just [size_word]-boned!\"}\n",
  "knuth_shuffle_permute": "t {set seq [seq 0 $t]; array set ret [lmerge $seq $seq]; for {set j 0} {$j <= $t} {incr j} {set k [expr {int(floor($j*rand()))}]; set ret($j) $ret($k); set ret($k) $j}; return [order_array_list [array get ret]]}\n",
  "great": "{{what {}} {who {}} {stylez {}}} {string map [list \"Comment\" \"$what\"] [lulzup $who 2 $stylez]}\n",
  "clapper": "{} {upper [subst [next_in_list $::clapperlist]]}\n",
  "HCOLOR": "a {COLOR $a $a}\n",
  "dictacro": "word {acroformat [mapx [split [string tolower $word] {}] char {word ^$char}]}\n",
  "lurepole": "{} { return \"andrzej: when are you coming to meet me, there's free jewish girls and iphones\" }\n",
  "bigLT": "{} { return \"  /\\n /\\n<\\n \\\\\\n  \\\\\"; }\n",
  "shuffle_helper": "args {expr int(rand()*3)-1}\n",
  "aimf_nuremberg": "args {aimify nuremberg $args}\n",
  "nigsays": "{} {wget http://www.shitmyniggersays.com/random.php}\n",
  "gudporn": "{} {return \"[gud_fetish] [gud_fetish] [gud_fetish] [gud_fetish] [gud_fetish] \"}\n",
  "roulette_empty": "{} { return [expr $::roulette_current_chamber >= $::roulette_n_chambers] }\n",
  "succ": "x { + x 1 }\n",
  "mockclint": "{} python\n",
  "e/n": "{} {[?? {girlgoonsay goonsay fedoragoonsay snoopysay blakesay catsay}] [fml]}\n",
  "german_death_sentence": "{} {return \"\u0002\u00030,12 [join [split [david] \"\\n\"] \" \u000f\\n\u0002\u00030,12 \"] \u000f \u0002\u000312,0HAPPY [string toupper [jewliday]]\"}\n",
  "lastlog": "{{n 10}} {lrange [last [log] [+ $n 1]] 0 [- $n 1] }\n",
  "moiravision2": "url { http://magick.buttes.org/abez/magick.rb?[? cmd scheme id \"(let ((x (image $url)) (mv (dissolve x - .25 .25 -50 0))) (crop mv 0 0 (- (width mv) 50) (height  mv)))\"] }\n",
  "cat_dict": "{} {?? $::cat_dict}\n",
  "downs": "{} {set rate [convert 1 cad usd]; set cad [lindex $rate 0]; set usd [lindex $rate 3]; if {$cad < $usd} {set color red} {set color green}; return \"[color $color]${rate}[color]\"}\n",
  "STcondom": "{} {return \"         _\\n       _| |_\\n     /~     ~\\\\\\n   /'         `\\\\\\n  (             )\\n  |  (o ) (o )  |\\n  |             |\\n  |     ~~~     |\\n(~\\\\_           _/~)\\n`\\\\_ ~~-------~~ _/'\\n   ~~---------~~\"}\n",
  "unknown_fuzzy_normalize": "str {regsub -all {[_:-]+} [string tolower $str] {}}\n",
  "crw_nl": "{} {return \"[nicklist] is into [crw_word]\"}\n",
  "darrens?": "{} {set darrabens 0; set buf \"\"; append buf [count_nicks darren]; foreach darren [lfilter *darren* [string tolower [names]]] { if [regexp {^arab@|root@127\\.0\\.0\\.1$} [hostmask $darren]] { incr darrabens; }; }; return \"$buf ...but $darrabens a rabs are among them!\"; }\n",
  "msgalbot": "args {aim -n analbotulism $args}\n",
  "uablax": "{} {return \"no U a blax\"}\n",
  "spies?": "{} {c [llength [intersect [string tolower [names]] $::spies]] spies}\n",
  "butt": "{{what {tcl butt}}} {join [mapx [lines $what] line {. !butt $line}] \\n}\n",
  "88words": "{} {return \"What we must fight for is to safeguard the existence and reproduction of our race and our people, the sustenance of our children and the purity of our blood, the freedom and independence of the fatherland, so that our people may mature for the fulfillment of the mission allotted it by the creator of the universe. Every thought and every idea, \"}\n",
  "lolquine": "{} {info body lolquine}\n",
  "pornair": "{{who {}}} {if {$who eq \"\"} {set who [lindex_random [names]]}; return \"$who more like [strip_u [fetish_porn]] am i rite?\"}\n",
  "canadian_object": "{} {lindex_random $::canadian_objects}\n",
  "rickroll": "{} {upper [subst [next_in_list $::rrl]]}\n",
  "gentlyfuck": "{{who Gentelmens}} {. $who would U be so kind,to give me to USE your ASS HOLEs, for a little gently fuck !!}\n",
  "aim_strip": "proc {regsub {^\\.aim [^ ]+ } [$proc] {}}\n",
  "ratio1": "{} {. \"[expr round(100.0 * [mike_count] / [gay_count]) / 100.0] mikes per gay (mpg)\"}\n",
  "anyburga": "{{name {}} {place lunch} {verb serves} {thing cheezzburga}} {set name [name $name]; gold [hacker \"hey $name yo momma in da $place $verb da $thing\"]}\n",
  "hertz": "{} {icosa . http://upload.wikimedia.org/wikipedia/en/thumb/d/df/Hertz_svg.svg/3000px-Hertz_svg.svg.png}\n",
  "doctoral": "{} {return \"You have [string totitle [sexpart]] [string totitle [choose [al_man_word] [al_hat_word]]] [string totitle [disease]].\"}\n",
  "dreamhost": "{} { goonsay \"It must have [goonhost], [goonhost], and MOST IMPORTANTLY [goonhost] for UNDER \\$10 a month.\"}\n",
  "hardchatscomic": "{{text {}} {title IRC} {style abez} {author you}} {  last [regexp -all  -inline {id=\"imageurl\">(.*?)</a>} [http post http://comics.freebsdgirl.org/generator.cgi action generate style $style author $author title $title text $text]] }\n",
  "aimf_fiddle": "args {aimify fiddle $args}\n",
  "aqua_teen_hunger_force": "{} goonmeal\n",
  "islam_2": "{{name {}}} {return \"[upper [kill_verb] those who [insult_verb] [name $name]]\"}\n",
  "magick-concat": "{img1 img2} { magick_scheme [magick-concat-gen $img1 $img2] }\n",
  "brian": "{} { return \"[rainbow \"Yes sir! I can boogie! But I need a certain song! I can boogie! Boogie boogie! All night looooooooooooooooooooong!\"]\"}\n",
  "antivirus_word": "{} { return \"[lindex_random $::antivirus_dict] Anti-Virus\"}\n",
  "ricky": "{} {ajoin \" \" [STricky] [ricky_text]}\n",
  "bj_help": "{} { return [blackjack_instructions]; }\n",
  "aimf_mymyspace": "args {aimify mymyspace $args}\n",
  "spiderman": "{} {return \"spiderman.exe is a virus created by Peter Enckelman, a Helsinki student and member of the gay pride movement.  The virus infects a computer and replaces images on the disk with an animated picture of Spiderman, dancing suggestively.\"}\n",
  "zero": "str {if {$str <10} {return \"0$str\"} {return $str}}\n",
  "gudjews": "{} {return \"[gudrize \"        o,    o__              o_/|   o_.\"]\\n[gudrize \"        </     \\[/   JEW CANOE  \\[_| |   \\[_\\\\\"]\\n[gudrize \"    (`-/------/-----')      (`----|------\\\\-')\"]\\n[gudrize \"~~~~~~~@~~~~~~@~~~~~~~~~~~~~~~~~~~~@~~~~~~~@~~~~~~~~\"]\"}\n",
  "blackfacts": "{} { lindex_random $::blackfacts }\n",
  "gridsify": "args {set color(1) \"04\"; set color(2) \"07\"; set color(3) \"08\"; set color(4) \"09\"; set color(5) 12; set i 1; set ret \"\"; foreach char [upper [split $args {}]] {set char $color($i)$char.; append ret \u0003$char\u0003; if {$i == 5} {set i 1;} else {incr i};}; return $ret\\ \u000313\u001f/\\\\\u001f\u0003}\n",
  "hcroomlist": "{} { set rooms [getnuniq 10 hcroom]; join [mapx [seq 1 10] i {ajoin \"\" \"[format %2d $i] .. \" [wrap [lindex $rooms [- $i 1]] 30]}] \\n }\n",
  "bigtooley": "{{who {}}} {if {$who eq \"\"} {set who [lindex_random [names]]}; return \"[tooley [bigtext $who]]\"}\n",
  "yourgay": "{{who {}}} {return \"\u0002\u000313Zap! \u000f\u0002Your gay, [rainbow [name $who]!]\"}\n",
  "â¢": "{} {[choose gis pt] lesbians}\n",
  "bj_init": "{} { return [blackjack_init]; return \"Black Jack Initalized\";}\n",
  "randmacroname": "{} {macroname [?? [macros]]}\n",
  "buyers_guide_products": "{} {array set products [buyers_guide_data]; array names products}\n",
  "what_is_with_fox_news": "{{str {}}} { subst [lindex_random $::what_is_with_fox_news] }\n",
  "char": "c {if [catch {regsub -all {\\*} [decode $::alphabet([string toupper $c])] \"\u0016 \u0016\"} err] {return [join [string repeat \"{   } \" 5] \\n]} {return $err}}\n",
  "octalc0de4": "{} {ajoin \"\u000f  \" [bgbt octalc0de] \"[hacker \"our\\nlitle\\nchinee\\ngenius\"]\\n  XD\"}\n",
  "waffleimages_get": "{} {set html [unescape_html_entities [wget http://www.waffleimages.com/random]]; . [html [strip_html [lindex [regexp -all -inline {<IMG.*SRC=\"(.*?)\" ID=\"random\">} $html] 1]]].jpg}\n",
  "pervertia": "{} {return \"[lindex_random $::pervprefix]philia\"}\n",
  "aimbible": "{{a {}}} {aim -n [aimname $a] [randbible]}\n",
  "tfrfit": "{} {eval [string map {watchandweight TFR ww_item lindex_random\\ $::tfr_dict} [info body hypnofit]]}\n",
  "aimstallion": "args {aim -n [aimname $args] [stallion]}\n",
  "MTW": "{} {overlay [embed [canvas 24 24] [STcatbus] 5 1] [embed [canvas 20 15] [ncock 4] 0 5]}\n",
  "alldeon": "{} {set ret [list]; foreach p [lsort [info procs radeon*]] {lappend ret [join [split [regsub -all {<@?[^>]+> } [strip_all [eval $p]] {}] \\n]]}; join $ret}\n",
  "shaktijew": "{} {return \"\u001f   \u001f/\\\\\u001f   \u001f\\n\\\\\u001fshakti\u001f/\\n\u001f/sh\u001fak\u001fti\\\\\u001f\\n   \\\\/   \"}\n",
  "rails2": "{} {. \"Application Error (Rails)\"}\n",
  "discord": "{} {return \"Five tons of flax\"}\n",
  "magick_overlay_crop": "{urlbottom urltop} {magick composite [magick_id [apply {crop_to_fit_and_resize $urlbottom 0 0} [get_image_size $urltop]]]  [magick_id $urltop] 0 0}\n",
  "heckle_aim": "{{name {}}} {set name [aimname $name];strcat .ai \"m $name Hey $name! You [gudrow_word] [gudrow_word]!\"}\n",
  "kick5": "{} {return [goonsay \"as a [pervert] kick5 is interested in being [ethnic_cleansing_verb]ed with [a_sextoy] to improve [seinfeld_word] but is scared of [disease_word]\"]}\n",
  "buffelo": "{} {wt buffelo}\n",
  "nwonews": "{} {return \"\u0002Top stories on \u000312Info\u000302Wars\u000f\u0002.com\u000f\u0002:\\n[string map {\u0018 ' \u0019 '} [encoding convertfrom utf-8 [rss http://www.prisonplanet.com/feed.rss]]]\"}\n",
  "butteshack:grave": "{} {subst [lindex_random $::butteshackgraves]}\n",
  "qwantz": "words {magick_scheme [qwantz-code [map $words {{x} {scheme_escape [wrap [cstrip $x] 15]}}]]}\n",
  "tooley": "{{who {}}} {if {$who eq \"\"} {set who [lindex_random [names]]}; return \"$who no offense or nothing but 1 day id love to fuken walk up to and ounch your binrat in so much ur head would be poping out of ur arse,downy.\"}\n",
  "ono": "{} {upper [odin] [niggerphrase] [odin]}\n",
  "afetch": "tag {\n  set tag [anormalize_tag_name $tag]\n  if [info exists ::audio_tagged($tag)] {\n    join  $::audio_tagged($tag) \\n\n  } else {\n    error \"no audio tagged \\\"$tag\\\"\"\n  }\n}\n",
  "deferred_talking": "{{who {}}} {set who [name $who]; . \"talking about [talking_word_for $who] and [talking_word_for $who]?\"}\n",
  "bonzo": "{} {. \"<@bonzo> fatgoon makes me feel so good about myself\"}\n",
  "laffo": "{} {return \"[biggaybowtext \\*\\~LAFFO\\~\\*]\"}\n",
  "permabanlist": "{} {rain [set r [list];foreach {x t d j s b} [regexp -inline -all {<td align=\"left\"><b><.*?>(.*?)</a></b></td><td nowrap><.*?>(.*?)</font></td><td nowrap><b><.*?>(.*?)</a></b></td><td>(.*?)</td><td><.*?>(.*?)} [wget http://forums.somethingawful.com/banlist.php?actfilt=92]] {lappend r [fixtabs \"$t\\t$d\\t$j\\t[html $s]\\t$b\"]};join $r \\n]}\n",
  "urxbox": "nick {gamercardfor $::xboxnames($nick)}\n",
  "wangzang": "{} {return \"a command you fag\"}\n",
  "mano": "{} { return \"19:36 <+     mano> i used to live with a bunch of tattoo artists\" }\n",
  "sa_threads": "{{forumid 0}} {global SA; if !$forumid {return [sa_all_threads]}; if ![info exists SA($forumid)] {return [list]}; return $SA($forumid)}\n",
  "overheard2": "{} { set one [lindex_random $::overheard_people]; set two [lindex_random $::overheard_people]; if {$one eq $two} {append one \" #1\"; append two \" #2\"}; return \"$one: [overheardline]\\n$two: [[choose albot niggerphrase cached_onehug mystic]]\\n$one: [overheardline]\\n-- [jew_york_street] & [jew_york_street]\"}\n",
  "prankideas": "{} { subst [lindex_random $::prankideas] }\n",
  "mung": "str1 {return \"mung $str1\"}\n",
  "turdneck": "{{n 4} {m 4}} { join [map [zip [map [seq $n 1] {{x} {string repeat \" \" $x}}] [map [seq 1 [- $n 0]] {{x} {return \"([string repeat \" \" [+ $m [* 2 $x]]])\"}}]] {{x y} {return $x$y}} ] \\n}\n",
  "schindler": "{} {smega {join [split [rain [mega jewfullname]] \\n]}}\n",
  "submithug": "{} {[set hug [grouphug]]; [submitdrudge $::hug]}\n",
  "faglet": "args {pink [figlet $args]}\n",
  "teratoma": "{} {return \"SELECT [tranny_word] FROM #noisebridge WHERE [fuckword]ing = TRUE\"}\n",
  "goodmeasures": "{} { lindex_random $::goodmeasures }\n",
  "vflip": "str {set ret [list]; foreach line [lreverse [split $str \\n]] {set l \"\"; foreach {f t} [split_on_formatting $line] {append l $f[string map $::vflip_pairs $t]}; lappend ret $l}; join $ret \\n}\n",
  "any?": "{list {block {x {return $x}}}} {\n  foreach value $list {\n    if [true? [yield $value]] {\n      return 1\n    }\n  }\n  return 0\n}\n",
  "mccain_geography2": "{} { . \\\"I was  concerned about a couple of steps that the Russian government took in the last several days. One was reducing the energy supplies to [dead_country].\\\" -- John McCain, July 14}\n",
  "maxlines": "a { set m 0; foreach j $a { set sl [llength [split $j \"\\n\"]]; if {$m < $sl} { set m $sl; }; }; return $m; }\n",
  "blackletter": "{} {return {Ã°ÂÂÂ Ã°ÂÂÂ Ã°ÂÂÂ  Ã°ÂÂÂ¡ Ã°ÂÂÂ¢ Ã°ÂÂÂ£ Ã°ÂÂÂ¤ Ã°ÂÂÂ¥ Ã°ÂÂÂ¦ Ã°ÂÂÂ§ Ã°ÂÂÂ¨ Ã°ÂÂÂ© Ã°ÂÂÂª Ã°ÂÂÂ« Ã°ÂÂÂ¬ Ã°ÂÂÂ­ Ã°ÂÂÂ® Ã°ÂÂÂ¯ Ã°ÂÂÂ° Ã°ÂÂÂ± Ã°ÂÂÂ² Ã°ÂÂÂ³ Ã°ÂÂÂ´ Ã°ÂÂÂµ Ã°ÂÂÂ¶ Ã°ÂÂÂ·}}\n",
  "ups": "{} {gold [convert 1 xau usd]}\n",
  "gen_letter": "{} {. \"We're coming over [day] [daypart] [choose \"to [insult_verb] [famousperson]\" \"for some [crw_word] [choose \"\" \"with [famousperson]\"]\" \"to [kill_verb] [famousperson]\"]... we're bringing [choose \"[goon_food]\" \"[polish_food]\" \"[fastfood]\" \"[menu_food_item]\"] and [choose \"[random_word]\" \"[ethnic_group]\"].  [choose \"[lastwords]\" \"[lastwords]\" \"[lastwords]\"  \"[lastwords]\" \"See you soon\"]\"}\n",
  "faggots": "{} {return \"Kalle\"}\n",
  "figure1": "{} {caption [img-frot]  [capitalize \"Fig. 1. [crw_word]\"]}\n",
  "back": "{{args {}}} {if {$args eq \"out\"} {return \"i'm in your room\"} {}}\n",
  "colwidth": "{colnum table} {maxstringlength [map $table {{row} {lindex $row $colnum}}]}\n",
  "funnypoliticaljoke": "{} {return \"Q: What's [colour], is a [faglame], and thinks about [political_figure]? A: A [political_word] [unplural [ethnic_group]] from [country]!\"}\n",
  "n1984": "{} {upper \"If you want a vision of the future, imagine a [big_word] [choose GAY JEWISH HOMO HOMOSEXUAL CUCKOLDING] [penis_word] [choose BASHING SMASHING WHACKING SMUSHING SLAPPING] a human [choose MOUTH ASS CUNT EYES EARS URETHRA]... [time_word]!\"}\n",
  "ripper": "{} { return [rippergoon]; }\n",
  "unknown:1:cmd/(.+)ditions$/": "{matches cmd} {[last $matches]back [conditions]}\n",
  "gaydient": "{{width 30}} {gradient [cache fetch gaydient last_color gay] [cache put gaydient last_color [gay]] $width}\n",
  "smorse": "str {string map {_ -} [morse $str]}\n",
  "gradient": "{a b {width 30}} {join [mapx [seq 1 21] n {gradient_line $n $a $b $width}] \\n}\n",
  "gaypride": "{} {join [list [bgbt GAY PRIDE] [bgt \"\u0002GAY PRIDE\"]] \\n}\n",
  "hangmanify": "args {foreach {m n} [join [regexp -all -indices -inline -nocase {[a-z]} [set ar_s [join ${args}]]]] { if {[rand 20] > 10} { set ar_s [string replace ${ar_s} ${m} ${m} _] } }; set ar_s}\n",
  "giganig": "{} {giga zapanig}\n",
  "confession": "{{who {}}} {set who [name $who]; return \"<$who> My real name is actually [choose [jewfullname] [muslimname] [waspfullname]], and I'm really from [country]. I'm into [sex_act] and [crw_word]. Now that you know this, I'm quitting irc forever. \\n-!- $who \\[[hostmask $who]\\] has quit \\[Quit: [niggerphrase]\\] \\n<[name]> what [articleize [choose [faglame] [marginalize] [sexpart] [dndcreature] [alshort]]]\"}\n",
  "dikky": "{{who {}}} {if {$who eq \"\"} {set who [name]}; return \"<$who> [lindex_random $::dikky_dict]\"}\n",
  "LiteralKa": "{} { lindex_random $::LK_fav }\n",
  "csi-comic": "{question h1 h2 h3} {csi-comic_scheme [list $question $h1 $h2 $h3]}\n",
  "darren_": "{} darren_\n",
  "tkhouseofsluts": "{} {thomaskback [?? $::porn_scenes_dict] }\n",
  "STmacrumors": "{} {return \"  __________\\n (--\\[ .\\]-\\[ .\\]\\n (       O  )\\n (_______v__)\"}\n",
  "e ": "{} {return [e/n]}\n",
  "puntme10": "{{to {}} {who puntme}} {. \"<[name $who]> [name $to] whats your sass account\"}\n",
  "LiteralKa_gh": "{} { lindex_random $::LiteralKa }\n",
  "azz": "{} {return \"you mean raz\"}\n",
  "aimmontspace": "args {aim -n [aimname $args] Hey check out my montspace http://www.montspace.com/[collegeidiot]}\n",
  "STcsammisC": "{} { join {{  ___  } { /. .\\ } {( )o( )} { \\___/ }} \\n }\n",
  "lmgtfy": "args { return \"[tinyurl http://letmegooglethatforyou.com]/?q=[fullencode [join $args]]\"}\n",
  "difference": "{a b} { select $a {i {not [include? $b $i]}}}\n",
  "weather1": "{} {return \"[choose [penis_word] [butte_word] [singleethnic] [niggerword] [crw_word]]\"}\n",
  "2mf": "{} tmf\n",
  "sexpart": "{} {lindex_random $::sexparts}\n",
  "samsnack": "{} {ncock 1}\n",
  "righttri": "{a b} {. \"A right triangle with sides having lengths $a and $b has a hypotenuse with length\" [expr sqrt( $a*$a + $b*$b )] }\n",
  "furry_thread": "{} {subst [string map {shsc_word furry_noun shsc_thread furry_thread} [lindex_random $::shsc_thread_dict]]}\n",
  "honourary": "{} {join [mapx [lrepeat x [expr int(rand()*3)+1]] x {lindex_random $::honourary_dict}] \", \"}\n",
  "repeat": "{count block} {with list {foreach i [seq 1 $count] {lappend list [uplevel 1 $block]}}}\n",
  "testlmfao": "{} {return \"         __,_____          __ .`,  .\\n        / __.==--\\\"     8===/..\\\\===D POP U DEAD, [string toupper [nick]]\\n       /#(-'               \\\\_O/ `.  \\n       `-'\"}\n",
  "botanybay": "{} {lindex_random $::khan_quotes}\n",
  "hark": "{{who {}}} {return \"<@[name $who]> hark! A [random_word]!\"}\n",
  "wave": "{{b {}}} {if {$b eq \"\"} {set b [rand 15]}; string repeat \"?.???`?.?\" $b}\n",
  "fnick": "args {set buf \"\"; foreach name [names] { append buf \"$name: $args\\n\"; }; return $buf}\n",
  "catbus_dcc": "{} {stampsay -s catbus [dccc]}\n",
  "someone": "{} {eval [lindex_random [lsubtract [info procs] [lsubtract [info procs] [string tolower [names]]]]]}\n",
  "bots?": "{} {c [llength [intersect [string tolower [names]] [string tolower $::bots]]] bots}\n",
  "backup": "{} {lol \"ERROR! SIGALRM RECEIVED AT[clock format [clock seconds] -format \"%Y:%m:%d:%H:%M:%S\"]\"}\n",
  "birthday": "{} {join [list {           ,   , } {Happy     (*) (*) } {Fucking  / / / / } {Birthday/ / / / } {     __/  )/  )_ } {    |_ ` ` ` ` _| } {   _|_._._._._._|_ } {  |_BLOW OUT YOUR_| } { _|_._._._._._._._|_ } {|_  COCK  CANDLES  _| } {|_._._._._._._._._._| }] \\n}\n",
  "randmeasure10": "{} {return \"[choose [randmeasure] [randmeasure2] [randmeasure3] [randmeasure4] [randmeasure5] [randmeasure6] [randmeasure7] [randmeasure8] [randmeasure9] [randmeasure11] [randmeasure12]]\"}\n",
  "amren2": "{} {unescape_html_entities [lindex_random_ne [regexp -all -inline {<description>(.*?)</description>} [cwget http://www.amren.com/mtnews/index.xml]]]}\n",
  "yahoonews": "{} {set r [list];foreach {m h} [regexp -all -inline {class=topstory>(.*?)<} [wget news.yahoo.com]] {lappend r $h};rows [join $r \\n] 10}\n",
  "shithead": "{} { subst [?? $::shithead_dict] }\n",
  "shoa": "{} {return \"~~~~~~~~~~~~~~~~~~~shoa\"}\n",
  "router": "{} {return \"DCC SCHAT \\\"[upper [random_word]][upper [ethnic_group]]\\\" 0 0 0\"}\n",
  "wtccockjet": "{{stamp cockjet}} {ajoin \"[^C] \" \\n[rain [stampsay -s $stamp [choose {ALLUH ACKBAR} {MASELTOV}]]] \"  \" [building1] \"  \" [building1]}\n",
  "LAFFO": "{} {return \"[biggaybowtext LAFFO\"]\"}\n",
  "rescher": "{} {rainbow \"\\\\[pick 1 {string repeat \"_O/..\\\\\" 10} 1 {string repeat \"_O/--\\\\\" 10}]\\n/[pick 1 {string repeat \"..\\\\_O/\" 10} 1 {string repeat \"--\\\\_O/\" 10}]\\n\\\\[pick 1 {string repeat \"_O/..\\\\\" 10} 1 {string repeat \"_O/--\\\\\" 10}]\\n/[pick 1 {string repeat \"..\\\\_O/\" 10} 1 {string repeat \"--\\\\_O/\" 10}]\"}\n",
  "lzenc": "data { set old \"\"; set dict() 0; set res {}; foreach ch [split $data {}] { if {[info exists dict($old$ch)]} then { append old $ch; } else { lappend res $dict($old) $ch; set dict($old$ch) [array size dict]; set old \"\"; }; }; if {[string length $old]} then { lappend res $dict($old)}; return [join $res \",\"] }\n",
  "kittie": "{} {return \"http://img356.imageshack.us/img356/9342/gooncamp200101sd2.jpg\"}\n",
  "rps_play": "{a b} { third [lindex $::rps [lsearch -glob $::rps \"$a $b*\" ]] }\n",
  "checkbox": "args {let {i {join [zip [lreplace [repeat [llength $args] {. {[ ]}}] $i $i \"\\[[U+2714]\\]\"] $args]}} [rand [llength $args]]}\n",
  "master_stat": "{} { master_print_stat [nick]; }\n",
  "findmp3": "query {set url [last [split [first [lines [strip_all [google -inurl:(htm|html|php) intitle:\"index of\" +\"last modified\" +\"parent directory\" +description +size +(wma|mp3) \"$query\"]]]] { }]]; set out [list]; foreach match [regexp -inline -all {href=\"([^\"]*mp3)\"} [http get $url]] { lappend out [urlescape $url$match] }; join $out \\n}\n",
  "hugegoon": "{} {join [lrange [lines [join [map [lines [STgoon]] {line {apply {ajoin \"\"} [map [split $line {}] {char {if {$char eq \" \"} {sdraw 00000} {bt $char}}}]}}] \"\\n \\n\"]] 4 end] \\n}\n",
  "noisebridge": "{} nb\n",
  "ocdrink": "{} {return \"oclet loves threesomes with [tranny_word] after drinking a lot of [drink]\"}\n",
  "php": "{} {. php\\namespace\\tragedy}\n",
  "gayflagify_reset": "lineheight {\n\tset bg $::gayflag_bg;\n\tset fg $::gayflag_fg;\n\tif {$lineheight > 1} {\n\t\tset bg [apply nzip [times $lineheight $bg]];\n\t\tset fg [apply nzip [times $lineheight $fg]];\n\t};\n\tif {[cache exists next_in_list [sha1 $fg]]} {\n\t\tcache delete next_in_list [sha1 $fg]\n\t};\n\tif {[cache exists next_in_list [sha1 $bg]]} {\n\t\tcache delete next_in_list [sha1 $bg]\n\t};\n}\n",
  "fatkanye": "{} { stampsay -s kanyegoon \"[kanyelyrics], [fatgoonmeal]\" }\n",
  "bzb": "{} {chatquote bzb}\n",
  "inaporn": "{{starlet {}}} {return \"rwxr-xr-x  1 [nick] [nick] 743MB July  4 12:45 [trannies]_[sex_act]_$starlet-XXX-DVD-RIP-xCLIT.avi\"}\n",
  "default": "{a b} { if {$a!=\"\"} { return $a; }; return $b}\n",
  "promote": "{} {lindex_random $::promote_dict}\n",
  "niggerfullname": "{} {. [niggername] [waspsurname]}\n",
  "buttesmenu": "{} {ajoin \"\" [buttesmenusolo] \"\\n\\n[flip [STfullgoon]]\"}\n",
  "â­": "{a b} { expr ${a} - ${b} }\n",
  "christians": "{} {return [lol \"people who think they're religion is superior to everyone else's, and the most close-minded retards to have ever walked the planet.\"]}\n",
  "andrzejize": "url {magick blur [magick noise [magick dissolve $url - .25 .25 6 0]] 1 1}\n",
  "bignugtext": "{{str {}}} {if {$str eq \"\"} {set str [random_word]}; return [bgr 03 $str]}\n",
  "sanchez_herpderp": "args {set out [strip_color [join $args]]; set url [lindex [http post http://cryptosystem.org/projects/twitter/sanchez.cgi twat \"@ricksanchezcnn [strip_all $out]\"] 2]; . [string map {\"\\n\" \"\"} \"$url @ricksanchezcnn: [twitterize $out]\"]}\n",
  "aimniggeronehug": "args { aim -n [aimname $args] [niggerize [onehug]] }\n",
  "fake_mac_feature": "{} {. Mac OS [?? $::next_osx_ver] will have [debian_feature]}\n",
  "delgex:single": "{} {. single!}\n",
  "Justin": "{} {ncock 0}\n",
  "pornamid": "{} {pyramid \" [strip_u [fetish_porn]] \"}\n",
  "nop": "{} { . [pink [nick] is a [faglame]] }\n",
  "vorb": "{} {return \"[color black on black]oooo[color cyan on cyan]oooooo[color white on white]oooo[color cyan on cyan]oooooooo[color white on white]oooo[color cyan on cyan]oo[color black on black]oooo\\n[color black on black]oooo[color cyan on cyan]oooo[color white on white]oooooooo[color cyan on cyan]oooo[color white on white]oooooooo[color black on black]oooo\\n\"}\n",
  "goatsedrink": "{} {return \"<@captain_goatse> when drinking i always confuse [random_word] and [random_word]\"}\n",
  "imanerd": "{} { . i guess i am a nerd. that's why i have [?? $::nerds_have_word] that i do stuff with in my spare time }\n",
  "himoira": "{{who moira_}} {smega {strcat \"<[name]> [greeting] $who, have a [drink]!\"}}\n",
  "10e10": "{} {apply [?? {wet bt bgt bt2 rainbow pink stampsay savagesay pyramid rain pooify gudrize niggerize chinkerize figlet americanize chinkerize colorize lacist columnize corrinize csam_dikkyize csammize nimpify underscoreize gayflagify grapefruitize fullwidth unicode_abuse {image-say [gis [random_word]]} {image-say [pt [random_word]]} }] {\"shut up\"}}\n",
  "puntme3": "{} {. \"*gets angry*\"}\n",
  "aristocrats": "{} {return \"A family goes into an agent's office and the [relative] says, \\\"Have I got a show for you.\\\"\\nFirst, the [relative] starts fingering the [relative]'s [body_part]. Then the [relative] licks the [relative]'s [body_part], causing [fluid] to shoot at the [relative]. It ends with the [relative] [sex_act] everyone.\\n\\\"Wow,\\\" the agent says. \\\"What do you call your act?\\\"\\n\\\"The [adjective] [marginalize]s!\\\"\"}\n",
  "min": "args {inject $args [first $args] {{x o} {expr  $x < $o ? $x : $o}}}\n",
  "9wo": "{} {return \" __\\n/O \\\\\\n\\\\\u001f''\u001f/\"}\n",
  "wget_to_first_h1": "url {regsub {.*<[Hh]1>} [wget $url] {<h1>}}\n",
  "welcometocanada": "{} {return \"WELCOME TO CANADA, [string toupper [lindex_random $::viet_name_dict]] [string toupper [lindex_random $::viet_name_dict]]!  HERE'S YOUR [string toupper [canadian_object]] AND SOME [string toupper [weed]], EH?\"}\n",
  "go:map_board_xywhp": "{gboard f} {set ol [list]; foreach {w h board} [go:whboard $gboard] { for {set y 0} {$y < $h} {incr y} { set o [list]; set row [lindex $board $y]; for {set x 0} {$x < $w} {incr x} { set xv [lindex $row $x]; lappend o [$f $x $y $w $h $xv]; }; lappend ol $o }; return $ol }}\n",
  "STfullcsammis": "{} {embed [ajoin \"\" \"    \" [STcsammis]]\\n[tail 8 [STfullgoon]] Shaim 11 5}\n",
  "almostcolorspew": "{} {return \"\\.aim px0 [spew]\"}\n",
  "aimstinker2": "args {aim -n [aimname $args] \"Can I tinker with your stinker?\"}\n",
  "bloggingonirc": "{} {wget http://whiteflour.net/bloggingonirc.txt}\n",
  "penultimate": "list {lindex $list end-1}\n",
  "heyrichard": "{} {return \"Hey Richard, go [act_word] a [random_word] up your [body_part].  Yours Truly, [lowtax_enemy_word]\"}\n",
  "jerkcity": "{} {regsub -all {\\.(\\W|$)} [string toupper [?? [lines [cwget http://cesspool.net/jerkcity/jerkcity.txt]]]] {\\1}}\n",
  "bfatscale": "{} {join [list {        ^..^} {  _||___(oo)____||_} {  -||---\"--\"----||-  I am bacon} {  _||__( __ )___||_    Fatty} {  -||---\"--\"----||-} {   ||           ||}] \\n}\n",
  "zenwhen": "{} {return \"<@zenwhen> [pick 1 {return \"chmod -R 777 /\"} 1 {return \"visit my website at troymcferrrrrrrrrrrrrrrron.com\"} 1 {return \"*linux\"} 1 {return \"your [shsc_word] is a JOKE\"} 1 {return \"ive shopped at wal-mart my WHOLE LIFE\"} 2 {return \"my ibook will be here soon!!\"} 4 {return \"I [lindex_random {love hate}] [lindex_random {Linux Linxu Lniux macs macosx panthro tigris tigers}].\"}]\"}\n",
  "mandala": "{} {aflip [fastmystery]}\n",
  "engimo2": "{} fml\n",
  "STsaq3": "{} { return \"    _   \\n  _/\\\\),\\n |( Y)\\\\\\n ^ /|  ^\\n  ` `\"; }\n",
  "color_cthulhu": "{} {set body [color green]; set eyes [color white]; string map [list \\$eyes [color white] \\$body [color green]] [join [list {$body  _--------.    } {$body /    ~~~~~~\\   } {$body(_   ~~~$eyes@$body~~$eyes@$body|   } {$body \\   ~~//|\\\\\\  |} {$body  \\   \\|||/\\\\\\_/} {$body  /   /|//_/|/__} {$body /    \\_\\ \\|\\|  }] \\n]}\n",
  "wjw": "{} {wet wow just wow}\n",
  "facebook": "{} { subst [lindex_random $::facebook] }\n",
  "mmacomm": "{} { . \\\"Joe, do you think the champ is hoping to rely on his [mmatech] to retain his belt and possibly finish this fight early?\\\"\\n\\\"Well Mike, his opponent is known for his devastating [mmatech] and [mmatech] and has proven to be able to go the distance in his fight against \\\"[crime]\\\" [niggername] [waspsurname].\\\"}\n",
  "named_mystery": "{{g *}} {set n 1;while {$n>0} {set p [lindex_random [info procs $g]];set n [llength [info args $p]]};catch $p v;set ret [list $p $v];join $ret \\n}\n",
  "sayisrael": "args {set wstring [join [times [expr [string length $args]+7] {}]];  return \"[color blue on blue]$wstring\\n[color blue on white]   $args   \\n[color blue on blue]$wstring\"}\n",
  "mecha": "args {mega $args}\n",
  "hugegaydicks": "{} {upper \"[big_word] [choose GAY JEWISH HOMO HOMOSEXUAL CUCKOLDING] [plural [penis_word]] [choose BASHING SMASHING WHACKING SMUSHING SLAPPING] YOUR [choose MOUTH ASS CUNT EYES EARS URETHRA] AND [choose FACE FORESKIN DICK COCK BUTT BROWN-STAR SLUTHOLE LIPS NOSE EYES EARS SHOULDERS] ([time_word])\"}\n",
  "yahoozee": "{} { if { [expr { rand() }] > 0.5 } { return \"everything is be!\"} else { return \"Moet for everybody!\"} }\n",
  "goondiet": "{} {goonsay [capitalize [food_word]], [subst [string repeat {[food_word], } 9]] and some [food_word]. I did really good yesterday. [mmm] Follow my progress at [failure]!}\n",
  "jewsentation": "{} {return \"I am [jewfullname].\"}\n",
  "macros": "{} {lrange [odd_elm [regexp -all -inline {<A HREF=\"(.*?)\">} [cwget http://buttes.org/macros/]]] 5 end}\n",
  "your": "args {if {$args eq \"mom\"} {return \"my mom\"} {return \"no YOUR [join $args]\"}}\n",
  "nethack:hwall": "{} { return \\342\\224\\200 }\n",
  "!!": "{} {return \"!!!\"}\n",
  "bj_hitme": "{} { if [blackjack_dealt] { return [blackjack_hitme [nick]]; } else {return \"Deal First!\"; }; }\n",
  "hyphenword": "{} {return [hyphenize [random_word]]}\n",
  "dukeku2": "{{str {}}} {return \"[string toupper [rap_word]] [capitalize [rap_word]] [capitalize [rap_word]] GOin DOwnz to [random_word] to see mah boi [hacker [name $str]] CHilln'z shootin off mah [goon_word] at dem [goon_word]z fo sho hmm das it [rap_word]z Smart Ass [capitalize [rap_word]] 2 got a [rand 1600] on mah S.A.T.S\"}\n",
  "populationyuo": "{{cunt {}}} {return \"[name $cunt]: Welcome to [string totitle [string map {\" \" \"\" \"-\" \"\"} [faglame]]][citysuffix], population: yuo\"}\n",
  "furrypeace": "{} {return \"Can't we all get along? *[furry_verb] your [furry_noun], [murrpurr]ing*\"}\n",
  "crw": "{{who {}}} {return \"\u0002Hey [name $who], [channel] is a channel for guys into [color red][string toupper [crw_word]]\u0002\"}\n",
  "STsaq5": "{} { return \"x   _  x  \\n \\\\_/\\\\)/ \\n  ( Y)  \\n   ||  \\n   ``\";}\n",
  "nigger_comic": "{} {niggerize [moira_comic]}\n",
  "youtubesay": "{} {set stamp_name [string map {\"ST\" \"\"} [lindex_random $::small_stamp_dict]]; stampsay -s $stamp_name [youtube_comment]}\n",
  "flood": "{cmd args} {smega [concat $cmd $args] 200}\n",
  "addspaces": "{x y} { set a \" \"; set lines [split $y \"\\n\"]; set n [llength $lines]; set d [expr \"$x - $n\"]; set m [maxstringlength $lines]; set e [string repeat $a $m]; set nlines [padlinesto $m $lines]; set y [join $nlines \"\\n\"]; for {set i 0} {$i < $d} {incr i} { set y  \"$y\\n$e\"; }; return $y; }\n",
  "bigtext2": "str {text char2 $str}\n",
  "makename": "{} {. [choose \"[jewname]\"  \"[niggername]\" \"[muslimname]\" \"[cached_nicklist]\"]}\n",
  "pua_objects": "{} {return [plural [pua_object]]}\n",
  "hy": "args {return [bt HY]}\n",
  "patriotic": "args {set ret \"\"; foreach char [split [strip_all [join $args]] {}] {if {$char eq \" \" || $char eq \"\\n\"} {append ret $char} {if {$char eq \",\"} {set char \",,\"}; append ret \u0003[patriot]$char}}; return $ret}\n",
  "rand_aim": "{} {lindex_random [join [mapx $::aim_dicts x {set ::$x}]]}\n",
  "strip_html": "str {regsub -all {<[A-Za-z/!].*?>} $str {}}\n",
  "fotwenny": "{} {return \"___________________           _-_ \\n \\\\==============_=_/ ____.---'---`---.____ \\n             \\\\_ \\\\    \\\\----._________.----/ \\n               \\\\ \\\\   /  /    `-_-'\\n           __,--`.`-'..'-_\\n          /____          ||  BEEP BEEP RED ALERT FAGGOT SIGHTED OFF OF THE\\n               `--.____,-'   STARBOARD BOW! FO'TWENNY SMOKE WEED EVERYDAY!\"}\n",
  "stamp_suicide": "{} {. [stampsay -s [choose \"bomb\" \"axe\" \"skull\" \"cocksegway\"] [alt_suicide]]}\n",
  "exxxqueue": "{} {return [biggaytext X][rainbow _Q]}\n",
  "slot_stats_net": "who {set spent [slot_stats_spent $who]; set earned [slot_stats_earned $who]; expr {$earned-$spent}}\n",
  "hardchats": "{} {?? [subst \"\\$::[?? [choose $::jax_dict $::zewb_dict $::hardchats]]\"]}\n",
  "stats": "{{who {}}} {if {$who eq \"\"} {set who [lindex_random [names]]}; return \"\\002\\x1f$who's stats\\x1f\\002\\nSkin tone: \\002[expr [rand 100] + 50]% black\\002\\nVocabulary: \\002[rand 200] words\\002\\nInventory: [expr [rand 10] + 2] [choose \"[condition] \" \"\"][blackitem]s, [expr [rand 3] + 2] [choose \"[condition] \" \"\"][blackitem]s, 1 [choose \"[condition] \" \"\"][blackitem][choose \", 1 [blackitem]\" \"\"]\"}\n",
  "magick-scale-composite-top-left": "{url1 url2 {scale 0.5}} { magick_scheme [scale-and-composite-gen $url1 $url2 $scale T L] }\n",
  "nethack:blcorner": "{} { return \\342\\224\\224 }\n",
  "aim911": "args {aim -n [aimname $args] [911]}\n",
  "unknown:nick/psiox/": "args {error \"ginger-like typing detected\"}\n",
  "ful": "{{who {}}} {. <[name $who]> [string range [fml] 0 end-4]}\n",
  "STdrostegoon": "{} { drostegoon; }\n",
  "sa_thread_title": "threadid {if {[set index [sa_thread_index $threadid]] != -1} {return [lindex [sa_thread_titles] $index]} {error \"thread $threadid not found\"}}\n",
  "imamac": "{} {return \"I'm a Mac and I'm into [crw_word]\"}\n",
  "latext_escape": "str {string map {# {\\#} {$} {\\$} % {\\%} & {\\&} ~ {\\~} _ {\\_} ^ {\\^} \\\\ {$\\backslash$} \\{ {\\{} \\} {\\}} < {$<$} > {$>$}} $str}\n",
  "shiver": "str {join [map1 [split $str] powerbook]}\n",
  "summate": "args { foldxo x o 0  $args {expr $x + $o}  }\n",
  "pee3": "{} {ajoin \"\" \\n\\n[ncock 2] [flip [stream 10 2]] [stream 10 4]}\n",
  "berry": "args {gorfsay [rainbow [niggerize [zulu [h]]]]}\n",
  "indianname": "{} {?? $::indiannames}\n",
  "furrysex": "{{who {}}} {return \"[name $who] dresses as a [animal] then starts [sex_act] [animal]s\"}\n",
  "meganames": "{} {return \"\\001ACTION [name]\\001\\n\\001ACTION [name]\\001\\n\\001ACTION [name]\\001\\n\\001ACTION [name]\\001\\n\\001ACTION [name]\\001\"}\n",
  "callers": "{} {if {[info level] < 2} return else {lrange [map [seq [uplevel {info level}] 1] [& info level]] 1 end}}\n",
  "go:getboard": "gb {lindex $gb 3}\n",
  "lastfm:track": "html {lastfm:urlfilter [regsub {^.*_/} [regexp -inline {/music/(?:\\+noredirect/)?[^\"\\/]+/_/[^\"]+} $html] {}]}\n",
  "joker": "args {return \"http://www.youtube.com/watch?v=TCHJoh9ywlM#t=4m06s\"}\n",
  "rawvegan": "{} {?? $::raw_vegan_dict}\n",
  "unknown:1:cmd/^aud?[_-](.*)/": "{matches cmd {index -1}} {. \"â¬âªâ©\" [lindex_random [lines [afetch [last $matches]]] $index] \"â¬âªâ©\"}\n",
  "darrenisgay": "{} { . \"darren is gay\"}\n",
  "gaysop": "{} { return \"dont u fjuckign start\" }\n",
  "voices": "{} { return $::voices}\n",
  "doodoohi": "a1 { set result \"hi there\"; return $result;}\n",
  "alshort": "{} {return \"[al_man_word][al_hat_word]\"}\n",
  "s": "args {string map [list w/e \"s [join $args]\"] [w/e]}\n",
  "block-grade": "percent {set s \"????????\"; set l [string length $s]; string index $s [expr int(($l) * ($percent / 100.1))]  }\n",
  "CamelCase": "args {join [split [capitalize [regsub -all {\\s+} [regsub -all {\\W+} [join $args] { }] { }]]] {}}\n",
  "bgr": "{{col {}} str} {if {$col eq \"\"} {set col [lindex_random {02 03 04 05 06 07 08 09 10 11 12 13 14 15}]}; subst [string map {08 {$col}} [text goldchar $str]]}\n",
  "chicago_politics": "{{name {}}} {string map {\"POP POP U DEAD,\" \"CHICAGO POLITICS\"} [poppop [name $name]]}\n",
  "fagdrag": "{} {smega {string map {\"GAY\" \"FAG\" \"BAR\" \"DRAG\"} [gaybar]}}\n",
  "STsavage": "{} {return \" ^  \u00035,,\u0003\\n |  \u00035 O  b\u0003\\n \u00035o--\u00031,5..\u00035,1''\u0003\\n |  \u00031,5 .\u0003\\n |  \u00033,1TT\u0003\\n |  \u00035||\u0003\"}\n",
  "sn": "args {apply stripnick $args}\n",
  "nicedog": "{} {. [pick 1 {gis dog} 1 {pt dog}] [arcade \"nice dog!\" pabom 6]}\n",
  "theo": "{} {lindex_random $::theo_dict}\n",
  "nanog": "{} {swastisay nanog}\n",
  "yhbt": "{{name {}}} {. [name $name] \"has lost the argument\\; \\\"yhbt,\\\" he quickly backtracks, wiping sweat from his brow.  Phew, he thinks, that was close.\"}\n",
  "moiradrunk": "{{glob *}} {?? [lfilter *$glob* [lines [cwget http://i.conio.net/moiradrunk.txt]]]}\n",
  "you're": "args {return \"no ur\"}\n",
  "frightenpuntme": "{} {return \"puntme: [gis [choose \"rotten peaches\" \"ice immigration\" \"minutemen border\"]]\"}\n",
  "faceman": "{} {return \"[facemansay [lindex_random $::faceman_dict]]\"}\n",
  "violent_act": "{} {return [lindex_random $::violent_act]}\n",
  "lasttroll": "{} {\n\tset html [unescape_html_entities [wget \"http://pipes.yahoo.com/pipes/pipe.run?_id=BLjPToyW3RG5aBferLQIDg&_render=rss\"]]\n\tset titles [regexp -all -inline {<title>(.*?)</title>} $html]\n\tset links [regexp -all -inline {<link>(.*?)</link>} $html]\n\tset link [html [strip_html [lindex $links 3]]]\n\tset title [html [strip_html [lindex $titles 3]]]\n\t. \"$link - $title\"\n}\n",
  "song_front": "{} {return [choose \"\" \"[subst [?? $::song_front_dict]] \"]}\n",
  "roomba": "{} {ffw [b]a robot >8D[b]}\n",
  "saqboast": "{} {goonsay \"I can minimize [saq_skill] and optimize [saq_skill]\"}\n",
  "underscore": "str {string map {- _ { } _} $str}\n",
  "protip": "{} {set list [regexp -all -inline {title=\"(.*?)\".*?<url>(.*?)</url>} [300~http://www.apple.com/pro/tips/tips.xml]]; set i [rand [([llength $list]/3)]]; ajoin \" \" [omg] \\n[b][lindex $list [($i*3+1)]]\\nhttp://www.apple.com[lindex $list [($i*3+2)]]}\n",
  "kmdreal": "{} {chinkerize [kmdeal]}\n",
  "thematixhasu": "{} { mega gudrize \"T E H M A T I X H A S U T E H M A T I X H A S U T E H M A T I X H A S U\" }\n",
  "swinglerwish": "{{who {}}} {. \"<[name $who]> I wish that [swingler_word] didn't [act_word] my [randor [crw_word] [gay_word]]\"}\n",
  "mooch": "{args} {return \"Iâm not $args, Iâm not trying to suck my own cock\" }",
  "engimo": "{} {ajoin \" \" [jew] \\n[engimo_name]}\n",
  "fluoride": "{} {return \"   __ _\\n .'  Y '>,  =()=\\n/ _   _  /'\\\\_||_\\n)(_) (_)( (___  `.\\n{  4A   }\\\\./  `=='\\n \\\\uuuuu/\\\\l     \u00034|||\\n  |    |)/     \u00034|||\\n /nnmmn//      \u00034|||\\n \\\\_>-<_/  NWO\"}\n",
  "iraq_flag": "args {ajoin \"\" [join $args] \u00030,0\u00034âââââââââââ\u00030,1    \u0002ÙÙ ÙÙØ³ Ø°Ø§Ø¦ÙØ© Ø§ÙÙÙØª \\n \u00030,0\u00033ããâãµâã¶âã\u00030,1     \u0002ÙÙ ÙÙ Ø¹ÙÙÙØ§ ÙØ§Ù  \\n \u00030,0\u00031âââââââââââ\u00030,1   DEATH 2 AMERICA! \\n}\n",
  "sex_act": "{} {return [lindex_random $::sex_acts]}\n",
  "comic-pane-gen": "{img {border 10}} { return \"\n(let ((i (image \\\"[scheme_escape $img]\\\"))\n      (w (width i))\n      (h (height i))\n      (white (resize (image http://cryptosystem.org/images/sa/spacewhite.png) w h))\n      (black (resize (image http://churchturing.org/x/1blackpixel.png) (+ w (* 2 $border)) (+ h (* 2 $border)))))\n     (composite black (composite white i 0 0) $border $border))\"}\n",
  "myxb": "{} {gis scion xb}\n",
  "image-double-fu": "img {  image-fu-right [image-fu $img] }\n",
  "fux": "{} {return \"tcl giga spew\\ntcl fux\"}\n",
  "master_get_miss": "{i a b c d} { return [expr ![master_np_match $i $a] + ![master_np_match $i $b] + ![master_np_match $i $c] + ![master_np_match $i $d]] }\n",
  "reject": "{list block} {\n  set result [list]\n  foreach value $list {\n    if [false? [yield $value]] {\n      lappend result $value\n    }\n  }\n  return $result\n}\n",
  "aimrequest": "args {return \"[aim -n [aimname $args] Please [request]]\"}\n",
  "pervert": "{} {return \"[lindex_random $::pervprefix]phile\"}\n",
  "urdad": "{} {bt urdad}\n",
  "buttrix": "{} {. [macro buttrix]\\n Neo was really [nicklist]}\n",
  "seamen": "{a b} { set c1 [rand_color]; set c2 [rand_color]; set c3 [rand_color]; set c4 [rand_color]; set dick \"\"; set semen \"\"; for {set i 0} {$i < $a} { incr i 1} { set dick  \"$dick=\" }; for {set i 0} {$i < $b} { incr i 1} { set semen  \"$semen~\" }; return \"${c1}(_)_)${c2}${dick}${c3}D${c4}${semen}\"; }\n",
  "jive": "s {niggerize $s}\n",
  "honeypot": "{} {. \\1DCC\\1}\n",
  "zap": "{} {return [fsj zap]}\n",
  "deca": "{cmd args} {smega \"$cmd $args\"}\n",
  "someart": "{} {aflip [randart 20 20 20]}",
  "bonercrying": "{} {return $::bonercry_macro}\n",
  "private_to": "args {if [apply {== -1} [map $args {caller {lsearch -exact [map [uplevel callers] [& first]] $caller}}]] {error \"private proc \\\"[first [first [uplevel caller]]]\\\" called\"}}\n",
  "days_since_imac_update": "{} {curse_you_steve iMac}\n",
  "gaybuttrix": "{} {. [gayflagify [macro buttrix]]}\n",
  "STcloud": "{} { join {{  ,--. ,-.   } { (    `   ). } {('   ,   ,  ;} {`---'...-'--'}} \\n }\n",
  "âÌÌÌÌÌÌÌÌÌÌÌÌÌÌÌÌÌÌÌÌÌ§Ì¦Ì¥Ì¤Ì£Ì¢Ì¡Ì ÌÌÌÌÌÌÌÌÌÌÌÌÌ¿Ì¾Ì½ÌªÌ«Ì­Ì¯Ì±Ì³Ì´Ì¶Ì·Ì¹ÌºÌ»âÌÌÌÌÌÌÌÌÌÌÌÌÌÌÌÌÌÌÌÌÌ§Ì¦Ì¥Ì¤Ì£Ì¢Ì¡Ì ÌÌÌÌÌÌÌÌÌÌÌÌÌ¿Ì¾Ì½ÌªÌ«Ì­Ì¯Ì±Ì³Ì´Ì¶Ì·Ì¹ÌºÌ»âÌÌÌÌÌÌÌÌÌÌÌÌÌÌÌÌÌÌÌÌÌ§Ì¦Ì¥Ì¤Ì£Ì¢Ì¡Ì ÌÌÌÌÌÌÌÌÌÌÌ": "{} { crash }\n",
  "fathead_chins_say": "args { ajoin \" \" [fathead_chins [rand 9]] \"\\n\\/\\n\" [hardwrap [join $args \" \"] 30] }\n",
  "w/e2": "oh {. [uchar 2510 28 27 ff5e 60 ff1b 29 250c 20]$oh}\n",
  "youtubemnd": "{} { buttemnd [new_youtube_comment] [cadr [randtag]] [audiotube http://www.youtube.com/watch?v=[?? [top_youtube_id]]] }\n",
  "bigcolormooninite": "{} { string map [list 0 \"[color 1 1]  \"  1 \"[color 0 3]  \" 2 \"[color 0 2]  \"]    $::colormooninite }\n",
  "rndtcl_identifier": "{} {regsub -all {[\\s-]} [random_word] _}\n",
  "irony": "{} {return \"<hello> weasel: that wasn't much of a troll, ace\"}\n",
  "populist": "{} {return \"\\\"There are a lot of \\'rights\\' that [political_word] judges like read into the constitution, such as the \\'right of [plural [marginalize]] to [freedom_word],\\'\\\" [political_figure] told a gathered crowd of about [rand 10 +1],000 at [charity].\"}\n",
  "truck nuts": "{} {. DEEZ NUTS}\n",
  "bonzo_sings": "{} {?? $::bonzo_lyrics}\n",
  "liberalagenda": "{{n 5}} {eval [string map {gayagenda: liberalagenda: GAY LIBERAL} [info body gayagenda]] }\n",
  "spokker": "{} {rainbow \"Who cares anymore? It's going to get to the point where having a little spyware on your computer is going to be\u0002a lot better than wasting your time trying to get rid of it all, or trying not to get it at all.\"}\n",
  "chrisrock": "{} {return \"WHITE PEOPLE: \\\"[resist]\\\"\\nBLACK PEOPLE: \\\"[niggerphrase]\\\"\"}\n",
  "chins": "{{n 0}} {if {$n < 0} {set n 0}; if {$n > 17} {set n 17}; if {$n == 0} {return [STgoon]}; set lines [lines [STgoon]]; set chin [lindex $lines 2]; lremove lines 2; lappend lines [regsub -all _ $chin \" \"]; while {[incr n -1]} {lappend lines [regsub -all {[_O]} $chin \" \"]}; lappend lines [regsub -all O $chin _]; join $lines \\n}\n",
  "master_get_notperfect": "{i a b c d} { return [expr [master_np_match $i $a] + [master_np_match $i $b] + [master_np_match $i $c] + [master_np_match $i $d]]; }\n",
  "rainapple": "{} {rainbow [apple]}\n",
  "acroadd": "{c str} {if {[lsearch -exact \"add del list clear\" $c] > -1} {return \"error: Illegal name\"} {lappend ::acronym($c) $str;expr [llength $::acronym($c)]-1}}\n",
  "welcome": "args {\n    set i [lsearch -exact $args to]\n    set w [bgbt to [channel]]\n    if {$args eq \"\"} {\n        set n [bgbt [name]]\n    } elseif {$i == -1} {\n        set n [bgbt [join $args]]\n    } else {\n        set n [bgbt [join [lrange $args 0 [expr $i-1]]]]\n        set w [bgbt to [join [lrange $args [expr $i+1] end]]]\n    }   \n    return [join [list $n [bgbt welcome] $w] \"\\n \\n\"]\n}\n",
  "happy_sam": "{} {return \"<sam> tcl proc [rndtcl_identifier] \\{[repeat [rand 4] {rndtcl_identifier}]\\} \\{[rndtcl_program]\\}\"}\n",
  "badjective": "{} {lindex_random $::badjectives}\n",
  "weaselize": "str {set ret \"\"; foreach w [split $str] {append ret \"$w \"; switch [rand 4] {0 {append ret \"dook, \"}}}; append ret \" DOOK!!\"; return $ret}\n",
  "blogentry:words2": "{} { lindex_random $::blogentrywords2 }\n",
  "blackgirl": "{} {set girl [niggerwoman];set salt [lindex_random {ebony black}]; . $girl ($salt): [gis $salt $girl]}\n",
  "rorschach_test": "args { if [llength $args] { return [stampsay -s doctor2 [subst [??  $::rorschach_response]]];  } {return \"[img-rorschach]\\n[stampsay -s doctor2 What do you see?]\";}}\n",
  "jumm": "{} {. <moira> [moiradrunk]\\n<moira> jumm}\n",
  "wispurs": "{} {stampsay -s horse2 [lindex_random $::wispurs_dict]}\n",
  "ultra767": "{} {draw {}\n\n}\n",
  "unknown:2:cmd/^s/((?:\\\\.|[^/])*)/((?:\\\\.|[^/])*)/g$/": "{matches cmd args} {regsub -all [lindex $matches end-1] [or [join $args] [format_log_line [lindex [[nick]log] end-1]]] [last $matches]}\n",
  "STnegroelf": "{} { join [list {   __ } \"  / _\\\\\" { / /  } {/__\\  } {/..\\  } {\\_O/  } ] \\n }\n",
  "smallokey": "{} { return \"[color blue]Small Okey[color] [color red][ok_cast][color]!\"}\n",
  "define": "args {set word [join $args +];set html [cwget http://www.dict.org/bin/Dict?Form=Dict2&Database=wn&Query=$word];html [strip_html [lindex [regexp -inline {<pre>\\s*(.+?)\\s*</pre>} $html] 1]]}\n",
  "deverb": "args {regsub {(s|(ing))$} [join $args] {}}\n",
  "aempirei": "{{who {}}} { strip_color [stampsay -s omgComp \"hey [name $who] u wanna suck some dicks, er i mean get hy?\"] }\n",
  "augh": "{{who {}}} {return \"<[name $who]> [rands [+ 6[rand 5]]]\"}\n",
  "speedline_maybe": "{} {choose { } [speedline]}\n",
  "oyh": "{{who {}}} {return \"JOKE--->\\n[omg]\\nCONGRADULATION THE JOKE WENT OVER YOUR HEAD [string toupper [name $who]]\"}\n",
  "hurfle": "{} {pick 1 {rands [expr {int(rand()*30)+1}]} 1 penisbird}\n",
  "lastimg": "{} {stripnick [format_log_line [lindex [lgrepi {\\.(gif|jpg|png)$} [log]] end]]}\n",
  "fundamentalist_christian": "{} {lindex_random $::fundie_dict}\n",
  "more": "block {set key [sha1 $block];  if ![cache exists scrolliez $key] { cache put scrolliez $key [lines [uplevel #0 $block]];}; set v [cache get scrolliez $key]; set len [llength $v]; if {$len < 20} { cache delete scrolliez $key; return [join $v \\n] } { cache put scrolliez $key [lrange $v 20 end]; return [join [lrange $v 0 19] \\n]}}\n",
  "dicktopwise": "n {return \"[string repeat \"\\n\" [expr 5 - $n]][ncock $n]\"}\n",
  "muslimname": "{} {return \"[muslim_firstname] [muslim_firstname] [choose abd- al- el- ibn-][muslim_firstname]\"}\n",
  "engimocaps": "{} abezcaps\n",
  "island": "{} { return \"If you were stranded on an island and could only take one thing, would it be a [strip_s [goon_word]] [strip_s [goon_word]] or a sack of [strip_u [fetish_porn]] ?\" }\n",
  "catsay": "args {ajoin \"\" [wrap [join $args] 50] \"\\n\\\\\" [STkitty]}\n",
  "tee": "{} {rain \"TRANS\\nEUROPE\\nEXPRESS\"}\n",
  "heathers": "args { set args [getnuniq 3 name $args]; . [lindex $args 0]: I rarely listen to neanderthals like [lindex $args 1], but he said that he and [lindex $args 2] had a nice little [deverb [crw_word]] in your mouth last night.}\n",
  "unknown:1:cmd/^hi(.*)/": "{matches cmd args} {ajoin \" \" [vflip [cswas]] \"\\n\\n[bt hi [last $matches]]\" [vflip [cswas]]}\n",
  "STshoe6": "{} {join     {{  ,---.           } { / \\   '.         } {|   '.--'\\        } {\\     \\   '._     } {| |`'. \\     '-.  } {| |   \\ '-------\\ } {)_(    '._______/ }} \\n}\n",
  "moira3": "{} {ajoin \"  \" [bottle] \\n[wrap [moira] 35]}\n",
  "goonblade": "{} {. http://i.buttes.org/http://img442.imageshack.us/img442/4609/imageqdeexkzx4.gif}\n",
  "mccain_quote": "{} {pick 2 {return \"[bold][color white on blue] FOOTSOLDIER IN THE REAGAN REVOLUTION\" } 1 {return \"[bold][color black on red] I WAS SENATOR OF A BORDER STATE\"} 1 {return \"[bold][color white on red] I WAS SENATOR OF A BORDER STATE (ON 9/11)\"} 1 {. \"[bold][color red on black]AT LEAST I DON'T PLASTER ON THE MAKEUP LIKE A TROLLOP, YOU CUNT\"}}\n",
  "pozcum": "{} { return \"~+ ~+ ~+ ~+ ~+ ~+ ~+ ~+ ~+ ~+ ~+ ~+ ~+ ~+ ~+ ~+ ~+ ~+ ~+ ~+ ~+ ~+ ~+ ~+ ~+ ~+ ~+ ~+ ~+ ~+ ~+ ~+ ~+ ~+ ~+ ~+ ~+ ~+ ~+ ~+ ~+ ~+ ~+ ~+ ~+ ~+ ~+ ~+ ~+ ~+ ~+ ~+ ~+ ~+ ~+ ~+ ~+ ~+ ~+ ~+ ~+ ~+ ~+ ~+ ~+\" }\n",
  "test_proc1": "{} {catch { error \"faggots\" } ret; return $ret }\n",
  "blackjack_winning": "p { return  [expr 2*[blackjack_get_bid $p]]; }\n",
  "bonzo_stock": "{} {. [rand 1 5].[rand 10 99]: [color red on white]-[rand 50 99].[rand 10 99] (-[rand 10 99].[rand 10 99]%) [color blue on white][?? $::bonzo_stocks]}\n",
  "rollgarfield": "garfield {set roll [choose 0 400 203]; magick roll $garfield $roll 0}\n",
  "nwo": "{} {return \"Today on the Alex Jones Show: \u0002\u000305[nwo_word]\u000f exposed!\"}\n",
  "tcc_test": "{} {string map {\u000309 \u000303} [tcc]}\n",
  "nickisafaggot": "{} {. MORE LIKE NICK IS A FAILURE}\n",
  "report": "{} {return \"the [jewsurname] report (link not activated) shows that [eval rand 100]% of [ethnic_group] are subversives and pedophiles\"}\n",
  "random_caption": "{} {caption [gis [random_word]] \"Fig 1. [string totitle [random_word]]\"}\n",
  "avatar-think-flip": "{avatar text {orient L}} {\n\tmagick_scheme [gen-avatar-say-code $avatar $text $orient  http://churchturing.org/x/thoughtballoonR.png ]\n}\n",
  "pc_ad": "{} {smega {. [imapc] <[microsoft_programmer_email_address]>} 5}\n",
  "scienowock": "{} {return \"'Twas [scienoword], and the [scienoword] [scienoword] did [scienoword] and [scienoword] in the [scienoword];\\n All [scienoword] were the [scienoword] and the [scienoword] [scienoword] [scienoword].\\n Beware the [niggerword], my son! The [plural [body_part]] that bite, the [plural [body_part]] that catch!\\n Beware the [scienoword] [animal_word], and shun the [scienoword] [scienoword]!\"}\n",
  "asanexecutivewoulddo": "args {string tolower [regsub { \\(LIKE A B(AW|O)SS\\)$} [apply likeaboss $args]  \" (as an executive would do)\"]}\n",
  "samplot": "{} {. [willplot]}\n",
  "slot_stats_played": "who {if ![info exists ::slot_stats(played,$who)] {set ::slot_stats(played,$who) 0}; return $::slot_stats(played,$who)}\n",
  "gayliljon": "{} {string map {LOW DICK BITCHES FAGGOTS SKEET RAPE SOCK RIM} [gudrize [liljon]]}\n",
  "twobyeightmouth": "{} {join [?? $::twobyeightmouthes] \\n}\n",
  "qwantzify": "cmd {qwantzgen [list next_in_list [compact [split [join [repeat 5 $cmd]] ,.?!]]]}\n",
  "STbsd": "{} {return \"  (-.)  \\n  cc )  \\n3-n-(   \\n _(|/`->\"}\n",
  "STpolehead": "{} {join {{  ______   } { |      |  } {/        \\ } {\\________/ }} \\n}\n",
  "randomoverlay": "url {magick_overlay $url [?? $::overlays]}\n",
  "dickputer": "{} { string map {{O/ |} {C==8} {OH WOW} {mffmfmfmmfmmf} {LET ME IN} {YOU CANT TALK} {ON THIS} {WITH A DICK IN YOUR MOUTH}} [lmiot mmmffmmfmmmf] }\n",
  "go:set": "{gboard x y color} {go:assertboard $gboard; foreach {w h board} [go:whboard $gboard] { return [go:newboard $w $h [lreplace $board $y $y [lreplace [lindex $board $y]  $x $x $color]]]}}\n",
  "make.conf": "{} {return \"USE=\\\"[use_flag]\\\"\\nGENTOO_MIRRORS=\\\"http://[rap_word].sourceforge.net/pub/Linux/distributions/gentoo\\\"\"}\n",
  "crappy_restaurant": "{} {?? $::crappy_restaurant_dict}\n",
  "wet2": "args {set str [strip_all [join $args]]; if {[string length $str] > 1400} {error \"too long, spic\"}; set prefixes [list \\n {} \\n \\n\\n]; set args [list]; set i 0; foreach c [split $str {}] {if {$c eq \" \"} {lappend args \"    \"} {lappend args [lindex $prefixes [expr {$i % 4}]][et $c]; incr i}}; eval [concat [list ajoin \" \"] $args]}\n",
  "threads": "forumid {set html [wget http://forums.somethingawful.com/forumdisplay.php?forumid=$forumid]; set ret [list]; foreach {match title} [regexp -all -inline {<a class=\"thread\"[^>]+>([^<]+)</a>} $html] {lappend ret $title}; return $ret}\n",
  "uchar": "args { set rets [list]; foreach i $args {lappend rets [unichar_hex $i]}; join $rets \"\" }\n",
  "list_crappy_restaurant": "{} { format \"%d. %s\" [expr {int(rand()*59)+1}] [crappy_restaurant] }\n",
  "name_or_other": "{{name {}}} {if {$name eq \"\"} { return [name]} {return $name}}\n",
  "skroob": "{} {return \"are you new here?\"}\n",
  "selfmodder": "{{who {}}} {array set ::lulzscores{$who} [list $who [concat [expr [last [array get ::lulzscores{$who}]]-10]]]; return \"$who \\[-10\\] Self-Modding\"}\n",
  "personalattack": "{{who {}}} {return \"[omg] hey, [name $who]! Your [body_part] is more [colour] than a [faglame]'s [unplural [seinfeld_word]]!\"}\n",
  "STbambi": "{} { subst $::dukekusmess }\n",
  "lmaoname": "{} {return \"[capitalize [viet_name]] [capitalize [viet_name]] [alshort]\"}\n",
  "wow_raid": "{} {lindex_random $::wow_raid}\n",
  "r1ch": "{{who notR1CH}} {return \"([clock format [clock seconds] -format \"%H:%M:%S\"]) $who: [lindex_random $::r1ch_line]\"}\n",
  "warhol_stamp": "args {set stamp [default $args [lindex_random [stamps]]]; ajoin \"[bold]\" \"[warhol_colorize $stamp]\\n[warhol_colorize $stamp]\" \"[warhol_colorize $stamp]\\n[warhol_colorize $stamp]\"}\n",
  "puanec": "{} {return [p_a]}\n",
  "tld": "{} {lindex_random $::tlds}\n",
  "oldtwat": "{user old} { unescape_html_entities [html [lindex [regsub -all {&amp;} [regexp -inline {<text>(.*?)</text>} [wget http://twitter.com/statuses/user_timeline/[twatname  $user].xml?count=$old]] &] 1]] }\n",
  "I:": "{} {:I I:}\n",
  "islam_word": "{} {lindex_random $::islam_dict}\n",
  "quiet_drudge": "args { http post http://drudgereport.com/cgi-bin/fastfeedback.cgi Send SUBMIT body [join $args]; return \"MESSAGE RECEIVED... WILL CONSIDER AND INVESTIGATE...\";}\n",
  "andrzej_inlaws": "{} {return {<andrzej> I just got a holiday card from my girlfriend's parents. It said \"For Andrzej in 2009: Stop fucking our jewish daughter you nazi-sympathizer.\"}}\n",
  "fatinsult": "{{who {}}} {return \"[fathead [expr {[rand 16]+1}]] hey, [name $who]! you [faglame] [regsub -nocase {s$} [ethnic_group] {}]!\"}\n",
  "isprime": "{63827638736876871} {\n    expr {$x&gt;1 && ![regexp {^(oo+?)\\1+$} [string repeat o $x]]}\n}",
  "t12": "args {return \"<t12> I'm going to ROCCOS <t12> I'm filling myself with $args\"}\n",
  "waron": "{} {return [http://pastebin.com/pastebin.php?dl=f3eea77d6]}\n",
  "darren5": "{} {return {darren is still your fag}}\n",
  "kana": "{} {bgbt \"3 inch clit\"}\n",
  "samecoffee?": "args {wet [choose ok sure maybe  no]}\n",
  "nad": "{} {1/CCD1/ .}\n",
  "nethackrandom": "{} {lindex_random [lrange $::nethacksymbols 1 [llength $::nethacksymbols]]}\n",
  "wall": "{} {return \"\\\\_o/..\\\\_o/..\\\\_o/..\\\\_o/..\\\\_o/..\\\\_o/..\\\\_o/..\\\\_o/..\\\\_o/..\\\\_o/..\\\\_o/..\\\\_o/..\\\\_o/..\\\\\\n/..\\\\_o/..\\\\_o/..\\\\_o/..\\\\_o/..\\\\_o/..\\\\_o/..\\\\_o/..\\\\_o/..\\\\_o/..\\\\_o/..\\\\_o/..\\\\_o/..\\\\_o/\"}\n",
  "einbutan": "{} {return \"[volks?]\\n \\n[reichs]\\n \\n[butans?]\"}\n",
  "trickengimortreat": "{} {return \"[color orange on black]You knocked on the door and got some [engimize [name]]!\"}\n",
  "aimf_randmeasure": "args {aimify randmeasure $args}\n",
  "cthulhu_say": "args {. [color_cthulhu]\\n\\nCthulhu says:\\n[wrap [join_on_more $args] 42]}\n",
  "colours": "args {return \"[lol error, british douchebag detected]\"}\n",
  "aimbittorrent": "{{name {}}} {aim -n [aimname $name] [bittorrent]}\n",
  "kern": "{{spacing 1} args} {join [split [join $args] {}] [string repeat \" \" $spacing]}\n",
  "asqandrzej": "args {stampsay -s andrzej [eval \"urbanquote $args\"]}\n",
  "smns": "{} {lasttwat ShitNiggersSay}\n",
  "fatter": "{} {embed [embed [fart 20000503.html] [STgoon] 9 5] [flip [STgoon]] 30 6}\n",
  "lowtax_tantrum": "{} {next_in_list {\"DONT FUCKING DRINK IT\" \"DONT FUCKING BUY IT\" \"DONT FUCKING CLICK MY LINKS\"}}\n",
  "mensa": "{} {fedoragoonsay \"With an IQ of 166, and a 1580 SAT score (the older one, not the revised one), I found myself bored to death speaking with normal people about anything. Metaphysics, quantum mechanics and molecular diversity are things that really interest me, and your average person just cannot comprehend what these are, let alone the intricate scientific theories behind them.\"}\n",
  "rocketcatsay": "args {ajoin \" \" [rocketcat] \"\\n/\\n\" [wrap [join $args \" \"] 40]}\n",
  "figfonts": "{} {join [map [split [wrap [split [figlet_fonts]] 80] \\n] {line {. [center $line 80]}}] \\n}\n",
  "STwtc": "{} {return \"+--++\\n|  ||\\n|  ||\\n|  ||\\n|  ||\"; }\n",
  "hello_crw": "{} {return \"<@hello> sometimes [crw_word] is kinda cool\"}\n",
  "website_line": "{} {rand_webpage_line [cwget http://random.yahoo.com/bin/ryl]}\n",
  "gamer_phrase": "{} gamerphrase\n",
  "STgirlgoon": "{} { string map [list O [color red]8[color] \\[ ( \\] ) __________ ___[color fuchsia](>o<)[color]__] [STgoon]}\n",
  "niggerlike": "{} {lindex_random $::niggerlikes}\n",
  "fact": "args celebslander\n",
  "puÃ±tme": "{} {return \"you mean puntme\"}\n",
  "test_count_nicks": "mask { set mask [string tolower [regsub {s?\\?$} $mask \"\"]]; set count [llength [lfilter *$mask* [string tolower [names]]]]; if {$count == 1} {return \"${count} ${mask}\" } else {if {$count == 0} {return xero\\ ${mask}s} {return \"${count} ${mask}s\" }} }\n",
  "STcsammisR": "{} { join {{  ___  } { / ..\\ } {(  )o()} { \\___/ }} \\n }\n",
  "color_n": "n {return \"\\003$n\"}\n",
  "utoh": "str {return [regsub -all _ $str {-}]}\n",
  "delegate": "args {set args [car $args]; set l [llength $args]; if {$l < 2} { return [delegate:single [car $args]] } { return [delegate:multiple $args] }}\n",
  "gaydar:placename": "{canvas nick} { set xy [gaydar:randomlocation]; embed $canvas [gaydar:name $nick] [car $xy] [cadr $xy] }\n",
  "drug": "{} {lindex_random $::drug_dict}\n",
  "Âµb": "{} img-nanoblake\n",
  "~~~~~~~~~~~~~~~~~~~shoa": "{} {return \"~~~~~~~~~~~~~~~~~~~shoa\"}\n",
  "raydar": "{{nick {}}} {rainbow [gaydar:placename [gaydar:scope] $nick]}\n",
  "cache_get_default": "{name key default} {if [cache exists $name $key] { return [cache get $name $key] } { return $default } }\n",
  "ubuntuuser": "{} {return [zulu [debianuser]]}\n",
  "testpattern": "{} {cdraw [concat [times 8 {s s s s s y y y y y c c c c c gre gre gre gre gre f f f f f r r r r r blu blu blu blu blu}] {{blu blu blu blu blu bla bla bla bla bla f f f f f bla bla bla bla bla c c c c c bla bla bla bla bla s s s s s}} [times 3 {n n n n n n w w w w w w v v v v v v b b b b b b b gra gra s s b b b b b b}]]}\n",
  "dikkyize2": "args {string map $::dikkyizedict [join $args]}\n",
  "Ok": "{} {rainb [okeysay useless use of Ok detected]}\n",
  "caatpl": "{} {catback [stock AAPL]}\n",
  "poot": "{} {. you pot'd :D \\neveryday: 420}\n",
  "levelup": "{{who {}}} {. \"   [b]CONGRATURATION[b]\\n[center [string toupper $who] 18]\\nYOU HAVE BRAVE MANY TCL\\n   AND FOUGHT WELL\\n     LEVEL UP [uchar ff01 ff01]\"}\n",
  "randname": "{{who {}}} {join [map [split [name $who] {}] {c {. [regsub {^(.)} [capitalize [lindex_random $::randacro([string tolower $c])]] \"\\002\\\\1\\002\"]}}] \" \"}\n",
  "chinkerize": "args {string map $::chinkmap [join $args]}\n",
  "stool": "{} {return \"[stoolchart]\"}\n",
  "uo": "{} {string repeat oO [rand 320]}\n",
  "drink_pyramid": "{} {. \" if this is   /\\\\             \\n\" \" beer put   /  \\\\            \\n\" \" this at   /ETHA\\\\           \\n\" \" the base / NOL  \\\\          \\n\" \"         /________\\\\         \\n\" \"        /     | COF\\\\        \\n\" \"pick 1 /  TEA | FEE \\\\       \\n\" \"      /_______|______\\\\      \\n\" \"pick /        |       \\\\     \\n\" \" 1  /  DAIRY  |  SOY   \\\\    \\n\" \"   /__________|_________\\\\   \\n\" \"  /                      \\\\  \\n\" \" /        WATER           \\\\ \\n\" \"/__________________________\\\\\\n\"}\n",
  "shoopdawhoop": "{} {return {       \u000301,01.   , \u000f        \n      \u000301,01 \u000300,00     \u000301,01 \u000f           \u000301,01      \u000f\n     \u000301,01.\u000300,00  \u000301,01rB\u000300,00   \u000301,01 \u000f         \u000301,01 \u000300,00      \u000301,01 \u000f\n    \u000301,01 \u000300,00        \u000301,01 \u000f        \u000301,01 \u000300,00       \u000301,01 \u000f\n     \u000301,01.\u000300,00      \u000301,01 \u000f         \u000301,01,\u000300,00   \u000301,01.X\u000300,00  \u000301,01 \u000f\n     \u000304,04.Xi ..,X,i:.     .  \u000300,00    \u000301,01 \u000f\n    \u000304,04:XXXX:iX7XSSS27:,...      \n   \u000304,04,X7\u000300,00            \u000304,04;XXXSaaaaS,\u000f \n   \u000304,04r7;\u000300,00     ,               \u000304,04XX\u000f\n   \u000304,04;7:\u000300,00    \u000301,01MMMMMMMMMX;\u000300,00      \u000304,04XX\u000f \n   \u000304,04rX\u000300,00    \u000301,01MMMMMMMMMMMMMM\u000300,00    \u000304,04XX\u000f \n  \u000304,04;l7,\u000300,00  \u000301,01MMMMMMMMMMMMMMi\u000300,00   \u000304,04X7X\u000f \n  \u000304,04.;lX\u000300,00 \u000301,01SMMMMMMMMMMMMM;\u000300,00    \u000304,0477;\u000f \n   \u000304,04.;7\u000301,01MMMMMMMMMMMMMMMM\u000300,00   \u000304,047rr\u000f  \n  \u000304,04lr;:\u000301,01MMMMMMMMMMMMMMMMMMM\u000304,04S;r\u000f  \n  \u000304,04:l7,\u000301,01MMMMMMMMMMMMMMMMMMM\u000304,04ii\u000f   \n  \u000304,04,lr.\u000301,01MMMMMMMMMMMMMMMMMMM\u000304,04.,\u000f   \n   \u000304,04ii.\u000301,01MMMMMMMMMMMMMMMMMMM\u000304,04,,\u000f \n   \u000304,04ii.\u000301,01MMMMMMMMMMMMMMMMMM\u000304,04;:,\u000f   \n   \u000304,04ii.\u000301,01MMMMMMMMMMMMMMMMMM\u000304,04ii\u000f    \n   \u000304,04,; \u000301,01;MMMMMMMMMMMMMMMMMM\u000304,04i:\u000f  \n   \u000304,04,;,.\u000300,00  \u000301,01MMMMMMMMMMMMMM;M\u000304,04rX\u000f   \n   \u000304,04.7i:\u000300,00   \u000301,01M\u000305,05:::kkl:\u000301,01MMMM    \u000304,04X.\u000f  \n    \u000304,04irrr\u000300,00   \u000305,057i:\u000301,01.,M\u000305,05    \u000301,01,M   \u000304,04;;\u000f\n     \u000304,04;777\u000300,00   \u000305,05XXli\u000301,01;;\u000305,05M:i;XM\u000300,00   \u000304,04X,\u000f \n      \u000304,04i7rr\u000300,00   \u000305,05l7l7\u000301,01;\u000305,05M77X7M,\u000300,00  \u000304,04.S\u000f \n       \u000304,0477Xi\u000300,00   \u000305,057;.   \u000305,05:.,\u000300,00    \u000304,04 S,\u000f\n        \u000304,04,i7SXX7r;\u000300,00         \u000304,04iXX\u000f \n              \u000304,04,i;jj;;;;;;i:.\u000f  \n}}\n",
  "victim": "{} {lindex_random $::victim_dict}\n",
  "jarlink": "{} {lindex_random $::jarlinks}\n",
  "redir": "args {return \".redir [map1 $args stripcolon]\"}\n",
  "Raz": "{} {return \"you mean azz\"}\n",
  "hel-loh": "{} {. Annyong.}\n",
  "standtall": "{{who {}}} {return \"[rainbow [name $who]:] http://www.youtube.com/watch?v=eAaQNACwaLw#t=110m38s\"}\n",
  "fm_station_name": "{} {. [?? {K W}][?? [seq A Z]][?? [seq A Z]][?? [seq A Z]]}\n",
  "thinkaboutit": "{{who {}}} {return \"[lindex_random $::fundie_phrases] [choose \"THINK ABOUT IT\" \"Check MATE\"], [name $who]\"}\n",
  "slashpoll_title": "html {string range [html [lindex [regexp -inline {<INPUT TYPE=\\\"hidden\\\" NAME=\\\"section\\\" VALUE=\\\"mainpage\\\">(.*?)<BR>} $html] 1]] 1 end}\n",
  "lawfirm": "{} {return \"[surname], [surname], and [surname], [lindex_random {PLC PLLC LLP {Attorneys At Law}}]\"}\n",
  "albotsubmitdrudge": "{} {submitdrudge [albot]}\n",
  "ultra911": "{} {draw {0000001110000000000000000000000000000000111111110000011111111 0000000111100000000000000000000000000000111111110000011111111 0000000011111000000000000000000000000000111111110000011111111 0000000001111100000000000000000000000000111111110000011111111 0000000000111111000000000000000000000000111111110000011111111 1110000000011111111100000000000000000000111111110000011111111 0111100000001111111100000000000000000000111111110000011111111 0011110000000111111000000000000000000000111111110000011111111 0111111111111111111111111111111000000000111111110000011111111 1111111111111111111111111111111110000000111111110000011111111 0111111111111111111111111111111000000000111111110000011111111 0011110000000111111000000000000000000000111111110000011111111 0111100000001111111100000000000000000000111111110000011111111 1110000000011111111100000000000000000000111111110000011111111 0000000000111111000000000000000000000000111111110000011111111 0000000001111100000000000000000000000000111111110000011111111 0000000011111000000000000000000000000000111111110000011111111 0000000111100000000000000000000000000000111111110000011111111 0000001110000000000000000000000000000000111111110000011111111}\n\n}\n",
  "ultralump": "{{name {}}} {join [map $::ultralump {n {apply $n [name $name]}}] \"\\n\"}\n",
  "onnotice": "args {if {[llength $args] > 0} {onnotice:push [join $args \" \"]}; . \"http://www.shipbrook.com.nyud.net/onnotice/[html [strip_html [lindex [regexp -all -inline {<img src=\"(OnNotice.php\\?id=\\d*)\"} [onnotice:post]] 1]]]#.jpg\"}\n",
  "civguy": "{} {. \"           ooooooM                             \\n       ooMMMMMMMMMMMMo                         \\n     oMMMMMMMMMMMM\\\"MMMMo                       \\n    oMMMMMMMMM\\\"\\\"\\\"  \\\"\\\"\\\"MMMo                     \\n   oMMMMM  \\\"         \\\" \\\"MM                     \\n   MMMMM                 M\\\"                    \\n   MMMMM               \\\" M                     \\n   \\\"MMMMo o oo o\\\"  ooooM\\\"                      \\n    o\\\"MM   M\\\"\\\" \\\"\\\"\\\"  o\\\" \\\"                       \\n      Mo o     \\\" \\\"   M o Mo                    \\n      MMo  o     o  o   oM                     \\n      oMMMMoooooMMMMMMMoMM                     \\n      \\\"MMMMMMMM\\\"\\\"\\\"\\\"\\\"\\\"MMMMM                     \\n        MMMMMMMMMMoMMMMMM\\\"                     \\n       MM\\\"MMMMM\\\"o\\\"MMM\\\"MMMMMM o                 \\n    ooMMM \\\"MMMMoooo\\\"oMMMMMMMMMMM               \\n ooMMMMMMMo \\\"\\\"\\\"\\\"M\\\" \\\"\\\"oMMMMMMMMMM  +----------+ \\nMMMMMMMMMMM o  \\\"\\\"  \\\"\\\"MMMMMMMMMMM  |   OKAY   | \\nMMMMMMMMMMMo      o \\\"MMMMMMMMMMM  +----------+ \\nMMMMMMMMMMMMo  o   oMMMMMMMMMMMM               \"}\n",
  "urldecode_sequence": "sequence {set bytes [binary format H* [string map {% {}} $sequence]]; if [catch {encoding convertfrom utf-8 $bytes} result] {return $bytes} {return $result}}\n",
  "nigga": "args {niggerize [apply giga $args]}\n",
  "boxcar_story_element": "{} {?? $::boxcar_story_elements}",
  "jizzy": "{} {bgbt \"Matt Oglesby\"}\n",
  "robot": "{genital_warts my_priest} {set :10bux: \"[badger goons] i just found my mom whipping hi what should i do???? (56k nuclear winter)\"; lappend my_uncle [gudroids [song1 $new_keyboard $breakfast_cereals]]; return $ButtesNET}\n",
  "go:topright": "{} {uchar 2513}\n",
  "lncog": "{} {lindex_random_ne [regexp -all -inline {rdf:about=\"(http://.*?)\"} [6~http://rss.slashdot.org/Slashdot/slashdot]]}\n",
  "moira2": "{} {bgbt what gross}\n",
  "order_array_list": "l {array set arr $l; set ret [list]; for {set i 0} {$i < [array size arr]} {incr i} {lappend ret $arr($i)}; return $ret}\n",
  "slice2": "{{who {}} {buttes {}}} {if {$buttes eq \"\"} {set buttes [lindex_random [names]]}; if {$who eq \"\"} {set who [lindex_random [names]]}; return \"<$buttes> dude $who if u dont fucken stop runnin ur mouth about my girlfriend im gonanf ucken slice your eyes\"}\n",
  "get_image_size_uncached": "url { [regsub -all index.php\\/http:\\/+ http://i.buttes.org/size.php/$url http:\\/\\/] }\n",
  "aimf_hello": "args {aimify hello $args}\n",
  "suavesay": "{{fart {}}} {if {$fart eq \"\"} {set fart [pua_anecdote]}; stampsay -s suave $fart}\n",
  "butteschat": "{} {join [list {             __    __} {            /..\\ /| |'-.} {           .\\_O/ || |   |   OH WOW} {        _ /  `._ \\|_|_.-'  BUTTES CHAT} {       | /  \\__.`=._) (_} {       |/ ._/  |\"\"\"\"\"\"\"\"\"|  LET ME IN} {       |'.  `\\ |         |   ON THIS} {       ;\"\"\"/ / |         |} {        ) /_/| |.-------.|} {       '  `-`' \"         \"}] \\n}\n",
  "talking_word_for": "who {switch -glob -- [string tolower $who] \"$::talking_patterns default random_word\"}\n",
  "fatsasser": "{} {return \"   _______\\n  /(.)    \\\\\\n (   ,|, (.) \\n (___<->___) -- hurrrr dem goons sure are [goon_word] \\n sez: fatsasser\"}\n",
  "cliche_for": "nick { subst [?? [array_get_default cliches [nickmap $nick] {}]] }\n",
  "tiny711": "{} {. [uchar 2708 20 F8FF]}\n",
  "magickcanvastransparent": "{{width 300} {height 300}} {magickcanvas $width $height http://churchturing.org/w/1x1.png}\n",
  "image-tuxpaint-bbq": "url { magick_scheme [tuxpaint-bbq-gen $url]}\n",
  "vertigize": "str {set ret \"\"; foreach word $str { append ret \"\u0003[format %02d 3]\"; append ret [string toupper [string index $word 0]]; append ret \"\u0003[format %02d 12]\u0002\"; append ret \"[string range $word 1 end]\u0002 \"}; return $ret}\n",
  "unknown:2:cmd/^\\^([A-Z\\[\\]_^\\\\])$/": "{matches args} {return [format %c [expr {[scan [last $matches] %c] - 64}]][join [lrange $args 1 end]]}\n",
  "seinfetish": "{{who {}}} {if {$who eq \"\"} {set who [lindex_random [names]]}; set ret \"<$who> and what's the deal with \"; append ret  [strip_u [fetish_porn]]; append ret \"?\"; return $ret}\n",
  "jewess": "{} {gis natalie portman}\n",
  "rfml": "{} {. \"I'm no racist, but [innerfml]. [resist]\"}\n",
  "niggersentence": "{} {subst [lindex_random $::niggersentence]}\n",
  "STsatan": "{} { return \".,__---\\\"\\\"\\\"\\\"\\\"\\\"--__---_---__--\\\"\\\"\\\"\\\"\\\"\\\"---__,.\\n  \\\"\\\"------___       Y       ___------\\\"\\\"\\n             \\\"\\\\     |     /\\\"\\n              / .   |   . \\\\\\n             |\\\\     |     /|\\n| |  ^  | |  | \\\\    |    / | <\\\"\\\\  ^ -+- ^  | |\\n|-| |_| | |   \\\\|\\\\  /|\\\\  /|/   \\\\  |-| | |-| |\\\\|\\n| | | | | |_   |  |\\\\X/|  |   \\\\_> | | | \"; }\n",
  "recacro": "word {set chars [split [string tolower $word] {}]; set words \"$word [acrochars [lrange $chars 1 end]]\"; if {[lindex $chars 1] eq \"n\"} {set words \"${word}'s not [join [lrange $words 2 end] \" \"]\"} elseif {[lindex $chars 1] eq \"i\"} {set words \"${word} isn't [join [lrange $words 2 end] \" \"]\"}; acroformat $words}\n",
  "aimf_hitlerindustries": "args {aimify hitlerindustries $args}\n",
  "mytempo": "{{name {}}} {. [name $name] likes it [?? [list long short]], [?? [list hard soft]], and [?? [list fast slow]]}\n",
  "pauligloo": "{} {embed [paulamid] [ajoin [color] \"\" \"[omg] \"] 38 3}\n",
  "magickcanvas": "{{width 300} {height 300} {url http://cryptosystem.org/images/sa/spacewhite.png}} {magick resize $url $width $height}\n",
  "sdfl": "{} scar_drudge_for_life\n",
  "abez": "{} {abezthink {man i'm so busy with my thesis i barely have any time for irc these days!}}\n",
  "STnazi": "{} {return \"\\n|_|Â¯'\\n,_|Â¯|\\n\";}\n",
  "popeye_timeline": "{{now NWO}} { string map [list NOW $now] [img-timeline] }\n",
  "strip_spaces": "str {return [regsub -all \"^ +\" [regsub -all \" +$\" $str \"\"] \"\"]}\n",
  "xmas": "args {set ret \"\"; foreach char [split [strip_all [join $args]] {}] {if {$char eq \" \" || $char eq \"\\n\"} {append ret $char} {if {$char eq \",\"} {set  char \",,\"}; append ret [color_n [xmas_colours]]$char}}; return $ret}\n",
  "catbusdcc": "{} {return \"Will you accept \\\"!!!c@tbus[string tolower [element_word]]_[string map {\" \" \"_\"} [pedo_word]]_vids--[kazaa]\\\" from user Catbus?\"}\n",
  "chinkplace": "{} {lindex_random $::chinkplace_dict}\n",
  "showargs": "{a b c} { expr $a + $b + $c }\n",
  "gbs": "{} {return \"\\[[goon_word] goons\\] i just found [acquaintance] [sex_act] [strip_u [fetish_porn]] what should i do???? (56k [56k_word])\"}\n",
  "moiravision": "{{url {}}} {set mv [moiravision_uncropped $url]; magick crop $mv 0 0 [expr [lindex [get_image_size $mv] 0]-50] [lindex [get_image_size $mv] 1]}\n",
  "Fishmech": "{} {rain [german [norway [goonsay [catsay [rocketcatsay [nigqdb]]]]]]}\n",
  "talkingdeal": "{} {return \"<[name]> [talking]\\n[seinfeld]\"}\n",
  "nameacro": "{} {randacro [next_random_in_list [names]]}\n",
  "bible": "{{what {The Bible}}} {string map [list {The Bible} $what] [@bible]}\n",
  "ScheisseGern": "{} {ajoin \"  \" \\n\\n[STgoon] \\n\\n\\n/ [rainbow [STapple]]}\n",
  "card_deck": "{} { set x {}; foreach {suit} {S D C H} { foreach {num} { 2 3 4 5 6 7 8 9 10 J Q K A} { lappend x \"$suit.$num\"; }; }; return $x; }\n",
  "octalc0de": "{} {ncock 0}\n",
  "savagesay": "args {ajoin \"  \" [STsavage] \"\\n\\n\" [wrap [niggerize [zulu [join $args]]] 50] }\n",
  "XD": "{} xd\n",
  "realwrap:processtoken": "{token s} { string range $token 0 [decr $s] }\n",
  "sluts": "{} {return \"rolloffle's mom\"}\n",
  "kallebooize": "args {set str [join $args \" \"]; set ret [list]; foreach ltr [split $str \"\"] { if { [lsearch -exact $::kallebooize_map $ltr] != -1 } { lappend ret [uchar [?? [string map $::kallebooize_map $ltr]]] } else { lappend ret $ltr } }; return [join $ret \"\"] }\n",
  "dominator": "{} {. \"http://limux.biz/img/dominator.jpg\"}\n",
  "documentation": "{} {return \"http://www.tcl.tk/doc/ you [faglame] [sexpart] licking [ethnic_group]\"}\n",
  "!unknown": "{args} {. \"Unknown prod: $args\"}",
  "tattle2": "{} {}\n",
  "master": "{i a b c d} { master_inc_score $i; if {[master_win $i $a $b $c $d]} { return [master_won $i $a $b $c $d]; } else { return [master_score $i $a $b $c $d]; } }\n",
  "smallcaps_titlecase": "args {. [map [split [join $args { }] { }] {word {join [list [string toupper [string range $word 0 0]] [smallcaps [string range $word 1 end]]] {}}}]}\n",
  "chocolaterainlyric": "{} { lindex_random $::chocolaterain }\n",
  "poopers": "{} { return \"Poopers: [http://poopstat.us/count.yaws]\"}\n",
  "bj_clear": "{} { blackjack_unset; blackjack_init; }\n",
  "doxdrop": "{{n 5}} {lselect_random $::phonenumber $n}\n",
  "squidflag": "{} { ajoin \"\"  \"[ctrlv]\\n[ctrlv]\\n[ctrlv]\\n[ctrlv]\\n[ctrlv]\"  [evilsquid \"MOLOTOV\\n   EVERYTHING\\n    UNDER\\n     THE\\n        SEA\"] }\n",
  "buttesfrot": "args {join [list {             __    __} {            /..\\ /| |'-.} {           .\\_O/ || |   |   OH WOW} \"        _ /  `._ \\\\|_|_.-'  [string toupper [crw_word]] CHAT\" {       | /  \\__.`=._) (_} {       |/ ._/  |\"\"\"\"\"\"\"\"\"|  LET ME IN} {       |'.  `\\ |         |   ON THIS} {       ;\"\"\"/ / |         |} {        ) /_/| |.-------.|} {       '  `-`' \"         \"}] \\n}\n",
  "evalor": "args { eval [lindex_random $args] }\n",
  "pubmeasure": "{} {publish [randmeasure10]}\n",
  "huge:I": "{} {bt :I}\n",
  "niggerdislike": "{} {lindex_random $::niggerdislikes}\n",
  "scarf": "{} gay\n",
  "engimo_girlfriend": "{} {. \" [color red].\\no o\\n)-(\"}\n",
  "dontroll": "{} {return \"\u000301,08  HEY XXXXXXXXXXXXXX\\n\u000308,08                    \\n\u000308,08                    \\n\u000308,08                    \\n\u000301,08\u0002  DONT TROLL ON ME  \"}\n",
  "ac%line:title": "{{wrapat 25}} {set title \"\"; while {![string length ${title}]} { set title [last [regexp -inline {[<(](?:[ @+~])?[^>)]+[>)] (.+?)$} [logs:randomline]]]; }; return [string toupper ${title}]; }\n",
  "niggerize": "args {string map $::niggerize [string tolower [join $args]]}\n",
  "metricstallion": "{} {return \"A full grown stallion's cock, when fully erect, will measure some 61 to 91 centimeters long. It can be 7.5 to 15.25 centimeters thick at the base, to about 5 centimeters thick at the head.\"}\n",
  "max": "args {inject $args [first $args] {{x o} {expr  $x > $o ? $x : $o}}}\n",
  "likeacat": "{} { . [subst [?? $::likeacat]] (LIKE A CAT) }\n",
  "martialart": "{} { . \"[choose \"Jew-Jitsu\" \"Varsity [crw_word]\" \"[sexpart] Wrestling\" \"[choose [al_man_word] [al_hat_word]] Karate\" \"[dndcreature] Kung Fu\" \"[faglame] Boxing\"]\"}\n",
  "roll": "args { set cmd [regsub -all {[^0-9d]} [string tolower [join $args]] \"\"]; if [regexp {([1-9]\\d{0,5})?(d?([1-9]\\d{0,5}))} $cmd {} a {} b] {if {$a eq \"\"} {set a 1}; return [expr {int(rand()*($a*$b - $a + 1))+$a}]} {error \"make sense faggot\"}}\n",
  "state": "{} {lindex_random $::state}\n",
  "grogsay": "args {okeysay $args}\n",
  "hello8": "{} {return \"<@hello> i had three eggs easy over, 2[rand 9] sausages, toast, and home fries\\n<@hello> and [rand 9] cups of coffee\"}\n",
  "stolen_thought": "args {magick annotate http://i.buttes.org/http://intercour.se/random/1236552108794.jpg 12 45 45 Red [wrap [join $args  \" \"] 25 ] }\n",
  "master_rank": "i { set l [master_get_stat $i]; set rank 0; foreach {k} [seq 0 5] { set rank [expr $rank + (6 - $k)*[lindex $l $k]] }; return $rank; }\n",
  "randeon": "{} {eval [lindex_random [info procs radeon*]]}\n",
  "rndtcl_statement": "{} {pick 1 rndtcl_set 1 rndtcl_lappend 1 rndtcl_return}\n",
  "tranny?": "args { subst { Hey [name $args] are you one of those [trannies] } }\n",
  "image-kosherize": "url {magick-scale-composite-bottom-left $url http\\://i.a-13.net/kosherize.png 1.0}\n",
  "imgaflip": "url {if ![cache exists imgaflip_norm $url] {return \"Run imgaflipcompose url first\"} else {set first [magick_id [magick composite $::imgaflipcanvas [cache get imgaflip_flop $url] 0 0]]; set second [magick_id [magick composite $first [cache get imgaflip_norm $url] 150 0]]; set third [magick_id [magick composite $second [cache get imgaflip_flipflop $url] 0 150]]; return [magick composite $third [cache get imgaflip_flip $url] 150 150]}}\n",
  "bigtext": "str {text char $str}\n",
  "urlsay": "{url args} {set ws \"                \"; foreach l [split [wrap [join $args] 45] \"\\n\"] {lappend ls \"                $l\"}; . \"[join $ls \"\\n\"]\\n$ws  /\\n$url\"}\n",
  "cybersex": "{{onefag {}} {twofag {}}} {set one [name $onefag]; set two [name $twofag]; if {$one eq $two} {append one \"\"; append two \"|away\"}; return \"<$one> [sex_do] my [smallword] [sexpart]\\n* $two starts [sex_act] $one's [sexpart]\\n<$one> You kinky little [marginalize]\\n* $one shoots [sex_fluid] on $two\\n<$two> Now [act_word] my [sexpart]\"}\n",
  "STiraqipig": "{} { join $::iraqipig \\n }\n",
  "trustory": "{{who {}}} {if {$who eq \"\"} {set who [lindex_random [names]]}; return \"I heard that $who's [acquaintance_chain] is into [sex_act] [strip_u [fetish_porn]]. true story.\"}\n",
  "track_ups": "number {set results {}; foreach {{} loc {} date {} time {} desc} [regexp -all -line -inline {^<td (?:align=\"right\" )?class=\"sec-pad\">(.*)} [string map [list \\n \" \" <td \\n<td </td \\n</td] [lindex [regexp -inline {<!-- Begin Package Progress -->(.*?)<!-- End Package Progress -->} [track_ups_html $number]] 1]]] {lappend results [list [join [html $loc]] [join $date] [join $time] [join [html $desc]]]}; return $results}\n",
  "funfact": "{} {subst [join [lselect_random $::funfacts 1]]}\n",
  "pbuh": "{} U+FDFA\n",
  "5stamprow": "{} {eval [concat [list ajoin \"\"] [mapx [seq 1 10] x {eval 5stamp}]]}\n",
  "taint": "{} {. Insecure dependency in [choose eval exec system] while running with -T switch at /usr/local/lib/perl/[join [ucwords [crw_word]] \"/\"].pm line [?? [seq 45 280]]}\n",
  "onemanonejar": "{} {return \u000315\\ \\ \\ \\ \\ \\ \\ \\ .--.\\n\u000315\\ \\ \\ \\ \\ \\ \\ /\\ \\ \\ \\ \\\\\\n\u00030\\ \\ \\ \\ \\ \\ ##\u000314\\ a\\ \\ a\u00030\\ \\ \\ \\ \\ \\ \\ _\\n\u000315\\ \\ \\ \\ \\ \\ (\\ \\ \\ '._)\u00030\\ \\ \\ \\ \\ |_|\\n\u000315\\ \\ \\ \\ \\ \\ \\ |'--\\ |\u00030\\ \\ \\ \\ \\ \\ |\\ |\\ \\n\u00032\\ \\ \\ \\ \\ _.\u000315\\\\___/\u00032_\\ \\ \u000314\\ ___\u00030|_|\u000314___\\n\u00032\\ \\ \\ .\\\"\\\\>\\ \\\\\u000311Y\u00032/|<'.\\ \\ \u000315'._.-'\\n\u00032\\ \\ /\\ \\ \\\\\\ \\\\\u000315_\u00032\\\\/\\ /\\ \\ '-'\\ /\\n\u00032\\ \\ |\\ --'\\\\\u000315_/\u00032|/\\ |\\ \\ \\ _/\\n\u00032\\ \\ |___.-'\\ |\\ \\ |`'`\\n\u00032\\ \\ \\ \\ |\\ \\ \\ \\ \\ |\\ \\ |\\n\u00032\\ \\ \\ \\ |\\ \\ \\ \\ /\\ './\\ \\ \\ \\ \\ \\ \\ \u00030ONE\\ MAN\\n\u00032\\ \\ \\ /__./`\u000312\\ |\\ |\\ \\ \\ \\ \\ \\ \\ \\ \u00030ONE\\ JAR\\n\u000312\\ \\ \\ \\ \\ \\ \\\\\\ \\ \\ |\\ |\\n\u000312\\ \\ \\ \\ \\ \\ \\ \\\\\\ \\ |\\ |\\n\u000312\\ \\ \\ \\ \\ \\ \\ \\;\\ \\ |\\ |\\n\u000312\\ \\ \\ \\ \\ \\ \\ /\\ \\ |\\ |\\n\u000312\\ \\ \\ \\ \\ \\ |___\\\\_.\\\\_\\n\u00035\\ \\ \\ \\ \\ \\ `-\\\"--'---'\\ \\ \\n}\n",
  "deez": "{} { . nuts }\n",
  "ubuntu_version": "{} {set rlsname [animal]; set first [string index $rlsname 0]; return \"[string totitle [word ^$first\\[a-z\\]*y$]] [string totitle $rlsname]\"}\n",
  "fkm": "{} {return \"[name], [name], [name]: Fuck one, Kill one, Marry one, GO!\"}\n",
  "word_swastika": "word { rswastika $word\\n[join [split [string range $word 1 end] \"\"] \\n] }\n",
  "joke": "{{who {}}} {ajoin \"\" \\n[join [lrange [split [oyh] \\n] 0 end-1] \\n] [peeer] \\n\\n\\n\\n[name $who]}\n",
  "butteshack:gem": "{} {subst [lindex_random $::butteshackgems]}\n",
  "recession": "{} {. A recession is a specific thing: two consecutive quarters of decline in a country's gross domestic product.}\n",
  "mroach6": "{} {. <mroach> i think there comes a time in every nerds life when they just let go of certain things that they used to find fun and realize they're just a waste of time\\n<mroach> i actually just wrote to my car dealer asking about having the temperature knob replaced with a celsius one}\n",
  "d2d": "{{who {}}} {if {$who eq \"\"} {set who [lindex_random [names]]}; return [ajoin \"\" [nick] [ncock 2] \"\\n*~~~*\\n\\n\\n\\n\\nBZZT!\" [flip [ncock 2]] $who]}\n",
  "acrodel": "{c i} {set ::acronym($c) [lsubtract $::acronym($c) [list [lindex $::acronym($c) $i]]];return}\n",
  "craps": "{} { . \"[uchar [lindex_random {2680 2681 2682 2683 2684 2685}]][uchar [lindex_random {2680 2681 2682 2683 2684 2685}]]\" }\n",
  "pet": "{} {return \"murrr\"}\n",
  "hostway": "{} {return qazwsx}\n",
  "buttesclassified:column": "{} {join [repeat 5 buttesclassified:instance]}\n",
  "arnt_even_funny": "arg {. $arg i swear everything that comes after your nick is just worthless to read\\nyou arent even funny}\n",
  "niggerboy_activity": "{} {lindex_random $::niggerboy_dict}\n",
  "george": "{} fastmystery\n",
  "r0y": "{} { return \"you guys are all planning for a banning\" }\n",
  "girls?": "{} {ajoin \" \" [c [llength [intersect [string tolower [names]] [string tolower $::girls]]] girls] [c 1 cup]}\n",
  "okey_spell": "{} {lindex_random $::okey_spell}\n",
  "imaguyfml": "{} {. Today, [innerfml]. I'm a guy. FML}\n",
  "goonresume": "{} {force_image [tinyurl [latext [string map {\\$ \\\\\\$}  [goonresumemain]]]]}\n",
  "mymyspace": "{} {return \"this is my myspace [nimplink [myspace_url]]\"}\n",
  "prions": "{} {join [lrange [strip_all [tail [macro prions]]] 0 end-1]}\n",
  "magick_id": "url {if ![regexp ^http://magick.buttes.org $url] {magick_id [magick noop $url]} else {lindex [regexp -inline {/([0-9a-f]*)\\.} $url] 1}}\n",
  "less": "args {global less_data;set n [nick];if {$args eq \"\"} {set r [lrange $less_data($n) 0 9];array set less_data [list $n [lrange $less_data($n) 10 end]]} {set d [split $args \\n];set r [lrange $d 0 9];array set less_data [list $n [lrange $d 10 end]]};join $r \\n}\n",
  "figlet_fonts": "{} {join [map [regexp -inline -line -all {<option value=\"([^\"]+?)\">} [cwget {http://patorjk.com/software/taag/font_settings_v1.php?fonttype=all}]] {{match font} {. $font}}] \\n}\n",
  "do_times": "{n block} { for {set i 0} {$i < $n} {incr i} { uplevel 1 $block } }\n",
  "twodongs": "{} {return \"[biggaytext \"8=====D\"] vs. 8=D (big and gay or small and happy)\"}\n",
  "gaywhale": "{} {gayflagify [failwhale]}\n",
  "zack": "{} {return \"It is very scary. The [string tolower [rap_word]] that the [capitalize [political_word]] movement has over the goverment, and their [shakti_word] to blatantly lie and conceal the [goon_word] for their gain, regardless of [acquaintance_word] is [fear_word].\"}\n",
  "rovequote": "{} {return \"\\\"[string totitle [political_word]]s saw the [shakti_word] of [historical_event] and prepared for [hotbutton]\\; [string totitle [political_word]]s saw the [shakti_word] of [historical_event] and wanted to prepare indictments and offer therapy and understanding.\\\" -- [political_figure], as quoted by [source]\"}\n",
  "Als?": "{} {set Alabs 0; set buf \"\"; append buf [count_nicks Al]; foreach Al [lfilter al* [string tolower [names]]] { if [regexp {^arab@} [hostmask $Al]] { incr Alabs; }; }; return \"$buf ...but $Alabs a rabs are among them!\"; }\n",
  "overheardincanada": "{} {set one [torontoname]; set two [overheard_people]; if {$one eq $two} {append one \" #1\"; append two \" #2\"}; return \"$one: [choose [canada] [welcometocanada]]\\n$two: [canadianize [[choose albot niggerphrase cached_onehug mystic]]]\\n$one: [canadianize [overheardline]]\"}\n",
  "mac": "{} {return \"[bold]M[bold]acs [bold]A[bold]ren't [bold]C[bold]omputers\"}\n",
  "bugger": "{{who {}}} {if {$who eq \"\"} {set who [lindex_random [names]]}; return \"OI M8, IF $who FINKS HE CAN  TALK ABOUT ME BIRD VAT WAY I'S GONNA ROIGHT BUGGER 'IS MUM U FUK\"}\n",
  "adblock": "{} {return \"The reason people use [shsc_word] is for [shsc_word], among the other [shsc_word]s, and the vast majority of those people have never gotten a [shsc_word] since beginning to use a decent [shsc_word] filterset.\"}\n",
  "postgres": "{} { return {Postgres is the only decent RDBM aside from MySQL, and I don't like it for web applications because all of its fancy features are things an efficient web application doesn't need anyway (ie, foreign keys, triggers, etc). If I was running a bank though, hey, Postgres all the way.} }\n",
  "percentage": "p {join [map [lrange [list 5 4 8 7 9 3] 0 [expr ${p} / 16]] {n {. \"\\003${n},${n}[string repeat \" \" 8]]\\003\"}}] {}}\n",
  "unknown:1:cmd/^(\\d*)~(.*)/": "{matches cmd args} {ceval [concat [list [last $matches]] $args] [lindex $matches 1]}\n",
  "trickortreat": "{} {ajoin [color orange on black] \"\" [stampsay -s pumpkin \"You knocked on the door and got some [pick 1 food_word 1 disease_word 1 crw_word 1 penis_word 1 booze_word 1 swede_word 1 dnd_word]!\"]}\n",
  "gigganigga": "{} { giga nigga }\n",
  "arouseclint": "{} {disgustsam clint}\n",
  "mytwat": "{} {lasttwat [twatname [nick]]}\n",
  "szip": "{l1 l2} {set o {}; foreach first $l1 second $l2 { lappend o [list $first $second]; }; return $o}\n",
  "radeon38": "{} {return {}}\n",
  "daypart": "{} { lindex_random $::daypart_dict}\n",
  "strip_tabs": "str {string map {\\x09 {}} $str}\n",
  "fixed": "{} {return \"WINKIE FIX BOT\"}\n",
  "okeycounterattack": "{} {return \"You cast [color red][capitalize \"[kill_verb] all\"] [color]on the [color blue]Okeys[color]!\\n[color blue]Large Okey[color] [okey_defense_action]!\\n[color blue]Small Okey[color] [okey_defense_action]!\\n[color blue]Tiny Okey[color] [okey_defense_action]!\\nParty gains [color yellow][lindex_random [seq 50 500]] experience points[color].\\n[color green][choose \"You are\" \"[name] is\"] now level [lindex_random [seq 2 100]]![color]\"}\n",
  "gaytalk": "{} {return \"YOU CAN'T CUT BACK ON GAY TALK IN #ONEBUTAN! YOU WILL REGRET THIS!\"}\n",
  "lselect_random": "{list n} {set ret [list];foreach i [seq 1 $n] {lappend ret [lindex_random $list]};return $ret}\n",
  "ejaculates": "{} {lindex_random $::ejaculate_dict}\n",
  "bigmatixhasu": "{} { set lines [cache_get_default bigmatix lines 0]; set lines [expr ($lines>4950)?0:$lines]; cache put bigmatix lines [+ 20 $lines]; set urli [expr ($lines % 4950) / 500]; set start [expr $lines %500]; set data [lines [~[modlindex $::bigmatixurls $urli]]]; join [lrange $data $start [+ 19 $start]] \\n}\n",
  "strcat": "args {join $args {}}\n",
  "last": "{list {count 1}} { if {${count} == 1} {lindex ${list} end} else {lrange ${list} [- [llength $list] $count] end}}\n",
  "hardchat": "{} {wt2 \"HARD CHAT\"}\n",
  "recursive": "{} {[recursive]}\n",
  "bgbt": "args {text gaybowchar [join $args]}\n",
  "dongs": "{} {bigtext dongs}\n",
  "zybl0re5": "{} {return \"[lindex_random $::zybl0re_dict]\"}\n",
  "donations": "{{oi {}}} {return \"[name $oi] donates money to [procon]-[unplural [ethnic_group]] organizations\"}\n",
  "3morse": "string {morse [morse [morse $string]]}\n",
  "hi": "{{who {}}} {return \"hi [nname $who]\"}\n",
  "next": "{i {amt 1}} {\r\n\tswitch -regexp -- $i {\r\n\t\t{^-?\\d+$} { return [expr $i+$amt]}\r\n\t\t{^[[:alpha:]]$} {scan $i %c j; return [format %c [expr $j+$amt]]}\r\n\t\tdefault {error \"can't increment type\"}}\r\n}\n",
  "clo": "{} { set dice [list] ; lappend dice [rand 1 7]; lappend dice [rand 1 7]; lappend dice [rand 1 7]; join $dice { }; }\n",
  "slice": "{{who {}}} { if {$who eq \"\"} {set who [lindex_random [names]]}; return \"dude $who if u dont fucken stop runnin ur mouth about my girlfriend im gonanf ucken slice your eyes\"}\n",
  "radeon5": "{} {return \"<@radeon> ScheisseGern, you're gay too?\"}\n",
  "ipozb": "{} {return \"|      /  menu  \\\\      |\\n|     /          \\\\     |\\n|    | <<      >> |    |\\n|    |            |    |\\n|     \\\\    >=    /     |\\n|      \\\\________/      |\\n|                      |\\n \\\\____________________/\\n\"}\n",
  "lunix": "args {apply linux $args}\n",
  "apply_84": "{proc args} {apply [list [info args $proc] [info body $proc]] $args}",
  "STmuzziegoon": "{} { join [list {  __________} { ($$$$$$$$$$)} { (--[ =]J[ =]} { (_______~__)}] \\n }\n",
  "circle": "{} {return \" _\\n(_)\"}\n",
  "crop_to_fit": "{url {xoff 0} {yoff 0} {w 63} {h 79}} {set ar [expr $w./$h.]; set dims [get_image_size $url]; if [expr $xoff == -1] {set xoff [expr round([lindex $dims 0]*$ar/4)]}; if [expr $yoff == -1] {set yoff [expr round([lindex $dims 1]/$ar/4)]}; set x [expr [lindex $dims 0]-$xoff]; set y [expr [lindex $dims 1]-$yoff]; set oar [expr $x./$y.]; if [expr $oar > $ar] {set crop [magick crop $url $xoff $yoff [expr $y*$ar] $y]} else {set crop [magick crop $url $xoff $yoff $x [expr $x/$ar]]}; . $crop}\n",
  "kkk": "{} { join $::kkkchat \\n}\n",
  "mmmporn": "{} {. [?? $::porn_scenes_dict] [mmm] }\n",
  "unixcmd": "{} { return \"[unixprog_word] -[join [mapx [seq 0 [rand 5]] x {lindex_random [seq a z]}] {}]\"}\n",
  "my_priest": "{skinning drunken_frat_guy death} {lappend my_uncle $freenode; return $performing_amateur_surgery_on; lappend camel_jockeys $_fno_branch_count_reg; return [WHOSE $suicide $affectionate]}\n",
  "liljon": "{} {subst [next_in_list $::getlow]}\n",
  "okey_acts": "{} {lindex_random $::okey_acts}\n",
  "v%??": "{l {index -1}} { if {$index == -1} {set index [rand [llength $l]]}; lindex $l $index }\n",
  "realwrap": "{text {s 60}} {\n  set out [list]\n  foreach line [lines $text] {\n    set acc [list]\n    foreach token [split $line \" \"] {\n      set token [realwrap:processtoken $token $s]\n      if {[realwrap:ttllen $acc $token] <= $s} {\n        lappend acc $token\n      } else {\n        lappend out [join $acc \" \"]\n        set acc [list $token]\n      }\n    }\n    if [llength $acc] { lappend out [join $acc \" \"]}\n  }\n  join $out \\n\n}\n",
  "catbus2": "{} {return \"<Catbus> [choose kids boiz lolis] are delicious\\n<Catbus> om nom nom nom\\n* Catbus is a [pedo_word]\\n<Catbus> om nom nom\"}\n",
  "josh": "{} {fatgoonwebq jog}\n",
  "cached_hillary": "{} {if [catch hillary result] {set result [lindex_random $::cached_hillary]}; cache_list cached_hillary $result}\n",
  "niggamint": "{} {ask niggamint}\n",
  "nazispook": "{} {lindex_random $::nazispook}\n",
  "homoize": "args {join [map [split [join $args]] {word {. \"[bold][color white on [gridse_colour]] $word [bold]\"}}] \"\"}\n",
  "aimono": "{{who {}}} {aim -n [aimname $who] [upper [odin] [niggerphrase] [odin]]}\n",
  "make": "{} {subst [join [string repeat {[gentoo] } 5] \\n]}\n",
  "warez_nl": "{} {nfo [join [nicklist]].[shakti_word].[join [shsc_word] .][virusextension]}\n",
  "squirt_jihad2": "{} {. \"[upper [squirt_word] [sex_fluid]] upon those who [insult_verb] [upper [crw_word]]\"}\n",
  "juxtapose": "str {set ret [list]; foreach {match a b} [regexp -all -inline {(?:^| )([^ /]+)/([^ ]+)} $str] {lappend ret [list $a $b]}; return $ret}\n",
  "STvikingboat": "{} { return \"    __4___   \\n _  \\\\ \\\\ \\\\ \\\\  \\n<'\\\\ /_/_/_/  \\n ((____!___/)\\n  \\\\0\\\\0\\\\0\\\\0\\\\/ \";}\n",
  "m": "{a b c d} {masterm $a $b $c $d}\n",
  "argamid": "{arg1 arg2} {subst [string map [list $arg1 $arg2] [pyramid \"$arg1 \"]]}\n",
  "arabic": "{} {mapx [seq 1 [+ 4 [rand 6]]] x {rands [+ 4 [rand 6]]}}\n",
  "butteweather": "{} { string map {\", Bert Mooney Airport, MT, United States (KBTM) 45-57-17N 112-29-51W 1688M\" \"schat\"}   [weather kbtm] }\n",
  "kill_verb": "{} {lindex_random $::kill_dict}\n",
  "blackjack_ace_calc": "{c aces} { set last $c; for {set x 0} {$x <= $aces} {incr x} { set s [expr $c + $x * 10]; if {$s > 21} { } else { set last $s; }; }; return $last; }\n",
  "wot": "{} { lmiot [tranny_word] }\n",
  "moirastone2": "{} {return \"Intoxication production is clearer, with more liquidity, dynamics and focus. The improved inter-transient alcohol-flow allows the drinker to taste the subtle ambient cues essential for accurate perception of beverage composition, width and focus.\"}\n",
  "abez_isnt_working": "{} { lindex [odd_elm [regexp -all -inline \"<pre>(.*?)</pre>\" [wget http://churchturing.org/w/hourly/]]] 1 }\n",
  "niggertoe": "{} {}\n",
  "choose": "args {lindex_random $args}\n",
  "lstime": "{} {clock format [- [clock seconds] [rand 1000000000]] -format \"%Y-%m-%d %H:%M\"}\n",
  "FAGS": "{} {your all FGS}\n",
  "lastfm:updateLastTrack": "{html now} {set user [lastfm:user $html]; set trackid [lastfm:trackid $html]; if {$trackid == [lastfm:lasttrack $user]} { return 0 } { lastfm:setlasttrack $user $trackid; if [lastfm:isListening $html] { return 0 } { lastfm:setlasttime $user $now }}}\n",
  "agenda": "{{name {}}} {regsub GAY [gayagenda] [upper [first_true $name [name]]'s]}\n",
  "aimregisterdomain": "args {aim -n [aimname $args] [registerdomain]}\n",
  "holylol": "{{args {}}} {set str [join $args]; if {$str eq \"\"} {set str [name]}; return [holywow $str's\\ [mood_word]\\ [food_word]]}\n",
  "burgin": "{} {fatgoonweb burgin}\n",
  "wc32": "{} {ajoin \"\" [zicat2 [wc3]]\\n[vflip [zicat2 [wc3]]]}\n",
  "new_shsc_thread": "args { return \"[color green]:10bux:[color lime]:10bux:[color green]:10bux:\"}\n",
  "wymyn": "args {string map {a y e y i y o y u y A Y E Y I Y O Y U Y} [join $args]}\n",
  "image-cash": "url { magick_overlay $url http://xs135.xs.to/xs135/09010/duke_nukem822.png }\n",
  "mob": "args {smega {rain [geton $args]} 19}\n",
  "buttesclassified:instance": "{} { concat [map [lindex_random $::buttesclassified] {{x} {subst $x}}] {--------------------} }\n",
  "slogan": "{} {return \"[corporation]: We're [adjective]!\"}\n",
  "hisam": "{{who sam}} {smega {strcat \"<[name]> $who: [greeting] [faglame]!\"}}\n",
  "classism": "{} {. [british_person] would never be caught dead eating [food_word] at 5 PM}\n",
  "hpychf": "{} {return \"don't be like that\"}\n",
  "dickvolume": "{} {ajoin \" \" [ncock [rand 7]] \"\\n\\nWHAT IS THE VOLUME\\n  OF THIS DICK\\n     [upper [name]]\"}\n",
  "with": "{__var__ __block__} {if {[llength $__var__] == 0} {error \"must specify a variable name\"}; import_level 1; if {[llength $__var__] == 1} {set __val__ [list]} {set __val__ [lindex $__var__ 1]}; set $__var__ $__val__; eval $__block__; set $__var__}\n",
  "rolloffle2": "{} {return \"Hello, SIR! My name is ROLLOFFLE, I am a BRITISH DOUCHEBAG. I want to KILL ALL FRENCHMEN! My father drove one of the trucks that was in a French-blockaded port. I get a boner every time I watch a WW2 documentary. If you wish to help me in my quest for FROG ELIMINATION, please purchase some non-continental cuisine at your non-continental cuisine store and help me KILL ALL FRENCHMEN!\"}\n",
  "roulette_reload": "{} {\n\tcache put roulette hot [rand 6];\n\tcache put roulette current 0;\n}\n",
  "function": "{} {return \"[strip_w [random_word]]()\"}\n",
  "body_part": "{} {lindex_random $::body_dict}\n",
  "grift2": "{{who {}}} {. \"[upper hey [name $who], want to buy some [choose fried {deep fried} {deep fat fried}] [lindex_random $::goon_solidfood] for $[lindex_random [seq 5 20]]]\"}\n",
  "555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555": "{} {return five}\n",
  "roundmorse": "args {unmorse [morse [join $args { }]]}\n",
  "tmpVar": "{name} {\n    while {[info exists ::$name]} {\n        append name _[clock clicks]\n    }\n    set ::$name {}\n    return ::$name\n}",
  "spamtext": "{func str} {set str [string trim $str]; join [adjacent_join [map1 [map1 [split $str {}] $func] nsplit]] \\n}\n",
  "cat": "{} {. This just in: [string toupper \"[buttes_cat] is [bold][?? $::cat_dict][bold]\"]. More at [?? [seq 5 11]].}\n",
  "fuckthatshit": "{} {. [img-hopper]\\n[aud-fuckthatshit]}\n",
  "insulting_verb": "{} {lindex_random $::insulting_dict}\n",
  "go:fill_flood_remove": "{color board x y} { if {[go:getxy $board $x $y] == $color} { foldxo xy o [go:set $board $x $y empty] {{1 0} {0 1} {-1 0} {0 -1}} {go:fill_flood_remove $color $o [+ $x [car $xy]] [+ $y [cadr $xy]]}} { return $board }}\n",
  "gridse": "{} {set buf \"\"; foreach gridse_word [lindex_random $::gridse] { append buf \"\\003[gridse_colours][regsub {^(.)} $gridse_word {\u001f\\1\u001f}] \"; }; return \"$buf\\003[gridse_colours]\\x1f/\\\\\";}\n",
  "nigsay": "{} {lasttwat shitniggerssay}\n",
  "asl": "{} {choose [randwithfloor 13 25]/[choose M F]/[choose [state] [city]] [string tolower [randwithfloor 13 25]/[choose M F]/[choose [state] [city]]]}\n",
  "fails": "args { return \"OH PLZ MASSUH US PO FOLK GONNA TRY HARDER PULEEZ\" }\n",
  "configure": "{} {subst [join [string repeat {[autoconf] } 10] \\n]}",
  "whale": "{} {return {             \u000311_\u000309_   \u000308_\u000304_  \u000313I\u000312'\u000311M \u000309G\u000308A\u000304Y \u000313G\u000312A\u000311Y \u000309G\u000308A\u000304Y \n            \u000313_\u000312_ \u000311\\ \u000309/ \u000308_\u000304_    \u000313I\u000312N \u000311A \u000309S\u000308P\u000304E\u000313C\u000312I\u000311A\u000309L \u000308W\u000304A\u000313Y             \n           \u000312/  \u000311\\ \u000309| \u000308/  \u000304\\     \u000313/          \n               \u000312\\\u000311|\u000309/        \u000308/           \n          \u000304_\u000313,,\u000312.\u000311-\u000309-\u000308-\u000304v\u000313-\u000312-\u000311-\u000309.\u000308_   \u000304/            \n \u000313/\u000312\\\u000311_\u000309_\u000308/\u000304\\  \u000313/            \u000312\\ \u000311/             \n \u000309\\\u000308_  \u000304_\u000313/ \u000312/              \u000311\\              \n   \u000309\\ \u000308\\\u000304_\u000313|           \u000312@ \u000311_\u000309_\u000308|              \n    \u000304\\                \u000313\\\u000312_               \n     \u000311\\     \u000309,,\u000308_\u000304_\u000313/       \u000312/                \u000311B\u000309Y \u000308E\u000304G\u000313G}}\n",
  "amit": "{} {join [map {3 1 2 3 1 5 0 7} {{spaces stars} {apply {ajoin \"\" [string repeat [string repeat \" \" 9] $spaces]} [repeat $stars jew]}}] \\n}\n",
  "jewamid": "{} {pyramid jew\\ }\n",
  "master_inc_score": "i { set a [expr 1 + [master_score_get $i]]; array set ::mastermind_score [list $i $a]; return [master_score_get $i]; }\n",
  "moiracam5": "{} {return \"    \\[~]           {_}            .'```\\\"\\\".\\n    |=|           |(|           /    /   \\\\\\n  .-' '-.         |=|           \\\\__/` \\\\   \\\\\\n  |-----|   ' .  /   \\\\          |_  _  '. |\\n  | ~~~ |  \\\\~~~/ |.--|  ' .      6  6   `)/\\n  | ~~~ |   \\\\_/  ||  | \\\\~~~/    | /_     |\\n  | XXX |    Y   ||  |  \\\\_/      \\\\ _,  / |\\n  |-----|   _|_  |'--|   Y        \\\\__.'  |_\"}\n",
  "rainbow2_colours": "{} {next_in_list {04 04 07 07 05 05 08 08 09 09 03 03 10 10 11 11 12 12 02 02 06 06 13 13}}\n",
  "wikipedia2": "{} {return \" \u0002\u0002 ,-)). \u0002\u0002 \u0002\u0002 \u0002\u0002 \u0002\u0002 \u0002\u0002 \u0002\u0002 \u0002\u0002 \u0002\u0002 \u0002\u0002 \u0002\u0002 ____\\n (@ \u0002\u0002 oo) \u0002\u0002 \u0002\u0002 \u0002\u0002 \u0002\u0002 \u0002\u0002 \u0002\u0002 \u0002\u0002 \u0002\u0002 \u0002\u0002 | \u0002\u0002 |`-.\\n \u0002\u0002 ) -u' \u0002\u0002 \u0002\u0002 \u0002\u0002 \u0002\u0002 \u0002\u0002 \u0002\u0002 \u0002\u0002 \u0002\u0002 \u0002\u0002 \u0002\u0002 | \u0002\u0002 |\\[\\[ \\]\\n /_`-3-3 \u0002\u0002 \u0002\u0002 \u0002\u0002 \u0002\u0002 \u0002\u0002 ___ |__|,-\\\"\\n(_(_8 ),--\\\"\\\"\\\")___)_>__<_ o!O\\nHEY LOOK I UPDATED WIKIPEDIA\"}\n",
  "blackjack_dealer_stand": "{} { return \"Dealer Stands\\n[blackjack_print_hand [blackjack_get_player dealer]]\"; }\n",
  "parse_ultimo_nslookup": "{tag state props body} { upvar 2 results results_list; if {$tag == \"BR\"} { lappend results_list [string trim $body]; }; }\n",
  "aimfuck": "{{who {}}} {aim -n [aimname $who] I fucked [niggerwoman] [niggername]}\n",
  "tubegrids": "{tube {rows 36} {cols 36}} {. http://www.yooouuutuuube.com/v/?rows=$rows&cols=$cols&id=$tube&startZoom=1}\n",
  "unescape_numeric_html_entity": "entity {format %c [string trimleft [regexp -inline {\\d+} $entity] 0]}\n",
  "s_a": "{} shsc_a\n",
  "moirasmom": "{} { return \"octalc0de's mom slept with [info cmdcount] men and sucked [expr 2 * [info cmdcount] + 1] dicks\"}\n",
  "vorf": "{} {return \"[color black on black]oo[color cyan on cyan]oooooooooooooooooooooooooooo[color black on black]oo\\n[color black on black]oo[color cyan on cyan]oooooooooooooooooooooooooooo[color black on black]oo\\n\"}\n",
  "marxokeys": "{} {return \"The three brothers Okey:\\n[okeyline]\\n Groucho  Harpo Zeppo\"}\n",
  "saq5": "{} {saqsay \"1 cm tall, 3 cm in diameter\"}\n",
  "location": "url {array set headers [lindex [http head $url] 1]; if [info exists headers(Location)] {return $headers(Location)} else {return $url}}\n",
  "aimerror": "{{sn {}}} {set sn [aimname $sn] ; aim -n $sn \"<font color=\\\"#ff0000\\\"><b>Error</b></font> eval block in /home/r1ch/p/aimbot/spam.rb(437): OutOfMemoryException (adding screen name ``$sn'' to \\$teamBarryList: out of memory) (<b>YOU DO NOT NEED TO REPORT THIS!!!</b>)\"}\n",
  "your_face": "{{who {}}} {rain [stampsay -s moira \"[name $who]: your face is a [lindex_random $::moira_dict]\"]}\n",
  "redukt": "{} {tcl string map {{heron} {treo} {neck} {uptime} {fish} {data} {water} {webs} {nmap} {fork} {fly} {pacquette} {kitchen} {computer} {pots and pans} {Acess DB}} [heron]}\n",
  "today_fml": "{} { string map [list Today [?? $::fml_today_words]] [fml] }\n",
  "bury": "{{who {}}} {if {$who eq \"\"} {set who [lindex_random [names]]}; return [tooley [dis [slice3 [lump [fukup $who]]]]]}\n",
  "afed": "{} {return \"[name], let me [fuckword] your face.\"}\n",
  "lump": "{{who {}}} {if {$who eq \"\"} {set who [lindex_random [names]]}; return \"$who, u dont even know me kid shut the fuck up hidin behind your computer i'd fuckin lump u out if you fronted on me like that in person\"}\n",
  "center2": "{lines {n 25}} {set lines [split $lines \\n]; set ms [maxstringlength $lines]; each $lines {l {. [center $l [expr [uplevel {. $n}] + [uplevel {. $ms}]]]}}}\n",
  "needs": "args {return \"urmom needs [join $args]\"}\n",
  "grouphugs": "{} {map [every_n_from 2 1 [regexp -all -inline {<div class=\"content\">\\s*<p>([^<]+)</p>} [http://confessions.grouphug.us/random]]] [& html]}\n",
  "xmas_colours": "{} {next_in_list {3 4}}\n",
  "moiraslant": "{} {return \"[bgt MOIRA IS A]\\n[bgt SLANT-LOVER]\"}\n",
  "moira_comic": "{} {. THE ADVENTURES OF MOIRA_\\n[embed [ajoin \" \" [moira_comic_frame] [moira_comic_frame]] jgs 75 14]}\n",
  "aimbread": "{{name {}}} {aim -n [aimname $name] ill never forget in math class in high school back in the day, 2 black guys get in a fight and one stabs the other with a screw driver right in front of me when im like a freshman, then some black girls stands up and screams OH SHEET HE STABBED CORNBREAD}\n",
  "shscmeal": "{} {fullgoonsay [capitalize [shsc_word]]. [mmm]}\n",
  "collegeidiot": "{} { raim [collegeaim] }\n",
  "fathead": "n { return [ ajoin \"\" \"\\n(\\n(\" \"[string repeat \"_\" $n]\\n\\n[string repeat \"_\" $n]\" \"_\\n.\\n_\" \"[string repeat \"_\" [expr \"$n/5\"]]\\n\\n[string repeat \"_\" [expr \"$n/5\"]]\" \"_\\n\\nO\"  \"[string repeat \"_\" [expr \"$n/10\"]]\\n\\n[string repeat \"_\" [expr \"$n/10\"]]\" \"_\\n.)\\n_)\"]; }\n",
  "text-on-comic": "{placements url words} { inject [szip $words $placements] \"(image \\\"[scheme_escape $url]\\\")\" {{i v} {. (annotate $i 14 [caadr $v] [cadadr $v] black \\\"[car $v] \\\")}}}\n",
  "buttesclassified": "{} { join [lrange [split [apply {ajoin \"|\" \"\"} [concat [map [map [repeat 3 buttesclassified:column] {x {map $x {{y} {crop [wrap $y 20] 0 0 20 30}}}}] {{z} {join $z \\n} }] {\"\"}]] \\n] 0 20] \\n }\n",
  "twat": "args {apply heynotrick $args}\n",
  "Ï": "{} {. Ï = 3.2}\n",
  "waffleimages": "{} {if [catch waffleimages_get result] {set result [lindex_random $::cached_waffleimages]}; cache_list cached_waffleimages $result}\n",
  "drill_line": "{} {subst [lindex_random $::drill_lines]}\n",
  "btc_now": "{} {regexp {\\\"last\\\"\\:(.*?)\\}} [http://mtgox.com/code/data/ticker.php] -> jew; . $jew}\n",
  "radeon23": "{} {return {<@radeon> as a matter of fact, im using a monster cable i borrowed from my brother}}\n",
  "loaf": "{} {join [. \"l\" [repeat [rand 4 32] {. [?? {\"o\" \"a\" \"r\" \"m\" \"a\" \"a\" \"o\" \"o\" \"o\" \"o\" \"o\"}]}] \"f\"] {}}\n",
  "build_a_chair": "{} {return \"<Winkie> i should try building a chair at some point\\n<Winkie> i dunno where to source the [random_word] from\"}\n",
  "drug_do": "{} {lindex_random $::drug_does}\n",
  "strings": "{str {n 5}} {join [join [regexp -inline -all \"\\[a-zA-Z]\\[\\\\w\\\\s'\\\\-:.]{[expr $n-2],}\\[a-zA-Z]\" $str]]}\n",
  "isasian": "n {if {[lsearch $::asians [lc $n]]!=-1} { return 1 } { return 0 }}\n",
  "cantcutback": "{} {magick composite [img-frot] [magick_id [sambackon [crw_word]]] 0 0}\n",
  "catfu": "{{head STcathead}} {embed [embed [embed [embed [embed [canvas 72 15] [turdneck 10 0] 20 5] [$head] 29 3] [fu] 1 5] [flip [fu]] 39 5] \"   FUCK YOU\\n\\n / \" 36 3}\n",
  "will_deal": "{{who {}} {rate 50}} {. \"<[name $who]> i'd pay \\$$rate/month for will never to mention [sun_word] in [channel] again\"}\n",
  "elton": "args {rain [eval [concat stampsay -s elton $args]]}\n",
  "breatharian": "{} {. \"Brooks explains that the \\\"[goon_food]\\\" from [fastfood] possesses a special \\\"[shakti_word]\\\" and that he thus recommends it as occasional food for beginning breatharians. He then goes on to reveal that the secret of [goon_food] is \\\"[shakti_word]\\\".\"}\n",
  "dennismiller": "{{oi {}}} {return \"Not to get off on a rant here, but listening to [name $oi] makes me wish I was [celebrity] joining [political_figure] in the [crime] of several [ethnic_group] during [historical_event]. Asking the citizens of [country] to not [ethnic_cleansing_verb] [plural [niggerword]] is like asking [name] to contract [disease_word], rub his [body_part] against my [penis_word], then stay away from the [food_word].\"}\n",
  "STdiamonds": "{} { return \"      A      \\n    ,/ \\\\.    \\n   <'   \\`>   \\n    \\`\\\\,/'    \\n      V      \";}\n",
  "audiophile_brand": "{} {lindex_random $::audiophile_brands}\n",
  "kawaii": "{{n 1}} {set ret {}; lappend ret \"^\"; while {$n > 0} {lappend ret \"_\"; incr n -1}; lappend ret \"^\"; return [join $ret \"\"]; }\n",
  "boobs": "{} {return \"(.)(.)\"}\n",
  "lesbian": "{} {. \"Can I watch?\" }\n",
  "mfp": "{} {return \"\\\"I thought Napster was dead, WOW was I WRONG! Now with MovieFinderPro, I can find ANY movie on the Internet .\\\" ... \u0002D. Howe\u0002\"}\n",
  "highascii": "{} {set ret [list]; for {set i 128} {$i < 255} {incr i 26} {lappend ret [eval [concat [list format [string repeat \"%02X %c  \" 26]] [lrepeat [seq $i [expr $i+26]]]]]}; join $ret \\n}\n",
  "loltip": "{} {return \"[lolname] from [city], [state] submits this tip: Don't leave the city at night.  There are [animalprefix][animal_word]s and [choose [golem] [elemental] [dndcreature] [dndname]]s roaming the countryside.  Not to mention the [undesirables].  If you do go, bring a [singleethnic] guide with a [weapon].\"}\n",
  "sharks": "{} {. WHO LET THE SHARKS OUT \u000312\u0002ï¿½`ï¿½.ï¿½ï¿½.ï¿½ï¿½ï¿½`ï¿½.ï¿½/\\ï¿½.ï¿½ï¿½ï¿½`ï¿½.ï¿½ï¿½.ï¿½ï¿½\u0003ï¿½ï¿½\\(ï¿½_o)/ï¿½ LOL NEW ORLEANS\u000312\u0002`ï¿½.ï¿½ï¿½.ï¿½ï¿½ï¿½`ï¿½.ï¿½ï¿½.ï¿½ï¿½ï¿½`ï¿½.ï¿½ï¿½\u0003ï¿½\\(ï¿½_o)/ï¿½ LOL HOUSTON\u000312\u0002.ï¿½ï¿½ï¿½`ï¿½.ï¿½/\\ï¿½.ï¿½ï¿½ï¿½`ï¿½.\u0003ï¿½\\(ï¿½_o)/ï¿½ LOL HURRICANE RITA\u000312\u0002ï¿½ï¿½.ï¿½ï¿½ï¿½`ï¿½.ï¿½ï¿½.ï¿½ï¿½ï¿½`ï¿½.ï¿½ï¿½.ï¿½ï¿½ï¿½`ï¿½.\u0003ï¿½\\(ï¿½_o)/ï¿½ LOL HURRICANES\u000312\u0002ï¿½ï¿½.ï¿½ï¿½ï¿½`ï¿½.ï¿½ï¿½.ï¿½ï¿½ï¿½`ï¿½.ï¿½\u0003/\\\u000312\u0002ï¿½.ï¿½ï¿½ï¿½`ï¿½.ï¿½ï¿½.ï¿½ï¿½ï¿½`ï¿½.ï¿½\u0003/\\\u000312\u0002ï¿½.ï¿½ï¿½ï¿½`ï¿½.ï¿½ï¿½}\n",
  "chingoon": "args {apply chins $args}\n",
  "alert3": "str {return \"\u0002\u00037,4/!\\\\\u0003\u00037,1ALERT\u0003\u00037,4/!\\\\\u0003\u0002 \u0002$str\u0002 \u0002\u00037,4/!\\\\\u0003\u00037,1ALERT\u0003\u00037,4/!\\\\\u0003\"}\n",
  "recent_names": "{} {uniq [map [log] [& cadr]]}\n",
  "blrain": "list {map1 $list {strcat [COLOR 1 [gay]]}}\n",
  "zirc": "{} {return [czirc]}\n",
  "mexicowsay": "str { join [list {  ----------------------------------------- } $str [mexicow]] \\n}\n",
  "mutiny": "{{site {}} args} {return \"< Mutiny > i wonder how best to take advantage of my $site free \\\"paid\\\" account \\n< Mutiny > its like a giant catalog of $args, all in one convenient place!\"}\n",
  "heynotrick": "args {set out [strip_color [join $args]]; set url [rotwt [strip_all $out] [unsort_next $::twatcounts]]; . [string map {\"\\n\" \"\"} \"$url : [twitterize $out]\"]}\n",
  "frotboy": "{} {lolqdb 2546}\n",
  "sanitize": "str {regsub -all {\\?} $str {}}\n",
  "ubuntu": "{} {return \"<@AmazuAtu> sobonana futhi \\\"Linux\\\" ukhulumelani???\\n<@Dzigbode> jabula! ingoma Cflags thandanani jabula zooooom!\\n<@AmazuAtu> nihambe kahle counter strike, izinkabi umbulo umbulo\\n<@Juma> sikhona ubaba ubaba Mikro\\$anbi bill gate$ intombi yami!!!!!\\n<@Dzigbode> siyafunda ngicela\"}\n",
  "chinkml": "{} {pink [chinkerize [fml]]}\n",
  "ebuild_category": "{} {return [lindex_random $::ebuild_categories]}\n",
  "^": "{{n 1} {who {}} {match {}}} {if {[string toupper $who] eq [string toupper [nick]]} {set n [expr $n+1]} {if {$match ne {} && $who eq {}} {set n [expr $n+1]}}; if {$who eq \"\"} {set lines [lgrep \"***:(?i)$match\" [log]]} {set lines [lgrep \"***:(?i)$match\" [log_for $who]]}; format_log_line [lindex $lines end-$n]}\n",
  "rot:strlistxy": "{strl x y} { set k [string index [lindex $strl $y] $x]; if {$k==\"\"} { return \" \";}; return $k }\n",
  "image-gunman-face": "img { magick-scale-composite-center $img http://i.buttes.org/index.php/http:/zapistan.net/images/vt_gunman.png 0.4 }\n",
  "chinegros": "{} { chinasay [niggerphrase]; }\n",
  "oasis_champagne_supernova": "{} {return \"And I, I just want to be\\n Darling, with you\\n The Music is made that way\\n My eyes arnt blue\\n Theres nothing I can do\"}\n",
  "STshoe5": "{} {join {{ .---..__      ,            } {|'-._    ``'--/ `\\._        } {/'-._`'--.._.'   |  '--._   } {|    `''--...___/__....--`\\ } {\\                         / } {|`'-----------..........-'| } {\\_____.---.______________/  }} \\n}\n",
  "onion_headline": "{} {return \"[choose Area Local Visiting \\\"[capitalize [emotion]]\\\"] [capitalize [marginalize]] [choose Supports {Responsible For} Opposes] [capitalize [hotbutton]]\"}\n",
  "spamemail": "{} {return \"[daypart], [name] \\nit's \\\"[niggerphrase]\\\" \\nhttps://[camwhoreurl] \\n[choose [jewfullname] [muslimname] [waspfullname] [pythonname] [lolname] [niggerfulname]]\"}\n",
  "urratio": "nick {twitteratio [twatname $nick]}\n",
  "aimf_alley": "args {aimify alley $args}\n",
  "niggers?": "{} {set niggers 0; set nignames \"\"; foreach nigger [string tolower [names]] { if [regexp {bb\\.sky\\.com$} [hostmask $nigger]] { append nignames \"$nigger\"; incr niggers; }; }; return [c \"$niggers NIGGERS:\" [join $nignames \",\"]];}\n",
  "icedcoffee?": "args {apply coffee? $args}\n",
  "bigdong": "{} {bigtext {8====D~}}\n",
  "bj_handd": "{} { return [blackjack_print_player dealer]; }\n",
  "Catbus": "{} { \u0002Shat\u0002bus is a fag }\n",
  "recentdeaths": "{} {return \"the following people are dead: [join [lrange [every_n_from 2 1 [regexp -all -inline {<FONT COLOR=\"0000ff\"><a href=\".*?\">(.*?)</a>} [wget http://www.deadoraliveinfo.com/dead.nsf/viewdocs-nf/lastsixmonths]]] 0 4] \", \"]\"}\n",
  "fap": "{} {wt2 \"chatovsky is a retard\"}\n",
  "chris": "{} {geton [?? $::vulva_games]}\n",
  "cache_lolqdb_quote_lines": "{{id random}} { set lines [split [lolqdb $id] \\n]; foreach line $lines { if { [lsearch -exact $::lolqdb_lines $line] == -1 } { lappend ::lolqdb_lines $line } } }\n",
  "terrific": "{} {return \"Spreading her drool liberally on my chest, I gazed upon her heaving breasts and as there was no longer a feeding tube that would hinder the removal of her shirt, it was haphazardly flung in the nearest empty chair facing us.\nShe winked as she asked for a different kind of feeding tube. Happy to oblige, my zipper made a familiar sound that made Terri's face light up with joy.\nI guided her hands to my beanbags of love, where her intermittent squeezing didn't bother me too much. Laying completely on her now, I pressed her flesh balloons together where a meek gurgling of delight escaped from her lips.\nMy cockmeat was straining against her panties now, as her back arched slightly in preperation for the Senate pigeonholing I was about to give her.\n\\\"NnnNNUGH!\\\", she cried out as my living will entered hers.\nHer shaking hands tussled my hair like Michael J Fox, the bedpan underneath shaking with our indomitable thrusts.\nHer breathing skipped a beat, as beads of sticky sweat appeared over brow. Deftly turning her on her back, my hands grabbed her supple sides. She could live for another couple weeks, I'd imagine.\nAfter what felt like many hours riding the short bus, my climax was building up like a court case. I left evidence everywhere.\nOur passionate tryst had drawn to a close, much like the curtains. I waved a tearful goodbye as the wails reverberated throughout the white corridors.\nI needed a glass of water after that, one that would never be forgotten. I took a sip, and said goodbye one last time.\" }\n",
  "ebay_adjective": "{} {subst [lindex_random $::ebay_adjectives]}\n",
  "kittytouch": "{{who {}}} {return \"`*-.\\n )  _`-.\\n.  : `. .\\n: _   '  \\\\\\n; *` _.   `*-._\\n`-.-'          `-.\\n  ;       `       `.\\n  :.       .        \\\\     Please don't let\\n  .   .   :   .-'   .     [name $who] touch me\\n  '  `+.;  ;  '      :      *mew*\\n  :  '  |    ;       ;-.\\n  ; '   : :`-:     _.`* ;\\n .*' /  .*' ; .*`- +'  `*'\\n`*-*   `*-*  `*-*'\"}\n",
  "huge911": "{} {draw {00000110000000000000001111001111 00000011100000000000001111001111 11100001111100000000001111001111 01110000111000000000001111001111 01111111111111111111001111001111 01111111111111111111001111001111 01110000111000000000001111001111 11100001111100000000001111001111 00000011100000000000001111001111 00000110000000000000001111001111}}\n",
  "rrhoid": "args {string map {r rrh R Rrh} [join $args]}\n",
  "blogentry:words1": "{} { lindex_random $::blogentrywords1 }\n",
  "moiravision_uncropped": "{{url {}}} {magick dissolve [or $url [gis [?? {whiskey gin vodka}]]] - .25 .25 -50 0}\n",
  "Ulf": "{{text {unicode abuser}}} {unicode_abuse $text}\n",
  "tracer%tree_init": "proc {set ::ttree_${proc} {}; set ::ttpos_${proc} 0}\n",
  "fullwidth_with_formatting": "args {join [map [split_on_formatting [join $args]] {{f t} {. $f[fullwidth $t]}}] {}}\n",
  "shiiit": "{} {. http://tinyurl.com/cnmqet#.mp3}\n",
  "even_elm": "args {every_n_from 2 0 [join $args]}\n",
  "hump": "{{who {}}} {if {$who eq \"\"} {set who [lindex_random [names]]}; me \"starts [sex_act] $who's [body_part]\"}\n",
  "rails": "{} {. \"Does it scale?\" [checkbox no no]}\n",
  "escape": "str {string map {\\\\ \\\\\\\\ [ \\\\[ $ \\\\$} $str}\n",
  "zuludel": "{} {gudrize [zulu [dreidel]]}\n",
  "hick": "{} {return \"mixduptransistor\"}\n",
  "go:isboard?": "board {set type [go:type $board]; if {$type == \"go:board\"} { return 1 } { return 0 } }\n",
  "whyami": "str {. WHY AM I [string toupper $str]? people keep asking me - well, I was raped when I was 11}\n",
  "tweebone": "url {. http://tb.scul.us/$url.png}\n",
  "jres_test": "{bum fart} {return \"jre's ${bum}s\\n\u00035\u0002  __\u0002\u0003\\n\u00035\u0002 /..\\\\\u0003\u0002\\n\u00035\u0002 \\\\_O/\u0002\u0003\\nreek of [sex_act] $fart\"}\n",
  "lamejoke": "{} {lindex_random $::lamejoke_dict}\n",
  "gaysmile": "{} {rainbow [smile]}\n",
  "rot:mktuples:test": "{} {\n    set o [rot:mktuples [list a b c d]];\n    set p [rot:mktuples [list ${::rotC} a b c d]];\n    set q [rot:mktuples [list ${::rotC}1,2 a b c d]];\n    set s [rot:mktuples [list ${::rotC}1,2 a ${::rotB} b c ${::rotB} d]];\n    set t [rot:mktuples [list ${::rotC}1,2 ${::rotV} a ${::rotB} b ${::rotV} c ${::rotB} d]];\n    set u [rot:mktuples [list ${::rotC}1,2 ${::rotV} a ${::rotC} ${::rotB} b ${::rotV} c ${::rotB} d]];\n    set oout \"{a {} 0 0} {b {} 0 0} {c {} 0 0} {d {} 0 0}\";\n    set qh \"${::rotC}1,2\";\n    set qout \"{a $qh 0 0} {b $qh 0 0} {c $qh 0 0} {d $qh 0 0}\";\n    set sout \"{a $qh 0 0} {b $qh 1 0} {c $qh 1 0} {d $qh 0 0}\";\n    set tout \"{a $qh 0 1} {b $qh 1 1} {c $qh 1 0} {d $qh 0 0}\";\n    set uout \"{a $qh 0 1} {b {} 1 1} {c {} 1 0} {d {} 0 0}\";\n    if {$o != $oout} { return \"Test o == oout failed!\"; };\n    if {$p != $oout} { return \"Test p == oout failed!\"; };\n    if {$q != $qout} { return \"Test q == qout failed! {$q} {$qout}\"; };\n    if {$s != $sout} { return \"Test s == sout failed! {$s} {$sout}\"; };\n    if {$t != $tout} { return \"Test t == tout failed! {$t} {$tout}\"; };\n    if {$u != $uout} { return \"Test u == uout failed! {$u} {$uout}\"; };\n    return \"Success\";\n}\n",
  "slot_pull_stamps_display": "stamps {eval \"ajoin | \\[[lindex $stamps 0]] \\[[lindex $stamps 1]] \\[[lindex $stamps 2]]\"}\n",
  "slur": "{} {lindex_random $::slur_dict}\n",
  "rainpyramid": "{{who {}}} {if {$who eq \"\"} {set who [lindex_random [names]]}; return \"\u0002[rainbow [pyramid $who]]\u0002\"}\n",
  "BUSTER": "{} { return [rainbow \"@@@ [lindex_random {PROC MACRO MEXICAN GOOK}] BUSTER @@@\"]; }\n",
  "STtranny": "{} {embed [STgoonette] [flip [ncock 2]] 12 16}\n",
  "overlay": "{f e} {\n\tset r [list]\n\tset l [split $f \\n]\n\tset a [split $e \\n]\n\tfor {set i 0} {$i < [llength $l]} {incr i} {\n\t\tset w [lindex $a $i]\n\t\tforeach {m s} [regexp -all -inline -indices -- {( +)} [cstrip $w]] {\n\t\t\tset x [lindex $s 0]\n\t\t\tset y [lindex $s 1]\n\t\t\tset w [creplace $w $x $y [crange [lindex $l $i] $x $y]]\n\t\t}\n\t\tlappend r $w\n\t}\n\tjoin $r \\n\n}\n",
  "zunewelcome": "{{who {}}} {return \"\u0003\u00033,5\\[ \u00033,5 \\]Â¤\u0003 \u0002\u0003\u00037~Z \u000313~U \u00037~N \u000313~E \u00037~+\u0002 \u0002\u0002\u00033,5Â¤\\[ \u00033,5 \\]\u0003\u0002 \u0002\u001f\u00037\u0002/\u000313\\\\\u0002\u0002\u001f\u0003 [grapefruitize SQUIR][grapefruitize TING:] \u00037\\[\u000313|||[grapefruitize 100%]\u000313|||\u00037\\]\u0003 [grapefruitize COMPLETE] \u000313\u001f\u0002\u0002/\u00037\\\\\u0002\u0002\u001f\u0003 [grapefruitize Welcome to the social, [name $who]!]\"}\n",
  "mmaevent": "{} { . \"[mmaeventintro]\\nFor our MAIN EVENT OF THE NIGHT we have [fullfighterintro], challenging the [rand 0 40]-[rand 0 40] [weightclass] Champion and dangerous [martialartist] [mmafighter] for the title here at [string toupper [crw_word]] [rand 1 100] in Las Vegas.\\nWe are [broadcast]\\nI'm Mike Goldberg and with me as always is Joe Rogan.\"}\n",
  "b0nk": "{} {return;}\n",
  "building1": "{} { draw {11111 10101 11111 10101 11111 10101 11111 10101 11111 10101 11111} }\n",
  "corrupt": "{} {each [regexp -all -inline {<h2><a href=\"(.*?)\" title=\"(.*?)\">} [wget http://www.corrupt.org]] {{m n1 n2} {. \"\\002[html ${n2}]\\002 - \\x1fhttp://www.corrupt.org[html ${n1}]\\x1f\"}}}\n",
  "bra": "{{args {}}} {return \"[name $args]: what kind of bra are you wearing?\"}\n",
  "colors": "{} {join [map1 [split_every 2 [lrepeat [seq 0 15]]] {strcat \u0003}]}\n",
  "stevevegan": "{} {caption [img-steve 2] [rawvegan]}\n",
  "myw": "{} myweather\n",
  "v%chanlist": "{c {flags {}}} {\r\n\tglobal botnick\r\n\tlsearch -not -all -inline -regexp\t\t\t\\\r\n\t\t[subst \"\\[[concat chanlist ${c} ${flags}]\\]\"]\t\\\r\n\t\t\"(?iq)${botnick}\"\r\n}\n",
  "image-fml": "{{img {}} {fml {}}} { caption [eval_or {. $img} {subst [?? $::fml_images]}] [eval_or {. $fml} {5~fml}] }\n",
  "radeon24": "{} {return {<@radeon> i know\n<@radeon> the guy at best buy told me that}}\n",
  "slot_pull": "{} {set nick [normalize_nick [nick]]; slot_stats $nick; slot_deposit; set stamps [slot_pull_stamps]; set value [slot_pull_value $stamps]; slot_credit $nick $value; ajoin \" \" [slot_pull_stamps_display $stamps] [slot_pull_info $value]}\n",
  "nickname": "{{oi {}}} {return \"[name $oi] \\\"The [string totitle [string map {\"my \" \"\" \"my-\" \"\" \"-\" \" \"} [random_word]]]\\\" [jewsurname]\"}\n",
  "aimf_kanye": "args {aimify kanye $args}\n",
  " \u0016 \u0016\u0016 \u0016\u0016 \u0016\u0016 \u0016 \u0016 \u0016\u0016 \u0016\u0016 \u0016\u0016 \u0016    \u0016 \u0016    \u0016 \u0016\u0016 \u0016\u0016 \u0016  \u0016 \u0016\u0016 \u0016\u0016 \u0016\u0016 \u0016\u0016 \u0016     \u0016 \u0016\u0016 \u0016\u0016 \u0016\u0016 \u0016  \u0016 \u0016   \u0016 \u0016   \u0016 \u0016   \u0016 \u0016     \u0016 \u0016     \u0016 \u0016   \u0016 \u0016  \u0016 \u0016\u0016 \u0016\u0016 \u0016\u0016 \u0016 \u0016 \u0016     \u0016 \u0016   \u0016 \u0016  \u0016 \u0016 \u0016 \u0016  \u0016 \u0016   \u0016 \u0016 \u0016 \u0016         \u0016 \u0016   \u0016 \u0016 \u0016 \u0016   \u0016 \u0016  \u0016 \u0016 \u0016 \u0016  \u0016 \u0016     \u0016 \u0016     \u0016 \u0016   \u0016 \u0016 \u0016 \u0016     \u0016 \u0016\u0016 \u0016\u0016 \u0016  \u0016 \u0016\u0016 \u0016\u0016 \u0016\u0016 \u0016  \u0016 \u0016\u0016 \u0016\u0016 \u0016\u0016 \u0016\u0016 \u0016 \u0016 \u0016     \u0016 \u0016\u0016 \u0016\u0016 \u0016       \u0016 \u0016\u0016 \u0016\u0016 \u0016\u0016 \u0016  \u0016 \u0016\u0016 \u0016\u0016 \u0016\u0016 \u0016\u0016 \u0016 \u0016 \u0016\u0016 \u0016\u0016 \u0016\u0016 \u0016\u0016 \u0016 \u0016 \u0016     \u0016 \u0016     \u0016 \u0016   \u0016 \u0016  \u0016 \u0016\u0016 \u0016\u0016 \u0016  \u0016 \u0016 \u0016 \u0016     \u0016 \u0016   \u0016 \u0016 \u0016 \u0016   \u0016 \u0016 \u0016 \u0016         \u0016 \u0016     \u0016 \u0016   \u0016 \u0016 \u0016 \u0016   \u0016 \u0016 \u0016 \u0016     \u0016 \u0016     \u0016 \u0016   \u0016 \u0016     \u0016 \u0016 \u0016 \u0016\u0016 \u0016\u0016 \u0016\u0016 \u0016  \u0016 \u0016     \u0016 \u0016   \u0016 \u0016  \u0016 \u0016\u0016 \u0016\u0016 \u0016  \u0016 \u0016\u0016 \u0016\u0016 \u0016\u0016 \u0016\u0016 \u0016     \u0016 \u0016     \u0016 \u0016   \u0016 \u0016 \u0016 \u0016   \u0016 \u0016 \u0016 \u0016\u0016 \u0016\u0016 \u0016\u0016 \u0016\u0016 \u0016 \u0016 \u0016\u0016 \u0016\u0016 \u0016\u0016 \u0016\u0016 \u0016  \u0016 \u0016\u0016 \u0016\u0016 \u0016  \u0016 \u0016\u0016 \u0016\u0016 \u0016\u0016 \u0016  \u0016 \u0016\u0016 \u0016\u0016 \u0016                           \u0016 \u0016\u0016 \u0016\u0016 \u0016    \u0016 \u0016    \u0016 \u0016\u0016 \u0016\u0016 \u0016                          \u0016 \u0016\u0016 \u0016\u0016 \u0016\u0016 \u0016  \u0016 \u0016   \u0016 \u0016 \u0016 \u0016\u0016 \u0016\u0016 \u0016\u0016 \u0016\u0016 \u0016 \u0016 \u0016\u0016 \u0016\u0016 \u0016\u0016 \u0016\u0016 \u0016 \u0016 \u0016\u0016 \u0016\u0016 \u0016\u0016 \u0016\u0016 \u0016 \u0016 \u0016\u0016 \u0016\u0016 \u0016\u0016 \u0016\u0016 \u0016 \u0016 \u0016   \u0016 \u0016 \u0016 \u0016 \u0016 \u0016 \u0016 \u0016 \u0016 \u0016   \u0016 \u0016 \u0016 \u0016\u0016 \u0016\u0016 \u0016\u0016 \u0016\u0016 \u0016 \u0016 \u0016\u0016 \u0016\u0016 \u0016\u0016 \u0016\u0016 \u0016 \u0016 \u0016\u0016 \u0016\u0016 \u0016\u0016 \u0016\u0016 \u0016 \u0016 \u0016\u0016 \u0016\u0016 \u0016\u0016 \u0016\u0016 \u0016 \u0016 \u0016   \u0016 \u0016 \u0016 \u0016                              \u0016 \u0016\u0016 \u0016\u0016 \u0016   \u0016 \u0016\u0016 \u0016\u0016 \u0016   \u0016 \u0016\u0016 \u0016\u0016 \u0016                          \u0016 \u0016   \u0016 \u0016 \u0016 \u0016   \u0016 \u0016 \u0016 \u0016\u0016 \u0016\u0016 \u0016\u0016 \u0016\u0016 \u0016 \u0016 \u0016\u0016 \u0016\u0016 \u0016\u0016 \u0016\u0016 \u0016 \u0016 \u0016\u0016 \u0016\u0016 \u0016\u0016 \u0016\u0016 \u0016 \u0016 \u0016\u0016 \u0016\u0016 \u0016\u0016 \u0016\u0016 \u0016 \u0016 \u0016   \u0016 \u0016 \u0016 \u0016 \u0016 \u0016 \u0016 \u0016 \u0016 \u0016   \u0016 \u0016 \u0016 \u0016\u0016 \u0016\u0016 \u0016\u0016 \u0016\u0016 \u0016 \u0016 \u0016\u0016 \u0016\u0016 \u0016\u0016 \u0016\u0016 \u0016 \u0016 \u0016\u0016 \u0016\u0016 \u0016\u0016 \u0016\u0016 \u0016 \u0016 \u0016\u0016 \u0016\u0016 \u0016\u0016 \u0016\u0016 \u0016 \u0016 \u0016   \u0016 \u0016 \u0016 \u0016\u0016 \u0016\u0016 \u0016                           \u0016 \u0016\u0016 \u0016\u0016 \u0016    \u0016 \u0016    \u0016 \u0016\u0016 \u0016\u0016 \u0016                          \u0016 \u0016\u0016 \u0016\u0016 \u0016\u0016 \u0016 ": "{} {. [bt space phallus]\\n[bt \"C====8*8====D\"] }\n",
  "canadianheckle": "{{cun {}}} {return \"[omg] hey, [name $cun]! You [canadian_object] [canadian_object], eh?\"}\n",
  "newdrudge": "args { http post http://drudgereport.com/cgi-bin/fastfeedback.cgi Send SUBMIT body [join $args]; return \"[join $args \" \"]\\nMESSAGE RECEIVED... WILL CONSIDER AND INVESTIGATE...\"; }\n",
  "hurf": "{} {mapx [seq 1 5] x {hurfle}}\n",
  "abeztalk": "{} {lolqdb 3029}\n",
  "prettylol": "{{who {}}} {if {$who eq \"\"} {set who [lindex_random [names]]}; return \"<$who> that's pretty lol\"}\n",
  "alley": "{{name {}}} {eval \"string map {radeon {[name $name]} trumpet {[overlord_word]} corrosion {[disease_word]} played {[regsub ing [sex_act] ed]} shiny {[mood_word]}} \\[radeon9\\]\"}\n",
  "facebookurl": "{} { subst {http://[choose liberty temple].facebook.com/profile.php?id=[expr 1000000 + [rand 8200366]]}}\n",
  "heyrick": "args {set out [strip_color [join $args]]; set url [rotwt \"@$::whqatwt [strip_all $out]\" [unsort_next $::twatcounts]]; . [string map {\"\\n\" \"\"} \"$url @$::whqatwt: [twitterize $out]\"]}\n",
  "boner": "{} {return [biggaybowtext 8=======D]}\n",
  "why": "args {if {[lrange $args 0 3] == \"should i care about\"} {set n [list [lindex $args 5] [lindex $args 4] [lrange $args 6 end]];set l [string tolower [lindex [split [lindex $args 5] {}] 0]];set u [join [list http://www.deadoraliveinfo.com/dead.nsf/ $l names-nf/ [join [mapx [compact $n] w {string totitle $w}] +]] {}];set h [wget $u];lindex [html [regexp -inline {<TD WIDTH=\"418\">.*?</TD>} $h]] 0} {return \"because\"}}\n",
  "realp": "{} {return \"[pick 1 {return \"Playing\"} 8 {return \"Rebuffering Stream...\"}]\"}\n",
  "patents": "{} {return \"patents are [lindex_random {rokkin awesome cool kewl kawaii ^__^ sweet swedish}]\"}\n",
  "mladbabble": "{} {. [mladsay [arabic] [laugh] [toot]]}\n",
  "buttesmoto": "args { return \"#buttes is the cool place to hang out. You can find most of the cool people there. In #buttes, you can just chill and do whatever and totally relax.  \\\"[join $args]\\\" is the #buttes motto, for example, that's how laid back it is there. Show up if you want to have a good time. Another good reason to show up is if you want to hang out with friends.\" }\n",
  "moira_comic_frame": "{} {let {art {box [embed [canvas 35 12] $art 2 [- 12 [llength [lines $art]]]]}} [ajoin \" \" [wrap [moiradrunk] 19] \\n\\\\ \\n[STmoira*]]}\n",
  ",": "{list args} {global $list;set l [set $list];set a 0;set d 0;foreach e $args {if {[lsearch -exact $l $e] > -1} {incr d} {lappend $list $e;incr a}};. \"$a elements added to \\$$list ($d duplicates skipped)\"}\n",
  "tubebox": "args {apply audioconcat [map $args {x {. http://churchturing.org/x/tube[format %02d $x].wav}}]}\n",
  "alliteral": "{{who {}}} {return \"gotta get me some [alliterate [name $who] $::sexparts]\"}\n",
  "ron_promote": "{} {return \"By moving to the [periodic_metal] standard Ron Paul will promote [shakti_word], [hotbutton] and [capitalize [hate_crime]].\"}\n",
  "anxiouschat": "{} {?? [subst \"\\$::[?? [choose $::anxious_dicts]]\"]}\n",
  "swinglump": "{{who {}}} {regsub lump.u.out [lump $who] swingle\\ ur\\ [sexpart]}\n",
  ":O": "{} { return \"[biggaybowtext \":O\"]\" }\n",
  "jase1": "{} {return \" <jase> yeah im dating someone new \\n <jase> then he sent like 7 txts \\n <jase> saying wahts wrong with me \\n <jase> and whats better with whoever hes d8ing now \\n <jase> i lost it lol \\n <jase> i spent like \\$30 at burger king \\n <jase> and puked it all right after\"}\n",
  "unescape_html_entities": "html {subst [regsub -all {&(?:#?\\d+|[xX][A-Fa-f0-9]+);} [escape [string map $::html_entities $html]] {[unescape_numeric_html_entity \"\\0\"]}]}\n",
  "rSTAMP": "{} {eval [lindex_random [info procs ST*]]}\n",
  "dissolve": "{} {proc solve {} {metasolve}}\n",
  "omgwall": "{} {return \"\\\\_O/..\\\\_O/..\\\\_O/..\\\\_O/..\\\\_O/..\\\\_O/..\\\\_O/..\\\\_O/..\\\\_O/..\\\\_O/..\\\\\\n/..\\\\_O/..\\\\_O/..\\\\_O/..\\\\_O/..\\\\_O/..\\\\_O/..\\\\_O/..\\\\_O/..\\\\_O/..\\\\_O/\\n\\\\_O/..\\\\_O/..\\\\_O/..\\\\_O/..\\\\_O/..\\\\_O/..\\\\_O/..\\\\_O/..\\\\_O/..\\\\_O/..\\\\\\n/..\\\\_O/..\\\\_O/..\\\\_O/..\\\\_O/..\\\\_O/..\\\\_O/..\\\\_O/..\\\\_O/..\\\\_O/..\\\\_O/\";}\n",
  "weapon": "{} {lindex_random $::weapon_dict}\n",
  "zombie": "activity {. \"Zombie no go $activity unless you tell him to $activity.\"}\n",
  "lower": "args {string tolower [join $args]}\n",
  "fml": "{{id random}} {unescape_html_entities [last [regexp -inline {<text>(.*)</text>} [http://api.betacie.com/view/$id/nocomment?key=readonly&language=en]]]}\n",
  "vietaim": "{{nick {}}} {if {$nick eq \"\"} {set nick [rand_aim]}; return \".ai\\m $nick [string map {{  } { }} [strip_color [chingchong]]]\"}\n",
  "jewboy_activity": "{} {lindex_random $::jewboy_activity_dict}\n",
  "unknown:9:cmd/.+er$/": "{matches cmd args} {error [knowher $cmd]}\n",
  "master_num": "{a b c d} { return \"[master_col $a] [master_col $b] [master_col $c] [master_col $d]\"; }\n",
  "blaketomate": "{} {. J Blake. No [choose tomate tomate aorte].}\n",
  "famousnigger": "{} {}\n",
  "omgfart": "{} {embed [omgdude] [rainbow FAAARRTTTE] 12 8}\n",
  "bigPIPE": "{} {return \"|\\n|\\n|\\n|\\n|\"; }\n",
  "funroll": "{} {return \"  ____\\n / __ \\\\\\n/ / _` | FUN\\n\\\\ \\\\__,_| ROLL\\n \\\\____/\"}\n",
  "buyaï£¿?": "{} {wet buy ten macs}\n",
  "islam2": "nick {return \"[upper [kill_verb] those who [insult_verb] $nick]\"; }\n",
  "ceval:gc": "{} {\n  foreach key_and_id [lrange [ceval:keys_with_ids] $::ceval_max_entries end] {\n    cache delete ceval [first $key_and_id]\n  }\n}\n",
  "virusfile3": "{} {return \"[underscore [choose \"[expr {int(rand()*40)+60}]_year_old_\" \"[expr {int(rand()*22)+1}]_month_old_\" \"[expr {int(rand()*8)+1}]_week_old_\" ]\"[celebrity]_[fetish_porn]_[gudrow_word]_[sex_act]_[food_word]_with_[nicklist]_[goon_word]_and_[faglame]_[ethnic_group][virusextension]]\"}\n",
  "bracketize_if": "{p s} {set ret [expr {$p ? \"\\[\" : \"\"}]; append ret $s; append ret [expr {$p ? \"\\]\" : \"\"}]; return $ret}\n",
  "goon_recipe_title": "{method food} {return [string toupper \"*** $method $food (serves 1) ***\"]}\n",
  "kalleboo": "{{who funknut}} {return \"<@$who> My penis smells like chees\"}\n",
  "jewsdidwtc": "{} { ajoin \"\" [stampsay -r -s wtc \"I was done by [jewfullname]\"] [stampsay -l -s wtc \"I was done by [jewfullname]\"]}\n",
  "stampamon": "{} {inject [seq 1 30] [canvas 72 15] {{x o} {embed $x [box [crop [ST*] 0 0 40 10]] [- [rand 82] 10] [- [rand 20] 10]}}}\n",
  "master_games_played": "{{n {}}} {if {$n eq \"\"} {set n [nick]};set l [master_get_stat $n];set s 0;foreach k $l {set s [expr $s+$k]};return $s}\n",
  "unknown_handler": "{args} {if [llength [set handler [apply unknown:handler_for $args]]] {apply $handler $args } else {error \"invalid command name \\\"[lindex $args 0]\\\"\"} }",
  "image-evilcolbert": "img { magick-scale-composite-bottom-right $img http://i.buttes.org/http://h8r.net/no/evilcolbert.png 0.6}\n",
  "cyber_pickup": "{{fart {}}} {if {$fart eq \"\"} {set intro \"hey,\"} else {set intro \"hey $fart,\"}; return \"$intro i'm [a/s/l] and i can't wait for you to [sex_do] my [sexpart] and make my [sex_fluid] gush!\"}\n",
  "monstercable": "{} {return \"the dude at best buy says it holds more amps\"}\n",
  "D8": "args {. \"The phrase \\\"D8\\\" means to be deeply involved in an activity or to perform an activity to the fullest extent possible.\"}\n",
  "rainb": "str {join [blrain [lrange [lines $str] 0 9]] \\n}\n",
  "lq": "{} {img-linuxquality 0}\n",
  "STdance": "{} {. \"\\\\o/\\n \\\\\\\\\\n / \\\\\"}\n",
  "shitongrog": "{} { return \"obviously\" }\n",
  "go:remove_structure": "{x y} {go:render_board [go:set_current_game [go:fill_flood_remove [go:getxy [go:current_game] $x $y] [go:current_game] $x $y]]}\n",
  "aimterdlink": "args {aim -n [aimname $args] \"terdlink is where we press our bare asses together and poo into each other's buttholes\"}\n",
  "%": "{a b} {expr $a%$b}\n",
  "unplural": "{{what {}}} {return [regsub -nocase {men} [regsub -nocase {s$} $what {}] {man}]}\n",
  "females": "{} {bt none}\n",
  "puntmesay": "args {if {$args eq \"\"} {set what [?? $::puntme_dict]} {set what [join $args]}; stampsay -s smallkin [join [list \"$what, \" [loaf2] \".\"] {}]}\n",
  "tomate?": "{} {. \"no tomate.\"}\n",
  "kalle": "{} {format \"Is Kalle stupid or just asking too many questions? %.1f%% lines contained a question!\" [expr {rand()*100}]}\n",
  "p3": "{} {fattyfatheadsay \"excuse  me sirs does anyone know what [string tolower [celebrity]]s [sexpart] and [sexpart] tastes like ??\"}\n",
  "STbulb": "{} { return \" \\\\  /\\\"\\\"\\\"\\\"\\\\  /\\n - |      | -\\n /  \\\\    /  \\\\\\n     |__|    \\n     \\`--'    \";}\n",
  "gentoo": "{} {return \"/usr/bin/gcc -c -pipe -fPIC -Wall -Werror [lselect_random {-D_GNU_SOURCE -D_URMOM_ -DDEBUG } 1] -O[rand 99] [mcpu] [cflags] [hyphenword].c\"}\n",
  "rand_mac_icon": "{} {mac_icon [?? $::icns]}\n",
  "tf2": "{{victim {}} {killer {}} {weapon {}}} {. http://i.buttes.org/index.php/http:/www.mzzt.net/tf2/dark/[or $weapon [?? $::tf2_weapon_dict]]/red/[urlencode [or  $killer [nick]]]/blue/[urlencode [name $victim]].png}\n",
  "yn": "{{who {}} args} {set jk [or [join $args] \"Jack Kennedy\"]; set who [or $who [name]]; . \"$who, I served with $jk; I knew $jk; $jk was a friend of mine. $who, you're no $jk.\"}\n",
  "soliloquy": "{} {return \"To be, or not to be: that is the [butte_word]:\\nWhether 'tis [act_word] in the [gudrow_word] to suffer\\nThe slings and [goon_word] of outrageous [disease_word],\\nOr to take a [food_word] against a sea of [ethnic_group],\\nAnd by [act_word]ing end them? To die: [mood_word];\\nNo more; the [butte_word]-ache and the thousand natural [goon_word]\\nThat flesh is heir to, 'tis a [disease_word].\\n  --[name], Act 3, Scene 1\"}\n",
  "rasta": "{} { return \"Jah rastafari!\" }\n",
  "ubuntu_pua": "{} {subst [string map {pua_object ubuntu_version pua_verb ubuntu_verb} [?? $::pua_anecdotes]]}\n",
  "montspace2": "name {return \"<a href=\\\"http://www.montspace.com/$name\\\">http://www.myspace.com/$name</a>\"}\n",
  "hypnoticmeal": "{} {return [ajoin \" \" [hypnotic] \\n\\n\\n\\n/ [wrap [fatgoonmeal] 50]]}\n",
  "butanconstitution": "{} {. We, the people of the Hodapp, in order to form a more perfect Chipotle, establish Frappuchinos, insure domestic Butans, provide for the common presing, and secure the blessings of 37signals to ourselves and our Macfaginess while denying andrzej access to any and all ex-girlfriends, do ordain and establish this IRC chat log for the United States of Butan}\n",
  "incog4": "{} {return \"         .======.\\n        /((((((()\\\\\\n       ((///    \\\\))\\n      ((/`__   __())   I JUST GOT MY 4CHAN\\n      /`-\\{_o\\}^\\{o_\\}'\\\\  MEMBERSHIP AND BOY AM\\n      \\\\_     _\\\\   _/       I EXCITED!\\n        \\\\  .__,  / \\n         \\\\  `-' / \\n         /`----'\\\\\\n    .-\\\"\\\"\\\"`------'`\\\"\\\"-.\"}\n",
  "bb": "{} {. blackbot, tell `kelowna to shut up}\n",
  "hellonote": "{{name {}}} {return \"<hello> notice how [name $name] does not deny that he is a [random_word]\\n<hello> PLEASE NOTE\"}\n",
  "prophet": "{{who {}}} {return \"[upper ya allah, so says the prophet mohammed (peace be upon him): [kill_verb]] [upper the [infidel_word] [name $who], inshallah, lest he shall [insult_verb] islam.] [rands [+ 6[rand 5]]]\"}\n",
  "a43": "{} {return \"[moira a43], also i love freebsd and [theo]\"}\n",
  "et": "args {subst [string map {* {\u0003[gay],[gay]*\u000f}} [strip_all [bgbt $args]]]}\n",
  "cached_bike": "{} {if [catch bike result] {set result [lindex_random $::cached_bike]}; cache_list cached_bike $result}\n",
  "v:decrypt": "{n m h c t} {\r\n\tcatch \"channel get ${c} {FiSHkey}\" key;\r\n\tset result {};\r\n\r\n\tif {[string length ${key}]} {\r\n\t\t# TODO should /putlog/\r\n\t\tset t [decrypt ${key} ${t}];\r\n\t\tregexp {^([^ ]+) ?} ${t} {} t0;\r\n\r\n\t\t# TODO ~ matches 1 or more space characters (can be used for whitespace between words)\r\n\t\tforeach {h f g i p} [join [binds]] {\r\n\t\t\tif {[string first ${g} ${t0}] != -1 && ${h} == \"pub\"} {\r\n\t\t\t\tset t [string map \"\\\"${g} \\\" {}\" ${t}];\r\n\t\t\t\tuplevel #0 [concat ${p} ${n} ${m} ${h} ${c} [list ${t}]];\r\n\t\t\t};\r\n\t\t};\r\n\r\n\t\treturn $result;\r\n\t};\r\n}\n",
  "aimdrudgestory": "args {  aim -n [aimname $args] [drudgestory] }\n",
  "testy": "{} {set cc [concat $::disease_dict $::penis_dict $::drug_dict $::niggerwords $::jewnames $::jewsurnames $::::muslim_firstname]; set w [lindex_random [lsearch -inline -regexp -all $cc \"t$\"]]; set w [string map {{ } \"-\"} $w]; return \"\u0002$w\u0002bus\"; }\n",
  "pycamid": "{} {return [pyramid pyc\\ \\ ]}\n",
  "infect": "{{who {}}} {me \"gives [name $who] [disease_word]\"}\n",
  "sadunsay": "args {stampsay -s sadun -l [join $args] }\n",
  "ripper_line": "{} { lindex_random $::ripper }\n",
  "scrotalize": "url {. http://scrot.aliz.es/$url}\n",
  "Kori": "args {return \"[color white on black] I like rice\"}\n",
  "thoughtcrime": "{{fag thougtcrime}} {. \"$fag does not entail death; $fag IS death.\"}\n",
  "factorial": "arg { set total 1.0; while {$arg > 1} { set total [expr $total * $arg]; set arg [expr $arg - 1]}; return $total }\n",
  "bigGT": "{} { return \"\\\\\\n \\\\\\n  >\\n /\\n/\"; }\n",
  "jbake": "{} {stampsay -s burger \"J BAKE, NO TOMATE. NUGS. FROSTYS.\"}\n",
  "dflip": "str {flip [vflip $str]}\n",
  "greenspun": "{} {stampsay \"Any sufficiently complicated IRC channel contains an ad-hoc, informally specified, bug-ridden, slow implementation of half of MS Comic Chat.\"}\n",
  "rev_parse": "revision {lindex [lindex [history $revision] 0] 0}\n",
  "oregon_trail_died": "{{name {}}} {return \"[name $name] has died of [lindex_random $::oregon_trail_disease_dict]\"}\n",
  "lolwhat": "lol {return \"\\x01$lol\\x01\"}\n",
  "arab2": "{} {embed [embed [embed [eye [smiles]] [rain [wrap [buttes #arab] 20]] 2 7] [rain [bt #arab]] 1 2] [STdarren] 60 6}\n",
  "crw_verb": "{} {lindex_random $::crw_verb}\n",
  "nimpify": "url { set index 2; set nimp \".on.nimp.org\"; if {$url eq \"\"} { return \"lastmeasure$nimp\"; }; set input [split $url /]; if {[llength $input] == 1} { return \"$url.on.nimp.org\"; }; if {[lc [lindex $input 0]] ne \"http:\"} { set index 0; }; lset input $index \"[lindex $input $index]$nimp\"; return [join $input /]; }\n",
  "seinaim": "{{name {}}} { if {$name eq \"\"} {set name [lindex_random $::gbs_aim_dict]}; return \".a\\im $name and what's the deal with [seinfeld_word] ?\"}\n",
  "dreidle": "{} {bigtext \"fukin jews\"}\n",
  "manhattan_street": "{} {ordinalize [lindex_random [seq 12 165]]}\n",
  "buttes_ad": "{} {embed [tail [head 17 [macro tux]]] \"[color black][crw_word].\\n[color black][onebutan_word].\\n[color black][islam_word].\\n[b][color black][channel][b]\" 5 5}\n",
  "menu": "{} {return \"Press [rand 2] for [random_word].\\nPress [expr \"[rand 2] + 2\"] for [random_word].\\nPress [expr \"[rand 2] + 4\"] for [random_word].\\nPress [expr \"[rand 4] + 6\"] for [random_word].\"}\n",
  "mm\u0002\u0002": "args {return [master_won [nick] [master_gete [nick] 0] [master_gete [nick] 1] [master_gete [nick] 2] [master_gete [nick] 3]];}\n",
  "normalize_tag_url": "url {\n  de-buttes $url\n}\n",
  "onebutan_recommendation_for": "what {switch -glob -- [string tolower $what] \"$::onebutan_recommendation default onebutan_default_rec\"}\n",
  "pumpkin": "{{fart {}}} {if {$fart eq \"\"} {set fart [goons]}; stampsay -s pumpkin $fart}\n",
  "ruin4lyfe": "{} {return \"hiss ruin4lyfe\"}\n",
  "moira": "{{who moira}} {return \"<@$who> brb [booze_act_word] a [drink]\"}\n",
  "master_match": "{i a b c d} { set perfect [master_get_perfect $i $a $b $c $d]; set notperfect [master_get_notperfect $i $a $b $c $d]; set miss [master_get_miss $i $a $b $c $d]; return [list $perfect $notperfect $miss]; }\n",
  "blackjack_dealer_loop": "{} { set o \"The Dealer \"; set r \"HITS\"; while {$r==\"HITS\"} { set r [blackjack_dealer]; set o \"$o\\n $r\"; }; return $o; }\n",
  "cowsay": "{{fart {}}} {stampsay -s cow $fart}\n",
  "tastytip": "{} {hypnosay [gudrize [. [shsc_anecdote] [mmm]]]}\n",
  "tankbattle": "{} {return \"One of the greatest tank battles of the African campaign in World War II took place on [month] [rand 28] of 194[rand 3], between [title] [waspname]'s [rand 180]th [capitalize [sex_act]] Division on one side, and Panzergruppe [capitalize [crw_word]] led by the [muslimtitle] [muslimname] on the other.\"}\n",
  "mel_gibson": "{} {return \"[omg] GIVE ME BACK MY SON\"}\n",
  "w/e": "{} {. \"â('ï½`ï¼)â w/e\"}\n",
  "backpix": "{} {pt catte,[buttes_cat]}\n",
  "nobody": "args {return \"ODYSSEUS THEY RAPED PENELOPE UR 2 LATE SRY\"}\n",
  "buttbot": "{} { return \"<buttbot> REPLACING RANDOM PIECES OF TEXT WITH THE WORD 'BUTT' IS THE HEIGHT OF HILARITY AND REQUIRES MONUMENTAL PROGRAMMING SKILL\" }\n",
  "babelto": "args {apply babelfish $args}\n",
  "hi5party": "{} {smega {string map [list [nick] [name]] [hi5 [name]]} 20}\n",
  "whittle": "{str {amount 3}} {set ret [list]; foreach char [split $str {}] {if {![rand $amount]} {lappend ret $char}}; join $ret {}}\n",
  "chinsay": "fart {return [ajoin \" \" \\n[chins [rand 6]] \\n/ [wrap $fart 50]]}\n",
  "bigmatrix": "{} {matrixify [bigmatix]}\n",
  "56k_word": "{} {return [lindex_random $::56k_words]}\n",
  "et_fullwidth": "{} {}\n",
  "g": "args {set query [join $args]; set results [suggest $query]; if {$results eq {}} return; set length [expr [maxstringlength [lines $results]] - 1]; . http\\://www.google.com/intl/en_ALL/images/logo.gif\\n[format \"\\[[^_] %-${length}s[^_]]\" $query]\\n[ajoin \"\" \" \" $results]}\n",
  "view": "{kind name} {. http://shaniqua.buttes.org/git/shaniqua/blob/?path=${kind}s/[sha1 $name]}\n",
  "rand_comic": "{} {embed [ajoin \" \" [rand_comic_frame] [rand_comic_frame]] jgs 75 14}\n",
  "hero": "{} {return \"sam\"}\n",
  "request": "{} {return \"[act_word] my [body_part]\"}\n",
  "winkatron": "{} {return \"<Winkie> [pick 1 {. \"[name]: sup\"} 1 {. \"oh man\"} 1 {. \"i'm [pick 1 {. \"downloading\"} 1 {. \"reading\"} 1 {. \"watching\"}] a quite terribly interesting [pick 1 { . \"wikipedia article\"} 1 { . \"documentary\"}] on [w_topic]\"} 1 {. \"brb [food_word] in the oven\"} 1 {. \"brb\"} 1 {. \"[name]: i say can you help me with my [pick 1 {. \"perl\"} 1 {. \"php\"} 1 {. \"C++\"}] script mate :)  \"} ]\"}\n",
  "MURR": "{} {return \"YIFF\"}\n",
  "aimspook": "args {aim -n [aimname $args] [spook]}\n",
  "quitjob": "{} {return \"Once I get my MCSE I'm saying goodbye to this [job] job!\"}\n",
  "weaselize2": "str { set ret \"\"; foreach w [split $str] {append ret \"$w \"; switch [rand 4] {0 {append ret \"dook, \"}} {1 {append ret \"YIFF\"}}}; append ret \" DOOK!!\"; return $ret }\n",
  "nickmap": "nick { array_get_default nick_map $nick $nick}\n",
  "empty_formatting": "{} {list b 0 u 0 r 0 o 0 c 0 fg -1 bg -1}\n",
  "go:whitepiece": "{} { uchar 25eF }\n",
  "randlastfour": "{} {return \"[rand 9][rand 9][rand 9][rand 9]\"}\n",
  "tcl_word": "{} {return \"\\[[lindex_random [lsubtract [info commands] [info procs]]]]\"}\n",
  "okwhat": "{} {rain [german [norway [goonsay [catsay [rocketcatsay [nigqdb]]]]]]}\n",
  "republicans?": "{} {c [llength [intersect [string tolower [names]] [string tolower $::republican_count]]] republicans}\n",
  "classicjar": "{} {return {.-. .-. .-.\n|_| |_| |_|\n'=' '=' '='\n snap into \n a vlassic\n   ...jar\n}}\n",
  "shscpumpkin": "{} {while [catch {ajoin \"\u0003\" [stampsay -l -s pumpkin \"\u0003\"] [wt [shsc_word]]} str] {}; return $str}\n",
  "heilhitler": "{} {return \"[ss]\\nHEIL HITLER\"}\n",
  "old_dukeku": "{} {return \"SEX Drinkin Smokin GOin DOwnz to flushin to see mah boi DukEku CHilln'z shootin off mah buddy at dem bloodz fo sho hmm das it niggus Smart Ass Niggu 2 got a 1460 on mah S.A.T.S\"}\n",
  "blakeresume": "{} {ajoin \" \" [STblake] \\n/ \"My qualifications include:\\n[join [map [getnuniq 3 randomblakequalification] {x {. \" â¢ $x\"}}] \\n]\"}\n",
  "tcljre2": "{{oi {}}} {return \"<@jre> tcl return \\\"[word] \\[[word]_word\\] [random_word] \\[[word]_word\\] \\[[name $oi]_word\\] [word] [random_word]\\\"\"}\n",
  "nigrate": "{} {. 1 blx = 0.600 wty}\n",
  "articleize": "word {return \"[expr {[regexp -nocase {^[aeiou]} $word] ? \"an\" : \"a\"}] $word\"}\n",
  "racecar": "{} {. \"Drive the new [bold]2009 [car_brand] [slur]!\"}\n",
  "tellol": "{{who terror} txt} {ajoin [join [wrap [chinee \"<[name $who]> $txt\"] 50]] \"\\n\" [[lindex_random {{flip} {aflip} {.}}] [[lindex_random {{octalc0mg} {octalsay}}]]]}\n",
  "camwhoreurl": "{} {string map {{ } {}} [string tolower [city][sexpart]][tld]}\n",
  "TWAT": "args {twat [string toupper [join $args]]}\n",
  "mapx": "{_l _v _p} {set _r [list];foreach _q $_v {upvar $_q $_q};foreach $_v $_l {lappend _r [uplevel 1 $_p]};return $_r}\n",
  "fancyair": "{notrite sorite} {return \"$notrite? Perhaps it would be more appropriate to say $sorite, am I correct in this assertion?\"}\n",
  "beastmovie": "{} {lindex_random $::beastmovie}\n",
  "hypnosay": "{{fart {}}} {if {$fart eq \"\"} {set fart [hypnofit]}; return [ajoin \" \" \\n[hypnotic] \\n\\n\\n\\n/ [wrap $fart 50]]}\n",
  "radeon": "{} {return \"\u00032<\u0003radeon\u00032>\u0003 I just got a prospective job offer today\\n\u00032<\u0003wangzang\u00032>\u0003 sucking dick down by the docks?\\n\u00032<\u0003radeon\u00032>\u0003 hes going to need another guy\\n\u00032<\u0003radeon\u00032>\u0003 and i told him that i'd do it\"}\n",
  "k&m": "{} {return \"Send in mroach and kalleboo!\\nhttp://stuff.gbsfm.info/hm-ketai3.jpg\"}\n",
  "tunt": "args {apply fu $args}\n",
  "patriot": "{} {next_in_list {04 00 12}}\n",
  "cached_nicklist": "{} {. [nicklist]}\n",
  "catsdaq": "{} {catback [string map {+ UP} [strip_all [stock .IXIC]]]}\n",
  "go:markup_atom": "{x y w h p} {set rw [- $w 1]; set rh [- $h 1]; if {$p == \"empty\"} { set pre \"\"; set suf \"\"; if {$x == 0} {set suf \"left\"} elseif {$x == $rw} {set suf \"right\"}; if {$y == 0} { set pre \"top\" } elseif {$y == $rh} {set pre \"bottom\"}; if {$pre == \"\" && $suf == \"\"} { return \"empty\"}; return \"$pre$suf\";}  { return $p }}\n",
  "brofist": "args {ajoin \"\" [bt [join $args]] \"            __\\n      /Â´Â¯/'   '/Â´Â¯Â¯`Â·Â¸\\n    /'/  /     /    /Â¨Â¯\\\\\\n ('(   Â´    Â´   Â¯~/'   ')\\n  \\\\               '    /\\n   ''   \\\\          _.Â·Â´\\n    \\\\             (\\n     \\\\             \\\\\\n\"}\n",
  "fatheads": "n { foreach i [seq 1 $n] { [fathead $i] } }\n",
  "importsumtcl": "{} {[[cwget http://ossfans.org/paste?id=0b189d] > import]}\n",
  "bj_scores": "{} { set out {}; foreach {p} [array names ::blackjack_score] { lappend out \"$p \\$[blackjack_get_score $p]\"; }; return [join $out \" , \"]; }\n",
  "analprobe": "args {return \"saq is a steaming turd\"}\n",
  "days_since_mac_mini_update": "{} {curse_you_steve \"Mac mini\"}\n",
  "opinion": "{} {lindex_random $::opinion_dict}\n",
  "elin": "{} {return \"http://home.datacomm.ch/uerueluem/elingrindemyr/\"}\n",
  "moira_pua": "{} {return \"Moira [pua_verb] a set of HB[rand 9] [booze_word] bottles\\n[moiracam5]\"}\n",
  "rainvb3": "{root forumid {pagenumber 1}} {rain [join [mapx [vb3_fetch_threads $root $forumid $pagenumber] x {lindex $x 1}] \\n]}\n",
  "myballs": "{} {return \"i'd rather not\"}\n",
  "gappfort": "{} { ajoin \" \" [buttesfort:fort] \"GAPP GAY LOVE SHACK LEVEL [+ 1 [rand 9]]\\n---------------------------\\n\\n[buttesroomlist]\" }\n",
  "randomblakequalification": "{} {lindex_random $::blake_qualification}\n",
  "dstip": "{} {?? $::dstips}\n",
  "Leftmost": "{} {return [leftmost]}\n",
  "colin_white_show": "{} {rainb \"*** The Colin White Show ***\\n[smega {subst [choose \"* silence *\" \"[moira]\" \"huh\" \"what\" \"*glug*\" HAI-OOOOOOOOOOOOOH \"*sound of a bottle breaking*\"]} 4]\\n*** Closing Credits: Colin White - Everything\"}\n",
  "topping": "{} {lindex_random $::toppings}\n",
  "ordinalize": "number {return $number[switch [expr $number % 10] 1 {. st} 2 {. nd} 3 {. rd} default {. th}]}\n",
  "go:whboard": "gb { lrange $gb 1 3 }\n",
  "STshake": "{} {. \" /\\\\     __\\n   \\\\ .-':::.\\n    \\\\ :::::|\\\\\\n   |,\\\\:::'/  \\\\\\n   `.:::-'    \\\\\\n     `-.       \\\\\\n        `-.     |\\n           `-.-'  \"}\n",
  "capitalize": "str {subst [regsub -all {(^| +)(.)} [escape $str] {\\1[string toupper \"\\2\"]}]}\n",
  "biggrids": "{} {join {{ âââââââ       âââââââ        âââ        âââââââ       ââââââââ    ââââââââââââ } {ââââââââ       ââââââââ       âââ        ââââââââ      ââââââââ     ââ      ââ  } {âââ  ââââ      ââââââââ       âââ        âââ  âââ      ââââââââ      ââ    ââ   } {âââ   âââ      ââââââââ       âââ        âââ  âââ      ââââââââ       ââ  ââ    } {âââââââââ âââ  âââ  âââ âââ   âââ  âââ   ââââââââ âââ  ââââââââ âââ  . ââââ     } { âââââââ  âââ  âââ  âââ âââ   âââ  âââ   âââââââ  âââ  ââââââââ âââ     ââ      }} {\n}}\n",
  "chigger": "{} {chinkerize [permute [niggerphrase]]}\n",
  "hodapp": "{} {return \"Eliezer Ben-Hodapp [jewsurname]\"}\n",
  "crazy": "{{beat meat}} {if {$beat eq \"beat\"} {return OH\\ YEAH} {error \"lick from the shaft to the dome of the dick\"}}\n",
  "captain_goatse2": "{} {return \"<@captain_goatse> [whittle \"[grouphug] [island] [random_word]\" 2]\"}\n",
  "broken": "{} {. WHO BROKE PROC?????}\n",
  "dies-at-the-end": "{} {. lol, didnt u know [string tolower [actor]] dies at the end of [string tolower [movie]]?}\n",
  "phpgoon": "{{who {}}} {if {$who eq \"\"} {set who [lindex_random [names]]}; return \"<$who> I saw a homeless guy on the street and i went up to him and yelled \\\"I'M LEARNING PHP... YEEEAHH!\\\" while cocking both my finger guns at him and jerking my head back with a laugh.  Damn it feels good to be alive.\"}\n",
  "altcaps": "args {set b 0;join [mapx [split [join $args] {}] x {set b [expr $b^1];if {$b} {set x [string toupper $x]} {set x [string tolower $x]};set x}] \"\"}\n",
  "fill": "{} {return \"I want to fill you with my [choose \"manhood\" \"wang\" \"tiny azn dick\" \"huge Aryan cock\" \"giant black cock\" \"shriveled Norwegian penis\" \"dick\" \"dong\"]\"}\n",
  "onnotice:post": "{} {http post http://www.shipbrook.com/onnotice/. line1 [lindex $::onnotice_list 0] line2 [lindex $::onnotice_list 1] line3  [lindex $::onnotice_list 2] line4 [lindex $::onnotice_list 3] line5 [lindex $::onnotice_list 4] line6 [lindex $::onnotice_list 5] line7 [lindex $::onnotice_list 6] line8 [lindex $::onnotice_list 7]}\n",
  "notsanchez_herpderp": "args {set out [strip_color [join $args]]; set url [lindex [http post http://cryptosystem.org/projects/twitter/sanchez.cgi twat [strip_all $out]] 2]; . [string map {\"\\n\" \"\"} \"$url : [twitterize $out]\"]}\n",
  "literalka": "{} {ajoin \" \" [cswas] [xdick] [cswas]}\n",
  "rocketcat": "{} {return \"       -    -  --  /|_/|\\n                  |\\[\\[===\\]\\n            - --   \\\\ ^/\\n                  /   |\\n      -  - (\\\\    /    |\\n            \\\\\\\\  /   |||\\n         __================\\n - = = ()__|              |\\n  -  = ()___\\\\____________/\"}\n",
  "estrogen": "{} {. What a terrible day! First, [innerfml]. Then [innerfml]. And to top it all off, [innerfml]. FML!!}\n",
  "wkrphrase": "{} {return \"[lindex_random $::wkr_dict]\"}\n",
  "skittles": "{} {ajoin \"\" \\n\\n\\n[ncock 3] [rainbow [flip [stream 10 3]]] [rainbow \"[stream 10 10] taste the rainbow\"]}\n",
  "aimmanagementreason": "{{n {}}} {aim -n [aimname $n] [managementreason]}\n",
  "aaron_deleted": "args {. I deleted [or [join $args] [?? $::mac_apps]] because I was tired of looking at it.}\n",
  "citysuffix": "{} {lindex_random $::citysuffixes}\n",
  "beck": "args {return \"[color white on black]$args, [color blue on black]Glenn Beck[color white on black] thinks you're a racist [niggerword]\"}\n",
  "rolloffle": "{} { goonsay [niggerize [shsc_thread]] }\n",
  "lindex_random_nz": "list {lindex $list [expr [rand [expr [llength $list]-1]]+1]}\n",
  "headline": "{} {return \"[string toupper [subst [join [lselect_random $::drudge_headlines 1]]]]\\nBy [waspfirstname] [jewsurname], [source]\"}\n",
  "mroach5": "{} {smega {join [smega {pick 50 {. \"[bold]FONEZ \"} 1 {. \"[bold]SINGAPORE \"}}]}}\n",
  "urlencode": "str {\n  set chars [list]\n  foreach char [split $str {}] {\n    if [regexp -nocase {[-_a-z0-9]} $char] {\n      lappend chars $char\n    } else {\n      binary scan [encoding convertto utf-8 $char] H* bytes\n      lappend chars [regsub -all .. $bytes {%\\0}]\n    }\n  }\n  join $chars {}\n}\n",
  "replace_exact": "{list str} {foreach {a b} $list {array set r [list $a $b]};foreach n [array names r] {if {$n eq $str} {return $r($n)}};return $str}\n",
  "fathostgoon": "{} {return \"[goonhost], [fastfood] [goonhost] with [goonhost], [fatcookingword] in the [cooking_appliance] for [expr {int(rand()*5)+2}] minutes and top off with [gamer_phrase]. [fatgoon_finale].\\n[goonsay]\"}\n",
  "pleaselikeme": "{} {rain [embed [embed [canvas 60 20] [join [repeat 20 {. [string repeat { } [rand 24]] [subst [. {[} [lindex_random {weaselize underscoreize niggerize engimize canadianize chinkerize homoize articleize kallebooize}] \"\\\"[name]: do you like me ._Â·\\\"\" {]} ]]}] \\n] 1 1] [bt ?_?] [expr [rand 40] + 20] [expr [rand 17] + 2]]}\n",
  "cutback": "args {embed [civguy] \"YOU CAN'T CUT\\nBACK ON\\n[wrap [upper [join $args]] 13]!!\\n\\nYOU WILL\\nREGRET THIS!!\" 34 2}\n",
  "gay_random": "{} {eval [lindex_random $::gay_randoms]}\n",
  "disgustsam": "{{who sam}} {. $who: [img-disgustsam]}\n",
  "tcc_thread": "{} {subst [string map {shsc_word winkz_word shsc_thread tcc_thread} [lindex_random $::shsc_thread_dict]]}\n",
  "cellronpaul": "{} {smega {aim -n [cellphonenumber] Vote Ron Paul! [odin]}}\n",
  "corydoctorow": "{} {return \"<[name]> [hotbutton]\\n<CoryDoctorow> haha\"}\n",
  "blogentry:mkblogentrywords1": "{} {set ::blogentrywords1 [lgrep {^[A-Z].*?(?:ic|ian|ite|ican|ede|ese)$} [words]]}\n",
  "unixrandpath": "{} {unix_path [expr {int(rand()*7)+2}]}\n",
  "setwu": "{{who {}} sta} {set ::wu([name $who]) $sta}\n",
  "yeah": "{} {. http://churchturing.org/x/yeah.mp3}\n",
  "sayjapan": "{{propa {}}} {set wstring [join [times [expr [string length $propa ]+7]  {}]]; return \"[color white on white]$wstring\\n[color red on white]   [name $propa]   \\n[color white on white]$wstring\"}\n",
  "unknown:2:line/^((\\d+)['â²]|(\\d+)['â²]\\s*(\\d+)[\"â³]|(\\d+)[\"â³])$/": "{matches args} {set line [first $matches]; set result 0; if [regexp {(\\d+)['â²]} $line {} ft] {incr result [expr $ft*12]}; if [regexp {(\\d+)[\"â³]} $line {} in] {incr result $in}; return $result}\n",
  "niklas": "{} {bt TWO EARS}\n",
  "lastfm:lasttrack": "user {set out \"\"; catch {set out [cache get lastfmlasttrack $user] }; return $out}\n",
  "STtardbird": "{} {return \"       ,\\n    _,-\\\"\\\"-._\\n  ,\\\"        \\\".\\n /    ,-,  ,\\\"\\\\\\n\\\"    /   \\\\ | o|\\n\\\\    `-o-\\\"  `-',\\n `,   _.--'`'--`\\n   `--`---'\"}\n",
  "fastmystery2": "{{who {}}} {set mysteryproc [lindex_random [info procs]]; if {$who eq \"\"} { if {[llength [info args $mysteryproc]] < 1 } { set mysteryresult [eval $mysteryproc]; return \"$mysteryresult\" } else { fastmystery2 }} else { if {[llength [info args $mysteryproc]] == 1 } { set mysteryresult [$mysteryproc $who]; return \"$mysteryresult\" } else { [fastmystery2 $who] }}}\n",
  "aaron_lease": "{} {. <[name]> hey aaron, would you like to lease a [pick 1 appliance_word 1 mac_word 1 car_word] for $[rand 10 1000] a month}\n",
  "space_phallus": "{} {. [bt \"space phallus\"]\\n[bt \"C====8*8====D\"] }\n",
  "hodapdeal": "{} {. \"DEATH TO NIGGERS\"}\n",
  "macroname": "{name args} {set body @$name\\n[cwget http://buttes.org/macros/$name]; set rest [repeat [llength [regexp -all -inline {%-?\\d*s} $body]] name]; apply {format $body} [concat $args $rest]}\n",
  "twitter_submit": "v {http post http://givingin.org/twitter/tweet.cgi twat [strip_all $v]}\n",
  "aimf_rotflmao": "args {aimify rotflmao $args}\n",
  "pres": "args {press $args}\n",
  "image-say": "{url txt} {set str [wrap $txt 30]; magick_scheme (let ((img (image $url )) (balloon (image [tuxpaintstamp speech]))) (composite img (annotate balloon 14 25 25 black \\\"[scheme_escape $str]\\\") (- (width img) (width balloon))  0))}\n",
  "efite": "{} {mega wet {efite}}\n",
  "rndtcl_expression": "n {pick 5 rndtcl_variable 5 {return \"\\[[rndtcl_proc]\\]\"} 1 {rndtcl_if $n} 1 {rndtcl_expr $n} 1 rndtcl_string}\n",
  "gender": "{} {lindex_random $::gender}\n",
  "goofy": "{} {return \"                  .\\n                \\\\ | /\\n                _\\\\|/_\\n              .' ' ' '.        ___\\n            _.|.--.--.|.___.--'___`-.\\n          .'.'||  |  ||`----'\\\"`   ``'`\\n        .'.'  ||()|()||\\n.___..-'.'    /       \\\\\\n`----'\\\"`     /   .-.   \\\\\\n            (.'.(___).'.)\\n             `.__.-.__.'\\n        jgs   |_|   |_|\\n               `.`-'.'\\n                 `\\\"`\\n\"}\n",
  "octalc0de3": "{} {return \"\u00032Welcome to the brave new world of the 13 year-old Internet terrorist.\u0003\"}\n",
  "tinyokey": "{} { return \"[color blue]Tiny Okey[color] [color red][ok_perform][color]!\"}\n",
  "std": "{} {lindex_random $::std_dict}\n",
  "overheard_in_sweden": "{} {set one [swede_name]; set two [swede_name]; if {$one eq $two} {append one \" #1\"; append two \" #2\"}; return \"$one: [swede_sentence]\\n$two: [[choose overheardline niggerphrase]]\\n$one: [swede_word]\\n-- [swede_city]\"}\n",
  "STshoe8": "{} {join {{  ___          } {(|'. `\\        } { |  : |        } { |  ; |        } { |.'  |-       } { /`-.  '.      } { \\   :_  `'-.  } { `\"\"\"` `-----' }} \\n}\n",
  "STaxe": "{} {return \"      _  \\n  /\\\\ ) \\\\ \\n<=()=>  )\\n  || )_/ \\n  ||     \"}\n",
  "song_troll": "{} {. \"I love [lindex_random $::musicartists]'s music, [lindex_random $::songs] is probably my favorite\"}\n",
  "buttescrime": "{{fag {}}} {set fag [name $fag]; set krag [apply [?? {crw_word gay_word}] {}]; return \"\u000313$fag does not entail $krag; $fag IS $krag.\"}\n",
  "kill_self": "{} {return \"On [day] [daypart], I will kill myself with [suicide], I have nothing else to live for, [choose \"[celebrity]\" \"[political_figure]\"] has betrayed me, [lastwords]\"}\n",
  "mystery3": "{} {set mysteryproc [lindex_random [info procs]]; if {[llength [info args $mysteryproc]] eq 1 } { set mysteryresult [eval $mysteryproc [random_word]]; return \"output of proc $mysteryproc:\\n$mysteryresult\" } else { mystery3 }}\n",
  "unknown:nick/aaron/": "{name cmd args} {error \"can't rent \\\"$cmd\\\": no such lease\"}\n",
  "randmeasure3": "{} {return \"http://[singlerandomword].on.nimp.org/download/[fetish_porn].html/?u=[singlerandomword]\"}\n",
  "sendqhelix2": "word {rain [regsub -all \"\\x0f\" [mega join [map [. [seq 10 1] [seq 1 10]] {n {. [aflip [cosharc $word $n]]}}] \\n] \"\"]}\n",
  "fibonacci": "x {if {$x <= 1} { return $x; }; return [expr [fibonacci [expr $x-1]] + [fibonacci [expr $x-2]]]}\n",
  "5stamp": "{} {return \"___\\n\\\\___\\n  __)\"}\n",
  "film_about": "args { . [capitalize \"[articleize [shakti_adj]] [name]\"]: A film about [crw_word].}\n",
  "language_word": "{} {return [lindex_random $::language]}\n",
  "pinkchink": "{} {return [pink [chinkerize [octalemo]]]}\n",
  "image-death": "url {magick_overlay $url [~magick_id http://churchturing.org/x/deathoverlay.png]}\n",
  "resetbasetime": "{} {  cache put ourtime time  [clickwasec] }\n",
  "phubuh": "args {if {[lindex $args 0] eq \"\"} {set no [lindex_random [list [random_word] [lindex_random [names]]]]} {set no [lindex $args 0]}; if {[lindex $args 1] eq \"\"} {set in [random_word]} {set in [lindex $args 1]}; return \"no $no in $in chat pls\"}\n",
  "gis_results": "query {map [select [regexp -all -inline {imgurl\\\\x3d(http.+?)\\\\x26} [6~http://images.google.com/images?[? safe off q $query]]] {match {not [regexp ^imgurl $match]}}] [& urldecode]}\n",
  "debug_color": "str {string map {\u0003 ^C \u0002 ^B \u001f ^_ \u0016 ^V \u000f ^O} $str}\n",
  "fixmac": "{} {macguy Did you [?? $::mac_fix]?}\n",
  "riffic": "{} {. <riffic> where the hell is $::next_osx_ver, steve}\n",
  "sabotage": "args {return \"[color blue on black]Oh no! There's $args in my boot\"}\n",
  "niggername": "{} {choose [niggerman] [niggerwoman] [famousniggerman] [famousniggerwoman]}\n",
  "cached_fart": "{} { set out [lindex_random $::cached_fart]; if {[rand 6] == 0} { catch { set out [fart]; lappend ::cached_fart $out} }; return $out; }\n",
  "spin": "{} {stampsay -s david [dreidel]}\n",
  "fiShmech": "{} {return \"fishmech is short for [word ^fish] [word ^mech]\"}\n",
  "mroachpolicy": "{} {. \"<mroach> if I were dictator of [capitalize [?? $::socialist_country]] I'd never allow [?? $::socialist_word]\"}\n",
  "dinosaurcity": "{} {rexsay \"[jerkcity][choose \".\" \"!\" \"!!\" \"?\" \"?!\"]\"}\n",
  "avi": "{} {overlay [embed [canvas 24 24] [STcatbus] 5 1] [embed [canvas 20 15] [ncock 4] 0 5]}\n",
  "catbus_poem": "{} { join [list {O Catbus! my Catbus! at the bus stop you come;} {The rain has soak'd our girly heads, the coats we brought are gone;} {I see your light, I hear your feet, my mind is filled with wonder,} {While follow eyes the light beacon, the eyes of sun and shine;} {  But do stop! stop! stop!} {    O the thunder of your speed,} {      Where on our cheeks your wind blows by,} {        Ceaseless flight and legs.}] \\n}\n",
  "montspace": "{} {return \"Hey guys check out my montspace!\"}\n",
  "oblique": "{{who {}}} {. \"My old friends here know - I cannot stand [name $who]. I just loathe him. I cannot stand the way he talks or looks pompous. He makes me cringe everytime I look at him. To sum up - I hate him.\"}\n",
  "tragedy": "args {embed [embed [embed [embed [embed [embed [canvas 1 10] [flip [omgwall]] 1 1] [lmoot [join $args]] 1 1] \"O_/..\\\\O_/..\\\\O_/..\\\\O_/\" 1 1] \"..\\\\O_/..\\\\O_/..\\\\O_/\" 1 2] \"O_/..\\\\O_/..\\\\O_/\" 1 3] \"\\\\O_/\" 3 4}\n",
  "tinfoil": "args {string map {k \u000304KKK\u000f s \u000303$$$\u000f K \u000304KKK\u000f S \u000303$$$\u000f} [join $args]}\n",
  "disorder": "{} {return \"[psych1] [psych2] [psych3]\"}\n",
  "saq3": "{} {saqsay \"i wont have any shortage of job security with genius's like you around\"}\n",
  "octalc0de5": "{} {return \"<octalc0de> windows can't be riced\"}\n",
  "drudge": "{} {set html [wget http://drudgereport.com/]; concat [list [drudge_major_story $html]] [drudge_minor_stories $html]}\n",
  "zing": "who {set who [subst ${who}]; . \"[rbt DRUMROLL]\\n   [hacker [. ${who} made a zinger]]\"}\n",
  "emoji": "{} {uchar f8ff}\n",
  "urmom": "{} {bt urmom}\n",
  "alyssa_hindle": "{} {return \"\u0002Alyssa Hindle\u0002 (EC 305)\\nThis summer you can find Alyssa working and living in the city of totems, otherwise known as Duncan.  As far as work goes, lifeguarding is her game, so you can find her lazing about pool-side while simultaneously saving lives.  When she is not busy laying in the sun you can find her floating down a river or wakeboarding!\"}\n",
  "anxiouscomic": "{{text {}}} {hardchatscomic [or $text [ircify [repeat 5 {anxiouschat}]]]  \"#anxious\" buttsian \"[name]\"}\n",
  "macrumors:post": "{{id 0}} {if {$id == 0} {set id [rand [~macrumors:last_post_id]]}; html [lindex [regexp -inline {<!-- google_ad_section_start -->\\n(.*?)\\n<!-- google_ad_section_end -->} [~http://forums.macrumors.com/showpost.php?p=$id]] 1]}\n",
  "yiff2": "{{who {}}} {act \"[furry_verb] [name $who]'s [furry_noun]\"}\n",
  "STdongboy": "{} {return \"      |||\\n     O_O\\n    _/ /\\n   /( Y)\\\\\\n  ^  /\\\\  ^\\n    `  `\"}\n",
  "aimf_facebooklm": "args {aimify facebooklm $args}\n",
  "captain_goatse": "{{who {}}} {if {$who eq \"\"} {set who [lindex_random [names]]}; return \"<$who> what is a peniswrap? is it when a cut guy fucks uncut guy in the foreskin?\"}\n",
  "cherri": "args { return \"[color white on black]When [color red on black]Cherri[color white on black] sits around $args, she really sits around $args\"}\n",
  "lisa": "{needs braces} {return \"dental plan\"}\n",
  "test_proc": "{} { catch { set k \"faggots\" } ret; return $ret }\n",
  "mirc": "{} {return \"Chats can get wild and woolly, and anyone (male or female) who takes on a female persona is likely to be hit on. There is indeed a great deal of sextalk, sleaze and garbage on IRC, and one should exercise caution in allowing children to access the IRC without supervision. But, as an adult, you are free to visit only the channels you choose, and there is also a great deal of positive communication going on.\"}\n",
  ":3": "{} {bt :3}\n",
  "bggrbt": "args {apply {ajoin \" \"} [map [split [join $args] {}] {letter {grbt [?? $::color_names] [?? $::color_names] $letter}}]}\n",
  "auklebaukleauk": "{{penis Whatbot}} {return \"$penis: [crw_word]\"}\n",
  "air": "{notrite sorite} {return \"$notrite more like $sorite am i rite?\"}\n",
  "encwt": "args {ajoin \"\" \"\\n[ctrlv]\\n[ctrlv]\\n\" [bt [join $args]]}\n",
  "taps_wi": "{} {?? $::taps_wi_dict}\n",
  "rot:maxdims:test": "{} {\n    set t [list [list 5 4 3] [list 1] [list 6 6 6 6] [list 1]];\n    if {[rot:maxdims $t] == \"4 4\"} { return \"SUCCESS\"; } { return \"FAILURE\";}\n}\n",
  "title_each": "args {join [map [join $args [split $args { }]] {word {string totitle $word}}] { }}\n",
  "panties": "{{args {}}} {return \"[name $args]: what kind of panties are you wearing?\"}\n",
  "renice": "{} {return \"Speed Hacks have been Applied\"}\n",
  "bighate": "{{hater {}} {hated {}}} {if {$hater eq \"\"}  {set hater [lindex_random [names]]}; if {$hated eq \"\"} {set hated [lindex_random [names]]};  hate [bigtext $hater] $hated}\n",
  "slot_pull_value": "stamps {set s [lsort $stamps]; set m [slot_stamp_max_value]; set c [llength [info procs ST*]]; if {([lindex $s 0] eq [lindex $s 1]) || ([lindex $s 1] eq [lindex $s 2])} {set x .2} elseif {[lindex $s 0] eq [lindex $s 2]} {set x 1} else {return [slot_pull_value_single $stamps]}; expr {int($::slot_jackpot * $x)}}\n",
  "buttespatch": "{{n 20}} {aflip [randart $n $n $n]}\n",
  "citytale": "{} {return \"[city] is a cruel and crazy town on a filthy river in [direction] [state] with no zoning laws and a culture of sex, money and violence. It's a shabby sprawling metropolis ruled by brazen women, crooked cops and super-rich pansexual cowboys who live by the code of the West -- which can mean just about anything you need it to mean, in a pinch.\"}\n",
  "unknown:1:cmd/^\\^(\\^*)([^\\/]*)\\/(.+)$/": "{matches cmd} {^ [string length [lindex $matches 1]] [lindex $matches 2] [lindex $matches 3]}\n",
  "aimasl": "args {aimify asl $args}\n",
  "lmaoevilpie": "{} {return \"<@ScheisseGern> oh you need to edit system->bonobo->bonobo-conf->conf-libs-conf-OrBIT2-devel->work_without_PAM in gconf\\n<@evilpie> fucking gconf >:o\\n<@evilpie> worst idea ever\\n<@evilpie> well'\\n<@evilpie> im kinda fucked\\n<@evilpie> since there is no system->bonobo\\n<@evilpie> i also tried seraching by key words 'pam' and 'PAM'\"}\n",
  "black_man": "args {return \"[BLACK_MAN]\"}\n",
  "catagenda_for_export": "{{cat {}} {n 4}} { set cat [buttes_cat_or_other $cat]; set starttime [+ [rand 6] 9]; return \"[upper $cat] AGENDA:\\n[join [mapx [szip [seq $starttime [+ [- $n 1] $starttime]] [getnuniq $n catagenda:event]] x {ljoin [gayagenda:time [car $x]] \" \" [wrap [upper [cadr $x]] 10]}] \\n]\"}\n",
  "moirastone1": "{} {return \"The Moira On-line has three internal trap circuits (Microwave, RF and Electric Field) to absorb the broadest spectrum of alcohol impurities. It improves potency for virtually all-major liquors, and has also been shown to measurably increase taste when placed on beers.\"}\n",
  "dndgoon": "{} {goonsay \"Some [dnd_word], [animal_word] [dnd_word] with some [dnd_word], [fatcookingword]  in the [cooking_appliance] for [expr {int(rand()*5)+2}] minutes and top off with some [dnd_word]. [fatgoon_finale].\"}\n",
  "csplit": "s {\n\tset f 0;\n\tset r [list];\n\tset a [list];\n\tset e [list];\n\tset i 0;\n\tforeach c [split $s \"\"] {\n\t\tswitch -- $f {\n\t\t\t0 {\n\t\t\t\tswitch -- $c {\n\t\t\t\t\t\u0003 {set f 1;set b \u0003}\n\t\t\t\t\t\u0002 {lappend e [list $i \u0002]}\n\t\t\t\t\t\u001f {lappend e [list $i \u001f]}\n\t\t\t\t\t\u000f {lappend e [list $i \u000f]}\n\t\t\t\t\t\u0016 {lappend e [list $i \u0016]}\n\t\t\t\t\tdefault {lappend a $c;incr i}\n\t\t\t\t}\n\t\t\t}\n\t\t\t1 {\n\t\t\t\tswitch -regexp -- $c {\n\t\t\t\t\t\\\\d {append b $c;incr f}\n\t\t\t\t\tdefault {lappend e [list $i $b];lappend a $c;incr i;set f 0}\n\t\t\t\t}\n\t\t\t}\n\t\t\t2 {\n\t\t\t\tswitch -regexp -- $c {\n\t\t\t\t\t\\\\d {append b $c;incr f}\n\t\t\t\t\t, {append b $c;set f 4}\n\t\t\t\t\tdefault {lappend e [list $i $b];lappend a $c;incr i;set f 0}\n\t\t\t\t}\n\t\t\t}\n\t\t\t3 {\n\t\t\t\tswitch -- $c {\n\t\t\t\t\t, {append b $c;incr f}\n\t\t\t\t\tdefault {lappend e [list $i $b];lappend a $c;incr i;set f 0}\n\t\t\t\t}\n\t\t\t}\n\t\t\t4 {\n\t\t\t\tswitch -regexp -- $c {\n\t\t\t\t\t\\\\d {append b $c;incr f}\n\t\t\t\t\tdefault {lappend e [list $i $b];lappend a $c;incr i;set f 0}\n\t\t\t\t}\n\t\t\t}\n\t\t\t5 {\n\t\t\t\tswitch -regexp -- $c {\n\t\t\t\t\t\\\\d {append b $c;lappend e [list $i $b];set f 0}\n\t\t\t\t\tdefault {lappend e [list $i $b];lappend a $c;incr i;set f 0}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn [list $a $e]\n}\n",
  "swastika": "v {foreach {w h} [maxdims $v] {set n [rot:max 0 [- $w $h]]; set nl [string repeat \\n $n]; set ns [string repeat \" \" $n];  return [ajoin \"\" [ajoin \"\"  $ns [arotate270 $v]] $nl$v]\\n[ajoin \"\" [arotate180 $v] [arotate90 $v]] }}\n",
  "STandrzej": "{} {. \"  ______\\n |  o  o|\\n/     >  \\\\\\n\\\\_____O__/\"}\n",
  "gentoouser": "{{who {}}} {if {$who eq \"\"} {set who [lindex_random [names]]}; return \"<$who> Ever since I started compiling with [cflag] [cflag] [cflag] I've seen a noticable increase in the [shakti_word], [shakti_word], and [shakti_word] of my applications.\"}\n",
  "moretequilashots?": "{} {mega wet of course}\n",
  "puntime": "{} {return \"puntime more like giant faggot\"}\n",
  "scheissegern": "{} {rainbow [ajoin \" \" [david] [david] [david] [david] [david]]}\n",
  "easter": "{{size 20}} {eval [concat [list ajoin \"\u0016\"] [string repeat {[gaystripe] } $size]]}\n",
  "STcastle": "{} {return \"    <I       \\n^^^  |    ^^^\\n|u|_^^^^^_|u|\\n|_  u _ u  _|\\n  |__|;|__|  \"}\n",
  "log_text": "l {map $l [& cadddr]}\n",
  "STmoirabald": "{} {return \"   ______\\n .`      `.\\n |        |\\n |_  _   .|\\n  6  6   `)\\n | /_     |\\n  \\\\ _,  / |\\n   \\\\__.'  |_\"}\n",
  "terrorist": "{} {return \"[arabic] [string toupper [spook]] [arabic]\"}\n",
  "penis_song": "{} { join $::penis_song_lyrics \"\\n\" }\n",
  "talkpiss": "who { . u know wtf is so funny about $who he loves talk about something he knows fuckall about this is why he is called mr talkpiss moahahaha}\n",
  "niggertoss": "{} {return \"[niggercoin]\"}\n",
  "drudgestories": "{} {string toupper [subst [join [lselect_random $::drudge_headlines 10] \\n]]}\n",
  "buttbuttbutt": "{} {return \"!butt tcl buttbuttbutt\"}\n",
  "stereotype": "{{nick {}}} {set nick [or $nick [name]]; ajoin \" \" [choose [STblake] [STgoon]] \"You know $nick is a goddamn cliche if they do any of the following:\\n[join [map [getnuniq 3 \"cliche $nick\"] {x {. \" â¢ $x\"}}] \\n]\"}\n",
  "presfest": "args {. [uchar 2708] presfest[uchar 275a 275a]}\n",
  "randfeld": "{} {eval [lindex_random [info procs *feld]]}\n",
  "raw_fahrenheit": "{} {private_to conditions; regexp -line {([0-9]+\\.?[0-9]*|\\.[0-9]+)} [myt] t; . $t}\n",
  "smokedetector": "{{args {}}} { return \"[name $args]: please check the batteries in your smoke detector\" }\n",
  "pauzed": "args {return \"\\< pauzed\\> ready to ride $args\"}\n",
  "swingler": "{} {swastisay ///c/lear}\n",
  "medianhello": "{} { lolqdb 645 }\n",
  "man": "{} {return \"Quit: \u0002\u00030,3KaRaNLÃ½K ÃÃ½R GÃ©CÃ© WÃ© LaNÃ©THLÃ©NMÃ½$ GoKYuZuNÃ© ÃaQÃ½YoRuM aKLÃ½Ma SÃ©N GÃ©LiYoRSuN GoZLÃ©RiMDÃ©N YaS YÃ©RiNÃ© KaN aKiYoR.aRTiK SaNa oZLÃ©M YÃ©RÃ½NÃ© NÃ©FRÃ©TH DuYuYoRuM.SÃ©NÃ½ aSLa aFFÃ©TMÃ½CÃ©M Ã©CÃ©LÃ½N oLMaK Ã½CÃ½N GÃ©RÃ½ DoNÃ©CÃ©GIM.CuNKu SÃ©N BÃ©NÃ½ oLDuRDuN Ã½CÃ½MDÃ©KÃ½ SÃ©NÃ½ oLDuRDuN..! SenDeN NeFreT EdiYoruM \u000f\u00037B\u0002\u001fy \u0002M\u001f\u0002a\u0002N\u000f\"}\n",
  "unknown:nick/aenima/": "args {error [dikkyize $args]}\n",
  "nwo_chemical": "{} {?? $::nwo_chemicals}\n",
  "copyright": "{} {. \"http://planetwebdesign.com/badge.gif \\n[bold][color red]MEMBER OF THE\\n[bold][color red]ALLIANCE for the PROTECTION of INTERNET COPYRIGHTS\"}\n",
  "al_insult2": "{} {while {!$boners} {set dicks [al_man_word]; set boners [lindex_random [lfilter [string index dicks 0]* $al_hat_dict]];}}\n",
  "go:newboard": "{w h board} { return [list go:board $w $h $board] }\n",
  "rectangle": "{} {return \" ___ \\n|___|\"}\n",
  "chinaescher": "{} {regsub -all {\\.} [escher] -}\n",
  "aimf_dune": "args {aimify dune $args}\n",
  "elote": "{} {return \"error: object does not exist \\\"elote\\\"\"}\n",
  "zapanig_dict": "{} {lindex_random $::zapanig_dict}\n",
  "winks": "{} {return \"<@Winkie> [pick 1 {return \"*drool*\"} 3 {return \"[lindex_random {D H}]URR[string repeat R [rand 50]]\"}]\"}\n",
  "aimf_cached_onehug": "args {aimify cached_onehug $args}\n",
  "matrix_error": "{} {[return [matrixify \"Warning: Error in the Matrix\\n\"][matrixify [unicode_abuse [bigmatix]]]]}\n",
  "aimfurcism": "{{who {}}} {aim -n [aimname $who] [furcism]}\n",
  "butteshug": "{{n {}}} {set n [name $n];join [mapx [split [grouphug] \\n] l {concat \"<@$n> $l\"}] \\n}\n",
  "pick10": "{list {n 10}} {set r [list];set e [llength $list];for {set i 0} {$i < $n} {incr i} {lappend r [lindex $list [rand $e]]};return $r}\n",
  "dental plan": "{} {return \"lisa needs braces\"}\n",
  "permission": "{{typechar -}} {set first \"r[choose w -][choose s S x x x x x - - - - -]\"; if {\"$typechar\" == \"d\"} { set first [regsub {.$} $first [choose x x x x x s]] }; set second [permission_permute $first 2]; set third [permission_permute $second 3]; return \"$typechar$first$second$third\"}\n",
  "spacecow": "{{who {}}} { return \"          i--i         \\2ATTN [upper [name $who]] ITS TIME\\2\\n     (=((oo)) /   \\2TO GET HIGH AND WASTED\\2\\n    /(+((__)    \\n   * ||=--||      \\n      '''     '''      \";}\n",
  "08candidate": "{} {?? $::08candidate}\n",
  "bleep": "{} {return \"<bleep> i just booted [os] on my [device_dict]\"}\n",
  "gaybook": "{} { return \"[?? $::learning_book_title_prefix] [capitalize [crw_word]] [subst [?? $::learning_book_title_suffix]]\" }\n",
  "get-last-twats": "{user {n 10}} { map [html [regexp -all -inline {<text>(.*?)</text>} [wget http://twitter.com/statuses/user_timeline/$user.xml?count=$n]]] {{x y} {. $x}} }\n",
  "diamond": "str {set ret [list]; foreach i {1 3 5 7 9 7 5 3 1} {lappend ret [center [string repeat $str $i] [expr {[string length [strip_all $str]]*9}]]}; join $ret \\n}\n",
  "scheissegern4": "{} {return \"ScheisseGern:  how's your [drug] addicted roommate with [disease] doing\"}\n",
  "nicecat": "{} {. [pt cat] [arcade \"nice pussy!\" pabom 6]}\n",
  "STmohammed": "{} {return \"        \u0003[color 8].   .[color]\\n         \u0003[color 8]\\\\;/[color]\\n        \u0003[color 8]..\u0003[color 7]*\u0003[color 8]`.[color]\\n         / \u0003[color 8]\\\\[color]\\n      ../\\n   ,d8888d.\\n   88888888_\\n /`       .`\\\\\\n/  '  _.-'   \\\\\\n|  `'_{}_    |\\n|  /`    `\\\\  |\\n \\\\/  \\\\  /  \\\\/\\n /| (\u0003[color 4]o\u0003[color])(\u0003[color 4]o\u0003[color]) |\\\\\\n \\\\|  __>_  |/\\n  |\\\\/VvvV\\\\/|\\n  | `^^^^` |\\n  \\\\   ~~   /\\n   `.____.`\\n\"}\n",
  "abezfixbot": "{} { subst \"Hi there feel free to run: 'tcl seriously_be_careful_this_restarts_the_bot' if you need to restart the bot, but usually .addrandsn will work for you :O\" }\n",
  "twatu": "args {twat [upper [join $args]]}\n",
  "javafox": "{} {return \"\\011Did somebody really just post the GNU General Public License in this thread?\\n\\011Like, honestly? With a straight face?\"}\n",
  "heron": "{} { return [heron2]; }\n",
  "manhattan_avenue": "{} {lindex_random {1st 2nd 3rd Lexington Park Madison 5th 6th 7th 8th 9th 10th 11th}}\n",
  "python_err": "{} {. \"IndentationError: unexpected indent\" }\n",
  "coolchat": "{{oi {}}} {if {$oi eq \"\"} {set oi \"buttes\"}; return \"#$oi is the cool place to hang out. You can find most of the cool people there. In #$oi you can just chill and do whatever and totally relax. \\\"Take it easy\\\" is the #$oi motto, for example, that's how laid back it is there. Show up if you want to have a good time. Another good reason to show up is if you want to hang out with friends.\"}\n",
  "keycap": "{} {uchar [choose 2318 2325 2303 21e7 238b 232b 23cf]}\n",
  "gayrainboner": "size {if ![regexp {\\d+} $size] {set size [expr {int(rand()*30)+10}]}; set i 2; set ret \"\"; foreach j [split \"(_(_)[string repeat = $size]D:<\" {}] {append ret \"[format \"\u0003%02d,%02d\" [expr {int(rand()*12)+1}] [expr {int(rand()*12)+1}] ]$j\"}; return \"$ret\";}\n",
  "c2f": "c {. [format \"%.2f F\" [expr (9.0/5.0)*$c + 32]]}\n",
  "nignog": "{{n 5} {a nig} {b nog}} {join [lselect_random [list $a $b] $n]}\n",
  "slowmystery": "{} {after 4000; fastmystery}\n",
  "vorg": "{} {return \"[color black on black]oo[color cyan on cyan]oooo[color black on black]oo[color cyan on cyan]oooooo[color black on black]oooo[color cyan on cyan]oooooo[color black on black]oo[color cyan on cyan]oooo[color black on black]oo\\n\"}\n",
  "overused": "{} {return \"Did you hear the one about [lindex_random $::overused_dict]?\"}\n",
  "bailey": "{} {return \"woof\"}\n",
  "blogfooter": "args {. \"Posted in $args\\n\\Read Comments \\| Leave a Comment \\| Share on [color blue]\\[F\\] [color cyan]\\[t\\]\"}\n",
  "hod_word": "{} {pick 3 {?? $::hod_dict} 1 grift_word}\n",
  "facebooklm": "{} { set url [facebookurl]; return \"<a href=\\\"[nimpify $url]\\\">$url</a>\"}\n",
  "rot:transposematrix90:test": "{} {\n    set i1 [list \"[rot:C]1,1  1  2  3  4\" \"[rot:C]2,2  5  6  7  8\" \"[rot:C]3,3  9 10 11 12\" \"[rot:C]4,4 13 14 15 16\"];\n    set o1 [join [list           \"[rot:C]1,1 [rot:C]2,2 [rot:C]3,3 [rot:C]4,4 \"            \"[rot:C]1,1 [rot:C]2,2 [rot:C]3,3 [rot:C]4,41\"            \"[rot:C]1,11[rot:C]2,25[rot:C]3,39[rot:C]4,43\"            \"[rot:C]1,1 [rot:C]2,2 [rot:C]3,3 [rot:C]4,4 \"            \"[rot:C]1,1 [rot:C]2,2 [rot:C]3,31[rot:C]4,41\"            \"[rot:C]1,12[rot:C]2,26[rot:C]3,30[rot:C]4,44\"            \"[rot:C]1,1 [rot:C]2,2 [rot:C]3,3 [rot:C]4,4 \"            \"[rot:C]1,1 [rot:C]2,2 [rot:C]3,31[rot:C]4,41\"            \"[rot:C]1,13[rot:C]2,27[rot:C]3,31[rot:C]4,45\"            \"[rot:C]1,1 [rot:C]2,2 [rot:C]3,3 [rot:C]4,4 \"            \"[rot:C]1,1 [rot:C]2,2 [rot:C]3,31[rot:C]4,41\"            \"[rot:C]1,14[rot:C]2,28[rot:C]3,32[rot:C]4,46\"] \\n];\n\n    set oo1 [rot:serializemat [rot:rotatematrix90 $i1]];\n    if {$oo1 == $o1} { return \"SUCCESS\"; } else { return \"FAILURE {$oo1} {$o1}\"; }\n\n}\n",
  "go:game": "{} { go:render_board [go:current_game] }\n",
  "gassy": "{} {string map {\\n { }} [wget http://raci.st/GaSSy.txt]}\n",
  "aimlamejoke": "{{name {}}} {aim -n [aimname $name] A wise man by the name of [eval [lindex_random {{jewfullname} {waspname}}]] once said \\\"[lamejoke]\\\"}\n",
  "blax": "{} {return \"[b]BLAX STATUS = [u][color red]PREZ[color][u][b]\"}\n",
  "brapt": "args {apply berp $args}\n",
  "aimf_celebslander": "args {aimify celebslander $args}\n",
  "conspiracy": "{} {return \"Did you know in [expr {[rand 41]+1960}] [political_figure] met secretly with known [unplural [conspiracy_group]] members [political_figure] and [political_figure] in [country_name] for a bizzare, sexual \\\"[string totitle [sex_act]] [deity]\\\" ritual?\"}\n",
  "fucku": "args {. fucku}\n",
  "rucas": "{} {chatquote rucas}\n",
  "bgc2": "{c1 c2 c3 str1 str2 str3} {join [adjacent_join [list [nsplit [bgr $c1 $str1]] [nsplit [bgr $c2 $str2]] [nsplit [bgr $c3 $str3]]]] \\n}\n",
  "flic.kr": "url {lindex [regexp -inline {<link rev=\"canonical\".*?href=\"(http://flic.kr/.*?)\"} [$url]] 1}\n",
  "reiserfs": "{} {return \"Tell your friends to use a kernel based on 2.4.18 or later, and especially not a kernel based on 2.4.9, when you use reiserFS. Have fun.\"}\n",
  "norway": "nordic {string map {w v W V} [regsub -all {(\\wj)o} [regsub -all {(\\w)(\\w+)} $nordic {\\1j\\2}] {\\1Ã¶}]}\n",
  "truestory": "{{who {}}} {if {$who eq \"\"} {set who [lindex_random [names]]}; return \"$who sucks\\ntrue story\"}\n",
  "morecoffee\u0002\u0002?": "{} { return \"no.\" }\n",
  "ddb2": "{} {ajoin \"\" [flip [STdarren]] [ddb]}\n",
  "kissy": "{{who {}}} {if {$who eq \"\"} {set who [name]}; return \"<$who> I SURE HOPE THIS NEW POPE TAKES CARE OF THE [string toupper [jewfullname]] PROBLEM\"}\n",
  "mikael2": "{} {return \"These days, I basically use the terms ÂTraditional Keynesian EconobloggerÂ and Â[al_man_word][al_hat_word]Â interchangeably.\"}\n",
  "jesus": "{} {return \"Jesus did not hang out with the whores for the moral support.\"}\n",
  "singanews": "{} {. error: timeout}\n",
  "onweed": "args {concat have you ever [join $args]? have you ever [join $args]...[color green]ON WEED??[color]}\n",
  "skynet": "{} {. Whatbot: tcl}\n",
  "hard": "{} {pick 1 {return \"SIXTYEIGHTHUNDREDULTRA omgomg wOOt wOOty wOOtsicles!!\"} 2 {rainbow \"SIXTYEIGHTHUNDREDULTRA omgomg wOOt wOOty wOOtsicles!!\"}}\n",
  "currentmeasures": "{} {subst [lindex_random $::changingmeasures]}\n",
  "hello_protest": "{} {return \"<@hello> i am going to chain myself to a [appliance_word] in [city] to protest the [kerry_word] for my neocon [shakti_word]-brothers\"}\n",
  "int": "num {expr int($num)}\n",
  "STabezhat": "{} {. \"     .======.     \\n    /  \\'\\\\    \\\\    \\n   /    /\\\\    \\\\   \\n  ______________  \\n  /`-\\[ .] \\[. ]\\'\\\\  \\n  \\\\_     _\\\\   _/  \\n    \\\\  .__,  /    \\n     \\\\  `-\\' /     \\n     /`----\\'\\\\     \\n.-\\\"\\\"\\\"`------\\'`\\\"\\\"-.\"}\n",
  "bazooka": "{} {return \"\\ ________________________________________\n-|_________________________________|= = - -|==== _______ >\n                              / /  _ |/ /\n\n/            /_//_/           nigga where my bazooka be at\"}\n",
  "STgiraffe": "{} {. \" Â Â Â /)/)\\nÂ Â Â ( ..\\\\\\nÂ Â Â /'-._)\\nÂ Â /#/\\nÂ /#/\"}\n",
  "cheese": "{} {lindex_random $::cheeses}\n",
  "quote_add": "{db str} {set db [string tolower $db]; if [info exists ::quotes($db)] {lappend ::quotes($db) [strip_color $str]; return \"Quote added to DB \\\"$db\\\"\"} {error \"DB \\\"$db\\\" does not exist\"}}\n",
  "darren6": "{} {caption_raw [img-pikachu 0] \"\\\\large\\\\textbf{[latext_escape [join [lrange [d_a] 1 end]]]}\"}\n",
  "STelton": "{} { join {{  O    _______________ } { /\\_  _|             | } {_\\__`[_______________| } {] [ \\, ][         ][   }} \\n }\n",
  "litertai": "{} {}\n",
  "sheddy": "{} {string map {\\n { }} [wget http://dmdtech.org/rshxd.txt]}\n",
  "gay4pay": "{} { return gay4pay }\n",
  "banner": "str { return \"\u0002(.)(.)(.)(.)(.)(.)(. $str .)(.)(.)(.)(.)(.)(.)\u0002\" }\n",
  "aimvlad": "args {aim -n [aimname $args] [vladfarted]}\n",
  "buttesmember": "{{hitmanfails {}}} {set n [name $hitmanfails];return \"      .======.\\n     /((((((()\\\\\\n    ((///    \\\\))   I JUST GOT MY BUTTES MEMBERSHIP\\n   ((/`       ())\\n   /`   O  O   '\\\\        LET ME IN ON THIS\\n   \\\\_          _/\\n     \\\\    /?\\\\ /             - [string toupper $n]\\n      \\\\   \\\\_//\\n      /`----'\\\\\\n .-\\\"\\\"\\\"\\`------'`\\\"\\\"-.\"}\n",
  "zuluname": "{} {lindex_random $::zulu_name}\n",
  "gaybar": "{} {subst [next_in_list $::gbl]}\n",
  "next_in_list_reset": "list {if [cache exists next_in_list [sha1 $list]] {cache delete next_in_list [sha1 $list]}}\n",
  "furries": "{} {return \"Pi\"}\n",
  "tinfail": "{} {return \"Write this down and keep it in a safe place (away from windows and telephones): \\\"[spook 2]\\\"\"}\n",
  "aimfurrypeace": "{{who {}}} {aim -n [aimname $who] [furrypeace]}\n",
  "hug_albot": "{} {. Albot: [niggerize [cached_onehug]]}\n",
  "colorize": "v { ajoin \"[bold][color [lindex_random $::color_names] on [lindex_random $::color_names]]\" \"\" \"[strip_color $v]\" }\n",
  "nmf": "{} next_mac_feature\n",
  "STtulip": "{} { return \"   |\\\\/\\\\/|    \\n   | || |    \\n    \\\\LJ/     \\n     || __   \\n     ||/_/   \";}\n",
  "ssscheissegern": "{} {bgc 04 13 fuck\\\\me\\\\ raw}\n",
  "catbus_girlfriend": "{} {join {{   .--\"--.                  } {  /       \\                 } { /  o o    \\                } {(    ^     ,)               } { \\   __,   /-._             } {  `._____.'    `--.__                       } {         \\ /         `/``\"\"\"'-.             } {          Y    7     /         :            } {          |   /     |  .--.     :           } {          /  /__     \\/    `.__.:.____.-.   } {         /  / / `\"\"\"`/    .-\"..____.-.   \\  } {     _.-'  /_/      (                 \\-. \\ } {    `=----'          `----------'\"\"`-. \\ `\" }} {\n}}\n",
  "fu": "a {return \"learn a new proc you fucking faggot\"}\n",
  "test": "args {return [args $args]}\n",
  "fag": "args {return \"[name $args] is a fag!\"}\n",
  "aimf_montspace": "args {aimify montspace $args}\n",
  "hymies": "{EnterTheGame dry_cleaning} {lappend garbage_can_with_a_bullet_hole $_finline_functions; lappend pumpkin_stem [rncockrow]; return [make.conf $cock_to_cock]}\n",
  "olympics": "{{who {}}} {if {$who eq \"\"} {set who [lindex_random [names]]}; return \"$who of [country] takes the \u0002[choose \u00038gold\u0003 \u000315silver\u0003 \u00035bronze\u0003]\u0002 medal in [choose \"500 meter\" \"100 meter\" Greco-Roman lightweight heavyweight freestyle] [crw_word]!\"}\n",
  "gross": "{} {apply [?? {wet bt bgt bt2 rainbow pink stampsay savagesay pyramid rain pooify gudrize niggerize chinkerize figlet americanize chinkerize colorize lacist columnize corrinize csam_dikkyize csammize {image-say [gis [random_word]]} {image-say [pt [random_word]]} }] {\"gross\"}}\n",
  "ism": "{} {word ism$}\n",
  "familyguyscript": "{} { return \"FAMILY GUY - EPISODE [rand 101]: \\\"[string toupper [familyguy_char]] GETS [string toupper [disease_word]]\\\"\\n[subst [join [lselect_random $::familyguy_database 8] \\n]]\\nROLL CREDITS\"}\n",
  "ourbasetime": "{} { set o 0; catch { set o [cache get ourtime time]; if {[clock clicks] < [lindex $o 1]} {set o 0};}; if {$o == 0} { cache put ourtime time  [clickwasec]; return [ourbasetime] } { return $o }}\n",
  "resist": "args {apply resist_screed $args}\n",
  "shaktimid": "{} {subst [regsub -all {\\(} [pyramid (.)] {\u0002\u0003[gay]&}]}\n",
  "audiocache": "url {. [http://manimal.prettybrd.com/~leedo/scripts/audioutil.pl?c=cache&a=[urlencode $url]]}\n",
  "pua_object": "{} {subst [?? $::pua_object]}\n",
  "catbus_word": "{} {lindex_random $::catbus_word}\n",
  "chinsamid": "{} {set ret \"\" ; set width 45; lappend ret [center \" __________ \" $width]; lappend ret [center \"(--\\[ .\\]-\\[ .\\]\" $width]; lappend ret [center \"(        O   )\" $width] ; foreach i {13 15 17 19 21 23 25 27 29} {lappend ret [center \"( [string repeat \" \" $i])\" $width]}; join $ret \\n}\n",
  "STshoe4": "{} {join {{   ___       }     { /`\"\"\"`8-.__ }      { \\   ._     )}       { \"\"\"\"  \"\"\"\"\"\"}} \\n }\n",
  "&": "args {list x [list apply $args \\$x]}\n",
  "girlfriend": "{} {return [wt \"my girlfriend\"]}\n",
  "kikes": "{{args {}}} {if {$args eq \"\"} {set args \"kikes\"}; return \"nobody wants, nobody likes, $args $args $args\"}\n",
  "up": "args {string toupper [join $args]}\n",
  "suicide": "{} {lindex_random $::suicide_method}\n",
  "dsp": "args {. NON NOTABLE}\n",
  "forecast": "args {\n\tglobal forecast_locs\n\tset loc [join $args _]\n\tset i [lsearch -regexp $forecast_locs $loc]\n\tif {$i < 0} {\n\t\treturn \"Location not found. ($loc)\"\n\t} else {\n\t\tset forecast [split [wget \"http://weather.noaa.gov/pub/data/forecasts/city/[lindex $forecast_locs $i]\"] \\n]\n\t}\n\tset ret \"\"\n\tforeach l $forecast {\n\t\tswitch -regexp $l {\n\t\t\t\"^City Forecast\" {lappend ret $l}\n\t\t\t\"^\\\\.\" {lappend ret [regsub \"^\\\\.\" $l \"- \"]}\n\t\t}\n\t}\n\tjoin $ret \\n\n}\n",
  "tvthread": "{} {last [regexp -inline {res\\/(.+?)\\.} [wget \"http://zip.4chan.org/tv/\"]]}\n",
  "next_random_in_list": "list {set length [llength $list]; if {$length < 2} {return $list}; set key [sha1 $list]; set index [set previous_index [cache fetch last_random_in_list $key {return -1}]]; while {$index == $previous_index} {set index [rand $length]}; cache put last_random_in_list $key $index; lindex $list $index}\n",
  "log_grep_nick": "nick {select [log] {{x} {expr {$nick eq [cadr $x]}}}}\n",
  "go:start_game": "{} { go:set_current_game [go:board]; go:game }\n",
  "buf": "{} {mega {flip [aflip [wt2 buffelo]]}}\n",
  "unknown:1:cmd/^http:/": "{matches args} {wget [join $args]}\n",
  "netsol": "{} {. ns[CamelCase [random_word]]â¢}\n",
  "STnegroklan": "{} { join { {  /\\    } { /..\\   } {/  O \\ } } \\n }\n",
  "install_gentoo": "{{n {}}} {return \"<@[name $n]> Installing gentoo is as simple as # [unixcmd] ./[join [random_word] _][virusextension] && [join [mapx [seq 0 30] x {concat \"[unixcmd] ./[join [random_word] _][virusextension]\"}] \" && \"]\"}\n",
  "dongfamily": "{} {return \"oic  oic  oic  oic       __\\n  \\\\    \\\\    \\\\    \\\\      /\\\\ `,:``,\\n   _    _    _    _    /  \\\\_;    .\\n  /\\\\)  /\\\\)  /\\\\)  /\\\\)  /   /      :\\n / /  / /  / /  / /  /   /        :\\n( Y) ( Y) ( Y) ( Y) (  Y )        :\\n \\\"\\\"   \\\"\\\"   \\\"\\\"   \\\"\\\"   \\\"\\\" \\\"         :\"}\n",
  "omgbeegeometry": "{} {return \"\\\\_o/..\\\\\\n   \\\\_o/\\n __/..\\\\\\n/..\\\\_o/\\n\\\\_o/\\n/..\\\\__\"}\n",
  "mexicanfood_word": "{} {lindex_random $::mexicanfood}\n",
  "raim": "args {if {$args eq \"\"} { set args \"gbs\"}; eval \"lindex_random \\$::${args}_aim_dict\"}\n",
  "bigzing": "{} {bigtext zing}\n",
  "mdu": "{} {incoming \"DANGEROUS DONGS   MASSIVE DONGS UNLEASHED\"}\n",
  "goldbstfulump": "{{who {}}} {if {$who eq \"\"} {set who [name];}; return \"[goldbstfu $who][gold [lump \" \"]]\";}\n",
  "checkers": "{} {return \"\u0016  \u0016  \u0016  \u0016  \u0016  \u0016  \u0016  \u0016  \u0016  \u0016  \u0016  \u0016  \u0016  \u0016  \u0016  \u0016  \u0016  \u0016  \u000f\\n\u000f  \u0016  \u0016  \u0016  \u0016  \u0016  \u0016  \u0016  \u0016  \u0016  \u0016  \u0016  \u0016  \u0016  \u0016  \u0016  \u0016  \u0016  \u0016\u000f\\n\u000f\u0016  \u0016  \u0016  \u0016  \u0016  \u0016  \u0016  \u0016  \u0016  \u0016  \u0016  \u0016  \u0016  \u0016  \u0016  \u0016  \u0016  \u0016  \u000f\\n\u000f  \u0016  \u0016  \u0016  \u0016  \u0016  \u0016  \u0016  \u0016  \u0016  \u0016  \u0016  \u0016  \u0016  \u0016  \u0016  \u0016  \u0016  \u0016\"}\n",
  "menu_food_item": "{} {return \"[string totitle [choose \"\"  \"[menu_food_prefix] \" \"[menu_food_prefix] \"][butte_word][choose \"\" \" [menu_food_suffix]\" \" [menu_food_suffix]\"]]\"}\n",
  "vietfullname": "{} {return \"[capitalize [lindex_random $::viet_name_dict]] [capitalize [lindex_random $::viet_name_dict]] [capitalize [lindex_random $::viet_name_dict]]\"}\n",
  "gbt": "{} {ajoin \"\" \"[flip [cubegoon]]\" \"\\n\\n[bt \"O HI\"]\" [cubegoon]}\n",
  "lulz": "lol { return lol;}\n",
  "real_crw_word": "{} {lindex_random [lrange $::crw_dict 0 15]}\n",
  "lcoc": "{} { return \"REPRESENTIN THE LCOC o/\" }\n",
  "politics_suicide": "{} {. On [day] [daypart], I will kill myself with a [weapon], I have nothing else to live for, [choose \"[celebrity]\" \"[political_figure]\"] has betrayed me, goodbye cruel world!}\n",
  "fixdong": "{} {proc DONGDONGDONG {} {return \"your a home\"}}\n",
  "pascalswager": "{{oi {}}} {if {$oi eq \"\"} {set oi [deity]}; return \"If $oi exists and you believe, you'll go to $oi-land after you die\"}\n",
  "cockscale": "{} { inject [map [zip [getnuniq 3 name] [seq 2 0]] {{x y} {. $x\\n[flip [ncock [* 4 $y]]]}}] \"\" {{x o} {ajoin \" \" $x $o}} }\n",
  "lsmodbody": "{} {format \"%-24s %5d   %d\" [underscoreword] [rand 99999] [rand 9]}\n",
  "thread_gen": "{} {return \"http://forums.somethingawful.com/showthread.php?s=&threadid=[ran_thread]\"}\n",
  "ewt": "{gay boners} {subst [regsub -all {[^ ]} [subst [string map {* {[next_in_list [split $gay \"\"]]}} [strip_all [bgt $boners]]]] \"\u0003\\[gay],\\[gay]&\u000f\"]}\n",
  "image-pedo": "image {magick-scale-composite-bottom-left $image a23cb083258bbb01d5858f6a2d6b11f5 0.75}\n",
  "Al": "args {. \"<Al> $args >:\\[\"}\n",
  "90sreference": "{} {lindex_random $::ninties}\n",
  "goon_shopping": "{} { return \"[rand 55] packets of [goon_food].\\n[rand 30] tubs of [goon_food].\\n[rand 20] 40s of [goon_food].\\n[rand 39] samples of [goon_food]\" }\n",
  "rshxdsay": "args {okeysay [norway $args]}\n",
  "STfathead": "{} {fathead 1}\n",
  "is": "args {set args [join $args];return \"no [choose {YOU are} {YOUR MOM is}] $args\"}\n",
  "dreidel": "{} {lindex_random {Nun Gimel Hey Shin}}\n",
  "phish": "{} {caption [image-piss [+gis phish fan]] {fuck phish}}\n",
  "dennisagenda": "{} {regsub -all {( WITH\\s+)[^\\n]+(\\n|$)} [string map {{APPLE STORE} CB2 GAY DENNIS} [gayagenda]] {\\1SAM\\2}}\n",
  "longcat": "{{args {}}} {set one [adjective]; return \"[string totitle $one] [name $args] is $one\"}\n",
  "suave-poof": "{} {return \"[color yellow]|||||\\n[color blue]o-o     [color fuchsia]SUAVE POOF\\n [color white]vv\"}\n",
  "master_generate": "i {  set r [list [randbm 1 5] [randbm 1 5] [randbm 1 5] [randbm 1 5]]; array set ::mastermind [list $i $r]; return [lindex [array get ::mastermind $i] 1]; }\n",
  "random_warhol_stamp": "{} { warhol_stamp [lindex_random [stamps]] }\n",
  "csila": "args {. *[nick] puts on sunglasses*\\n$args\\n[yeah]}\n",
  "plural_test": "{{word {}}} {regsub {ys$} [regsub {ixs$} [regsub {ss$} [strcat $word s] {s}] {ices}] {ies}}\n",
  "jewliday": "{} {return \"[lindex_random {Ch H}]a[lindex_random {n nn}]u[lindex_random {k kk}]ah\"}\n",
  "wc3": "{} {set buf \"\"; foreach name [names] { append buf \"$name: n e wc3\\n\"; }; return $buf}\n",
  "good1": "{{dumbass {}}} {return \"WOW, Good one $dumbass!\\n\\[Link back to my comment\\]\"}\n",
  "boxcar_story_body": "{phrase_count} {set ret [list]; foreach x [choose_random_uniq $phrase_count $::boxcar_story_elements] {lappend ret [subst $x]}; join $ret \" \"}",
  "magick_canvas": "{{width 1} {height 1} {format png} {color transparent}} {magick resize [img-canvas:$format:$color 0] $width $height}\n",
  "STcat": "{} { return \"  ^_^   (\\\\   \\n (';')--_)>  \\n  \\\\      /   \\n   II\\\"\\\"II    \\n   ^^  ^^    \";}\n",
  "aimodin": "args { aim -n [aimname $args] [odin] }\n",
  "mountainerd": "{} {return \"http://www.phubuh.org/Media/Pictures/Norway/img200.jpeg\"}\n",
  "pay": "{} {act \"stuffs dollars into Alien's mouth\"}\n",
  "jbs": "{} {ncock 16}\n",
  "flickrphoto": "{id args} {?? [apply flickrphoto_list [list $id $args]]}\n",
  "radeon16": "{} {return \"<@radeon> ScheisseGern, that free shell i had got packeted right\\n<@radeon> metawire or whatever\"}\n",
  "matrix": "args {set ret \"\"; foreach char [split [strip_all [join $args]] {}] {if {$char eq \" \" || $char eq \"\\n\"} {append ret $char} {if {$char eq \",\"} {set  char \",,\"}; append ret [color_n [matrix_colours]]$char}}; return $ret}\n",
  "buttesonfilm": "{} {return \"\\\"[format [lindex_random [list \"Return of the %s\" \"%s: the Movie\" \"%s II: Attack of the Killer %s\"]] [capitalize [butte_word]] [capitalize [butte_word]]]\\\", starring [celebrity] as [string totitle [name]] the [string totitle [unplural [ethnic_group]]] and [celebrity] as [string totitle [name]] the [string totitle [faglame]]\"}\n",
  "transpose": "strl {\n    rot:transpose [split $strl \\n]\n}\n",
  "unknown:nick/Ulf/": "{name cmd args} {error \"private proc \\\"$cmd\\\" called\"}\n",
  "pad": "s {join [addspaces [llength [split $s \\n]] [split $s \\n]] \\n}\n",
  "mlkjr": "{} { return [mlk] }\n",
  "aimhijacked": "{} {return \"[aim [hijacked], please help!]\"}\n",
  "sa_thread_add": "{forumid threadid title} {global SA; if ![info exists SA($forumid)] {set SA($forumid) [list]}; if {[sa_thread_index $threadid] == -1} {lappend SA($forumid) $threadid $title; return $threadid} {return 0}}\n",
  "christtrawl": "{} { smega { aimfish [raim christian] } }\n",
  "unix_path": "{{t 3}} {concat /[join [mapx [seq 1 $t] x {lindex_random $::unix_path_dict}] /]}\n",
  "overheard_in_africa": "{} {set one [zulufullname]; set two [zulufullname]; if {$one eq $two} {append one \" #1\"; append two \" #2\"}; return \"$one: [niggerize [overheardline]]\\n$two: [niggerize [[choose albot niggerphrase cached_onehug mystic al_insult]]]\\n$one: [niggerize [overheardline]]\\n-- [african_capital]\"}\n",
  "lastfm:trackid": "html {regexp -inline {/music/[^\"\\/]+/_/[^\"]+} $html}\n",
  "qwantzgest": "args {qwantz [concat [map [string map {{ lyrics} {}} [google_suggest_results_for [join $args]]] [& first]] [toot]]}\n",
  "bmh": "{} {return [giga bt \"black man here\"]}\n",
  "kitty_touch": "who{} {return \"`*-.\\n )  _`-.\\n.  : `. .\\n: _   '  \\\\\\n; *` _.   `*-._\\n`-.-'          `-.\\n  ;       `       `.\\n  :.       .        \\\\     Please don't let\\n  .   .   :   .-'   .     [name $who] touch me\\n  '  `+.;  ;  '      :      *mew*\\n  :  '  |    ;       ;-.\\n  ; '   : :`-:     _.`* ;\\n .*' /  .*' ; .*`- +'  `*'\\n`*-*   `*-*  `*-*'\"}\n",
  "citation": "{} {return \"\\[citation needed\\]\"}\n",
  "fixnick": "nick {. [string range $nick 0 0][uchar feff][string range $nick 1 end]}\n",
  "linux": "{} {pick 1 {gis tux linux} 1 {. not ready for the desktop}}\n",
  "FREEWEEV": "{} {apply [?? {wet bt bgt bt2 rainbow pink stampsay savagesay pyramid rain pooify gudrize niggerize chinkerize figlet americanize chinkerize colorize lacist columnize corrinize csam_dikkyize csammize nimpify underscoreize gayflagify grapefruitize fullwidth unicode_abuse {image-say [gis [random_word]]} {image-say [pt [random_word]]} }] {\"FREE WEEV\"}}\n",
  "macrumors": "args {apply macrumors:post $args}\n",
  "trace:del": "proc {foreach {op cmd} [join [trace info execution $proc]] { trace remove execution $proc $op $cmd; }; array unset ::trace_${proc}}\n",
  "overheard_nohug": "{} {set one [join [lselect_random $::overheard_people 1]]; set two [join [lselect_random  $::overheard_people 1]]; return \"$one: [overheardline]\\n$two: [choose [albot] [niggerphrase] [mystic]]\\n$one: [overheardline]\\n-- [rand 50]th & [rand 50]th\"}\n",
  "toast": "{} { return \"im fucking flunking social studies!\" }\n",
  "sa_thread_link": "threadid {return \"<a href=\\\"[sa_thread_url $threadid]\\\">[sa_thread_title $threadid]</a>\"}\n",
  "pua_verb": "{} {lindex_random $::pua_verb}\n",
  "pissface": "{{who {}}} { return \" \\n\\2I LIKE TO PISS ONTO [string toupper [name $who]]'S FACE\\2\\n\\n[embed [embed [embed [embed [canvas 30 10] [ncock 1] 1 5] [STwoman] 20 5] [flip [ystream 20 4]]\u0003\" 6 2] [ystream 20 4] 16 2]\"}\n",
  "pink": "args {set ret \"\"; foreach char [split [strip_all [join $args]] {}] {if {$char eq \" \" || $char eq \"\\n\"} {append ret $char} {if {$char eq \",\"} {set  char \",,\"}; append ret [color_n [pink_colours]]$char}}; return $ret}\n",
  "okeybattle": "{} { return \"[okeyattack]\\n \\n[okeycounterattack]\\n \\n[okeyloot]\"}\n",
  "radiumerror": "{} {return \"Fatal error: Call to undefined function: [strip_w [random_word]]() in /home/httpd/forums/documentroot/corbin/[fetish_porn].php on line [rand 2000]\"}\n",
  "cut": "{{who {}}} {if {$who eq \"\"} {set who [lindex_random [names]]}; return \"ya whatever $who ur fuckin pathetic.If u r so fukin depressed and cutting is going to help than just fucking kill urself since ur so fucking depressed\"}\n",
  "STi": "{} {return {     ___      \n    |_\"_|     \n     | |      \n   U/| |\\u    \n.-,_|___|_,-. \n \\_)-' '-(_/  }}\n",
  "goldstandard": "{} {return \"[bold][color black on yellow]ONLY RON PAUL SUPPORTS THE GOLD STANDARD[color][bold]\"}\n",
  "mirror_left": "url {magick_scheme (let ((cbimg (image $url)) (x (width cbimg)) (y (height cbimg)) (half (crop cbimg 0 0 (/ x 2) y)) (flop (flop half))) (composite cbimg flop (/ x 2) 0))}\n",
  "radeon34": "{} {return {<@radeon> how does one make grilled cheese\n<@radeon> im hungry for one\n<@radeon> but never hade one before\n<@radeon> made*}}\n",
  "jc": "{{num {}}} {if {$num == \"\"} {set num [rand 1 [~http://www.jerkcity.com/high.txt]]}; . http://www.jerkcity.com/jerkcity$num.gif\\n[html [lindex [regexp -inline {<font size=\"-1\".*?>(.*?)</td>} [wget http://www.jerkcity.com/jerkcity$num.html]] 1]]}\n",
  "kalles?": "{} {eval [concat c [count_kalles]]}\n",
  "quote_get": "db {set db [string tolower $db]; if [info exists ::quotes($db)] {return [lindex $::quotes($db) [expr {int(rand()*[llength $::quotes($db)])}]]} {error \"DB \\\"$db\\\" does not exist\"}}\n",
  "farttagline": "{} {lindex [regexp -inline {<em>\"(.*?)\"</em>} [wget http://www.asciiartfarts.com/random.cgi]] 1}\n",
  "crop_to_fit-gen": "{url {xoff -2} {yoff 0} {w 63} {h 79}} { return \"\n(let ((ar (/ $w $h))\n      (im (image [scheme_escape $url]))\n      (iw (width im))\n      (ih (height im))\n      (xoff (if (= $xoff -1) (/ (* ar iw) 4) $xoff))\n      (yoff (if (= $yoff -1) (/ (/ ih ar) 4) $yoff))\n      (x (- iw xoff))\n      (y (- ih yoff))\n      (oar (/ x y)))\n     (if (> oar ar) (crop im xoff yoff (* y ar) y) (crop im xoff yoff x (/ x ar))))\n\"}\n",
  "find_in_procs2": "str {set ret [list];foreach proc [info procs] {if {[regexp $str [info body $proc]]} {lappend ret $proc}};return $ret}\n",
  "mk_aimprank": "procc { mk_aimify $procc; add_aimprank \"aimf_$procc\"; }\n",
  "winkz": "{} {return \"\u0002\u00033[hacker \"[winkz_word] [winkz_word] [winkz_word] [winkz_word] [winkz_word]\"]\u000f\"}\n",
  "cflag": "{} {if ![rand 2] {return \"-f[hyphenword]-[hyphenword]\"} {return [CFLAGS_word]}}\n",
  "legendtitle": "{} {lindex_random $::legendtitles}\n",
  "megahello": "{} {subst [join [string repeat {[hello] } 5] \\n]}\n",
  "europe": "{} { . \"Don't have much to report on Europe. It's still Europe. Been Europe for a long time. Likely to remain so.\" }\n",
  "dikkyize": "args {join [mapx [seq 1 [llength [split [join $args]]]] x dikky_word]}\n",
  "holohoax_question": "{} {lindex_random $::holohoax_questions}\n",
  "lastfm:GetListenersHTML": "group {set now [clock scan now]; set out [select [lastfm:gsplitHTML  $group] {{x} {lastfm:isListeningOrNew $x $now}}]; map $out {{x} {lastfm:updateLastTrack $x $now}}; return $out}\n",
  "genmay": "{} {return \"Genmay? More like [gaybow \"GayMen\"], am I rite?\"}\n",
  "panis": "{} {bigtext \"stupid macro\"}\n",
  "nigx": "{} {. \"(: Virgin Lolita Last Night go to BAR.\u000300,12 Pizza man FUCKED to toilet. All of there \u000f\u000302,04blood. \u000f\u000300,01See you Photo visit=>>\u000f\u000300,12 \u000f\u000312,12\u001fhttp://pizzasex.nigx.ne/\u000f\"}\n",
  "aimf_valentines": "args {aimify valentines $args}\n",
  "asierpinksi": "n {\n\tset o {}\n\tfor {set y 0} { $y < $n } {incr y} {\n\t\tlappend o [string repeat \" \" [expr $n - $y]]\n\t\tfor {set x 0} { $x <= $y } {incr x} {\n\t\t\tif {[expr ~$y&$x] >0} {lappend o \" .\"} {lappend o \" â²\"}\n\t\t}\n\t\tlappend o \"\\n\"\n\t}\n\tjoin $o \"\"\n}\n",
  "awesome": "{} dinosaurcity\n",
  "puntme": "{} {return \"[biggaybowtext puntme] OuR LiL MeXiCaN\"}\n",
  "butteslogo": "{} { join $::butteslogo \\n }\n",
  "byegg": "{} {. [wt2 \"by egg\"]}\n",
  "pig_tax": "{} {pix_tag lowtax}\n",
  "image-spongebob-say": "args {magick-scale-composite-bottom-left [or [car $args] [cadr [randtag]]] [avatar-say http://i.buttes.org/http://www.kevblog.co.uk/blog/25/spongebob.png [or [cadr $args] [ono]]] 0.9}\n",
  "nigamid": "{} {pyramid \" nig \"}\n",
  "cowsaymoo": "return {moo  ,__,       \n   \\ (oo)____   \n     (__)    )\\ \n        ||--|| *}\n",
  "zybl0re4": "{} {return \"<@zybl0re> tcl bgbt H8\\ NIGGERS\\n<@zybl0re> id vote for him if he promised to get rid of all the niggers\\n<@zybl0re> fuck you niggers\\n<@zybl0re> did you know that niggers = chicken bandits?\\n<@zybl0re> lol he's such a nigger\\n<@zybl0re> MY MOM IS NO NIGGER >:(\"}\n",
  "willplot": "{} {. \"\\\"[ucwords [gay_word]][sequel]\\\" ([string totitle [genre]], [+ 1982 [rand 26]]) based on the bestseller '[ucwords [choose [gay_word] [crw_word]]] in [city]' tells the story of Will St. Clair ([celebrity]) growing up in a [era] [state], coping with [gay_word], [gay_word], and [sun_word]. [review]\"}\n",
  "epicbattle2": "{who1 who2} { subst \" EPIC BATTLE ROYALE !!!!\\n[ajoin \" \" \"[[choose chins fathead_chins] 2]\\n[*word] [name $who1]\"  \"\\n\\nVS\" \"[flip [[choose chins fathead_chins] 2]\\n[*word] [name $who2]\"]\\n                 WHO WILL WIN!\" }\n",
  "cyber2": "{{onefag {}} {twofag {}}} {set one [name $onefag]; set two [name $twofag]; if {$one eq $two} {append one \"\"; append two \"|away\"}; return \"[subst [join [lselect_random $::cyber_database 10] \\n]]\"}\n",
  "ftalk": "args {talk [eval $args]}\n",
  "aimsomeonewithcolorforreal": "nick,textu {join [mapx [split $textu \\n] x {concat .a\\im+ $nick $x}] \\n}\n",
  "dial": "number {apply audioconcat [map [to_phonenumber $number] {i {. http://churchturing.org/x/prank-audio/dtmf-$i.wav}}]}\n",
  "notlast": "l {lrange $l 0 [- [llength $l] 2]}\n",
  "adobe": "{} {xz update update}\n",
  "image-crying-eagle": "url {magick_overlay $url [magick_id [img-crying-eagle]]}\n",
  "trac_dhl": "nul {. [engimize dhl]}\n",
  "include?": "{list value} {expr {[lsearch -exact $list $value] != -1}}\n",
  "febricantesnet": "{} {regsub Z.{5} [czirc] BUTTES}\n",
  "niggerfaggot": "{} {return \"[niggername] the [faglame]\"}\n",
  "chocolaterain": "{} {chocolate \"Chocolate Rain!\\n[ctrlv]  [chocolaterainlyric]\\nChocolate Rain!\\n[ctrlv]  [chocolaterainlyric]\" }\n",
  "hello_islam": "{} {return \"<@hello> sometimes [islam_word] is kinda cool\"}\n",
  "shaktipyc": "{} {subst [regsub -all {\\(} [pyramid (pyc)] {\u0002\u0003[gay]&}]}\n",
  "rot13": "args {string map {a n b o c p d q e r f s g t h u i v j w k x l y m z n a o b p c q d r e s f t g u h v i w j x k y l z m A N B O C P D Q E R F S G T H U I V J W K X L Y M Z N A O B P C Q D R E S F T G U H V I W J X K Y L Z M} [join $args]}\n",
  "alias_proc": "{new old} {if {[lsearch -exact [info commands] $new] != -1} {error \"can't create alias \\\"$new\\\": command already exists\"}; if {[lsearch -exact [info commands] $old] == -1} {error \"unknown command \\\"$old\\\"\"}; proc $new args \"apply [list $old] \\$args\"}\n",
  "heckle": "{{name {}}} {if {$name eq \"\"} {set name [lindex_random [names]]}; return \"[negromg] Hey $name! You [gudrow_word] [gudrow_word]!\"}\n",
  "â£": "{} {pix [?? {kalleboo mroach}]}\n",
  "zapanig": "{{who zapanig}} {. <$who> [?? $::zapanig_dict]}\n",
  "homebrew": "{} {ajoin \"\"  [flip [crop [moiracam5] 32 1 11 8]] \\n\\n\\n\\n\\n\\n\\n\\n[STsaq] \\n[flip [stream 10 8]] \\n[stream 10 4] \\n\\n\\n\\n\\n[flip [STmoira]]}\n",
  "aimlumps": "args { aim -n [aimname $args] [lumps] }\n",
  "STfedoragoon": "{} {. \"        _____,\\n       /_ ___\\\\\\\\\\n   ___|________|___\\n[join [lrange [lines [STfullgoon]] 1 end] \\n]\"}\n",
  "swingler_train(bonzos_a_retard)": "{} {set e2 [train_engine]; goonsay \"I have my two locos (a [train_line] [train_engine] and a [train_line] $e2) just sitting on display, they'll probably be that way for a while \\ni have no idea if that $e2 even works, i've never run it\"}\n",
  "biglump": "{{who {}}} {if {$who eq \"\"} {set who [lindex_random [names]]}; lump [bigtext $who]}\n",
  "tsdesk": "str {return \"..::[string tolower [regsub -all \" +\" $str \".\"]]\"}\n",
  "osx": "args {magick annotate b8b0f7da0c651b2437e4184eba847248 12 141 70 black [wrap [join $args] 50] LucidaGrandeBold.ttf}\n",
  "pee_into": "{{who {}}} {return \" (   ( \u00038.--.\u000f\\n  \\\\  \\\\/    \u00038.\u000f      I LIKE TO PEE\\n  /\\\\  \\\\     \u00038:\u000f   __     INTO [string toupper [name $who]]'S MOUTH\\n / / /_      \u00038:\u000f /..\\\\\\n (_(___\\\\       \\\\O_/              \\002by [nick]\\002\"}\n",
  "unit": "{a b} {return $a}\n",
  "consonant": "{} {lindex_random [lsubtract [seq a z] $::vowels]}\n",
  "cred": "args { string map {TCL $ARGS} [ levelup ] }\n",
  "hardwrappad": "{l n} { join [padlinesto [+ 1 $n] [lines [hardwrap $l $n]]] \\n }\n",
  "socute1": "{} {return \"http://farm4.static.flickr.com/3128/2442154163_ffe754a0f1.jpg\"}\n",
  "80sreference": "{} 80sreference_word\n",
  "STsteamboat": "{} { return \"    _~  _~   \\n __|=|_|=|__ \\n \\\\ o.o.o.oY/ \\n  \\\\_______/  \";}\n",
  "atags_for": "url {\n  set tags [list]\n  foreach tag [tags] {\n    if [atagged? $url $tag] {\n      lappend tags $tag\n    }\n  }\n  return $tags\n}\n",
  "lastfm:setname": "{name lastfm} {set ::lastfmnamemap($lastfm) $name}\n",
  "boxtext": "text {string map [list \\* [color [rand 15] [rand 15]]|[underline [uchar af]][underline |][color] \" \" \"   \"] [bigtext2 $text]}\n",
  "tower_of_goonoi": "{{height 9}} {let {n {ajoin [string repeat \" \" [expr 3 * $n / 4]] [goonoi $n] \"+-+\\n[string repeat \"| |\\n\" [- $n 1]]\" \"+-+\\n[string repeat \"| |\\n\" [- $n 1]]\"}} $height}\n",
  "cryptomail": "{} { set preamble [gayforpay]; set statement \"I bet cryptomail would do it for \\$500 bux\"; set result $preamble$statement; return $result;}\n",
  "trannyroulette": "{} {apply gis [trannies]}\n",
  "first_true": "args { foreach a $args { if {$a ne \"\" && $a ne {}} { return $a};} }\n",
  "babelfish": "args {set lang [lindex $args 0];babel en_$lang [lrange $args 1 end]}\n",
  "@_@3": "{} {rain [regsub -all \"\\0xf\" [giga join [map [. [seq 1 37] [seq 37 1]] {n {embed [. \"@[string repeat _ $n][string repeat { } [expr 75 - ($n*2)]][string repeat _ $n]@\"] \"@_@\" 38 1}}] \\n] { }]}\n",
  "unknown:1:cmd/testballs(.+)$/": "{args} {. \"Got $args\"}",
  "sam": "args { set which [next_in_list {\"angry_sam\" \"happy_sam\"}]; return [$which] }\n",
  "supershaktimond": "{} {ajoin \"\u0003   \" [shaktimond] \"\\n\\n\\n\\n\u001f[capitalize [shakti_word]] Hacks have been Applied\"}\n",
  "fixbazooka": "{} {eval \"proc bazooka \\{\\}  \\{return \\\"\\\\ ________________________________________\\n-|_________________________________|= = - -|==== _______ >\\n                              / /  _ |/ /\\n\\n/            /_//_/           nigga where my bazooka be at\\\"\\}\"}\n",
  "unknown:2:cmd/(.+)think$/": "{matches cmd args} {apply [list stampthink -s [last $matches]] $args}\n",
  "coolfm": "{} {drawtable [subst [wget  http://manimal.prettybrd.com/~leedo/scripts/lastbutte.pl?u=[join  $::lastfm_cockes_usermap ,]]] {default red orange green}}\n",
  "STgoonette": "{} {return \"           _.--._     \\n        ,'        `.\\n       /   __) __`  \\\\\\n      (   (`-`(-')   )\\n      /)  \\\\   _  /  (\\n     /'    )-._.' .  \\\\ ___\\n    (  ,--.,    `.)___(___)\\n     )(   /-.,--'\\\\   _ \\\\X/`\\n    '/ .'/        \\\\ (  Uu\\\")\\\\\\n      / /          \\\\ `/,-'  )\\n     ( ^      ,    ,^ )`._.'\\n      ( `.   Y   .'  )\\n       \\\\  `. )\\\\.'   / )\\n       )`._.'=='._.' (\\n      /               )\\n     (                .\\\"-.\\n    /(`    -)        /    \\\\\\n   (  \\\\`-.__    -'_.\\\"      `\\n   |  \\\\`-.__.--\\\"v\\\"          |\\n   `.'      \\\\   |,          ,\\n    /        `._/           :\"}\n",
  "arg_test": "args {llength $args}\n",
  "nubbles": "{} {snoopysay [?? $::mob_excuses]}\n",
  "andrzej_trek": "{} {stampsay -s geordrzej \"Captain, I am sending you a transmission of an ancient family recipe of mine: [goon_ingredient], [goon_ingredient], and [goon_ingredient], combined together and [goon_cooking_method].\"}\n",
  "kd": "{} kill_drudge\n",
  "riotact": "{} { . Her Majesty the Queen charges and commands all persons being assembled immediately to disperse and peaceably to depart to their habitations or their lawful business, on pain of being guilty of an offence for which, on conviction, they may be sentenced to an imprisonment for life. God Save the Queen!}\n",
  "pozfest": "{} {return \"marty: when are you coming to pozfest, there's free [weed] and [crw_word]\"}\n",
  "animaljoke": "{} {return \"Q: How many [ethnic_group] can you fit in a [animal]'s [body_part]?  A: [rand 50], if you cut off their [plural [body_part]]!\"}\n",
  "log_for": "who {select [log] {line {expr {[string toupper [lindex $line 1]] eq [string toupper $who]}}}}\n",
  "teef": "{} {return \"\u00034@\u0003|\u00033-\u0003\u0002\u001f,,,,\u001f\u0002\u00033-\u0003|\u00034@\u0003\"}\n",
  "jreisretarded": "{{jre dumb}} {return $jre}\n",
  "rows": "{str f {l {}}} {if {$l eq \"\"} {set l [expr $f-1];set f 0};join [lrange [split $str \\n] $f $l] \\n}\n",
  "niggerbuttes": "{} {}\n",
  "lixin": "{} {return [stampsay -s chink2 \"me rub ru rong time abez, eh\"]}\n",
  "zulu": "str {set ret \"\"; foreach w [split $str] {append ret \"$w \"; switch [rand 12] {0 {append ret \"jabula \"} 1 {append ret \"umbulo \"} 2 {append ret \"ubaba ubaba \"} 3 {append ret \"sobonana futhi \"} 4 {append ret \"zulu \"}}}; append ret \" umbulo!\"; return $ret}\n",
  "mysticaim": "args { aim -n [aimname $args] [mystic] }\n",
  "poetry": "{} keepitreal\n",
  "politicalcartoon1": "args {return \"[upper [?? $::thosefuckers]]\\n (   ( \u00038.--.\u000f\u000f      [upper [?? $::usfolks]]\\n  \\\\  \\\\/    \u00038.\u000f\u000f        __\\n  /\\\\  \\\\     \u00038:\u000f\u000f      /..\\\\\\n / / /_      \u00038:\u000f     \\\\O_/\\n (_(___\\\\  [upper [?? $::ourshit]]\"}\n",
  "ruby": "{} {return \"ruby 'tcl ruby'\"}\n",
  "oui": "{} {return \"\u0002OUI OUI OUI\u0002\"}\n",
  "nords?": "{} {set i 0;foreach nord $::nords { set i [expr $i + [llength [lfilter $nord [string tolower [names]]]]] };c $i nords}\n",
  "img-timeline": "{{v {The Stone\nAge}}} { embed [timeline:img] [hardwrap $v 32] 37 2 }\n",
  "sdd": "{} {return \".aim:not eaglebtc00 It's a jungle out there; let me be your guide. - Hackers, identify thieves, and advertising agencies lurk in the shadows doing everything they can to steal your personal information. I have a vast array of tools at my disposal to build a strong digital defense against outside attacks.\"}\n",
  "countdown": "{} {cdown {moira_ returns}}\n",
  "stfum": "name {. shut the fuck up $name you stupid fucking cunt}\n",
  "kelly": "args {ajoin \"    \" [politicalcartoon] [kellysay [?? $::kellyphrase]]}\n",
  "compscipaper": "{} {tinyurl [latext [string map {\\$ \\\\\\$}  [cspapermain]]]}\n",
  "historical_event": "{} {lindex_random $::historical_events}\n",
  "collegetrawl": "args {set college [collegeaim]; if {$args ne \"\"} { set college $args;}; smega {aimfish [raim $college]}; }\n",
  "swingler_calendar": "{} {ajoin \"  \" \"     [month] 2008\\nSu Mo Tu We Th Fr Sa\\n 1  [color red on white]2[color]  3  4  5  6  7\\n 8  9 10 11 [color blue on white]12[color] 13 14\\n15 16 17 [color green on white]18[color] 19 20 21\\n22 23 24 25 [color yellow on white]26[color] 27 28\\n29 30\" [swingler_cal_items]}\n",
  "virusextension": "{} {return \"[subst [string repeat {[lindex_random $::virusextensions]} [expr {int(rand()*4)+2}]]]\"}\n",
  "cbuttes": "{} {string map {{ZIRC! } BUTTES} [czirc]}\n",
  "corrina": "args {if {$args eq \"\"} {return [corrinize I like anime and boys]} {return [string map {\"\\{\" \"\" \"\\}\" \"\"} [corrinize $args]]}}\n",
  "cellphonetrawl": "{} {eval [lindex_random $::aimpranks]  [cellphonenumber]}\n",
  "cdraw": "bitmap {join [map $bitmap {line {. [join [map $line {color {if {$color eq \"\" || $color < 0} {. \"[color] \"} {. [color $color on $color]*}}}] {}][color]}}] \\n}\n",
  "finalsolution": "{} {return \"gas [tcl lappend jew_count]\"}\n",
  "STrealokey": "{} { join {{   _____} {  /(.)  \\ } { (  ,|,(.)} {  \\_<->_/}} \\n}\n",
  "realpi": "{} {return 3}\n",
  "jew_york_street": "{} {set street [rand 50]; set ass [% $street 10]; if {$ass == 1} {return \"${street}st\"}; if {$ass == 2} {return \"${street}nd\"}; if {$ass == 3} {return \"${street}rd\"}; return \"${street}th\"}\n",
  "STdarren": "{} {return [STrabbit]}\n",
  "saq_beer_line": "{} {?? $::saq_beer_lines}\n",
  "pyxamid": "{} {pyramid \"pyx  \"}\n",
  "hicarmen": "{} {. [spoiler \"attn: stopmakingsense \\007                                                                   \"]\\n[ajoin \" \" [cswas] \"\\n\\n[bt hi carmen]\" [cswas]]}\n",
  "nnegromg": "{{a {}}} {rainbow [nomg $a]}\n",
  "rad": "{} {return \"[bgbt radeon] [hacker \"our uncut nazi\"]\"}\n",
  "letsfrot": "{} frot_figures\n",
  "volks?": "{} {c \"1\" \"VOLK\"}\n",
  "rotate": "v { rotate90 $v }\n",
  "master_stats": "{} {set o \"\";foreach n [array names ::mastermind_stats] {set g [master_games_played $n];if {$g > 0} {set o [strcat $o \"$n: $g games played with average score of [master_average $n]\\n\"]}};return $o}\n",
  "split_on_formatting": "str {set ret [list]; while {[string length $str]} {regexp {^(\u0003((\\d{0,2})(,(\\d{0,2}))?)?|\u0002|\u001f|\u0016|\u000f)?([^\u0003\u0002\u001f\u0016\u000f]*)(.*)} $str {} f {} {} {} {} t r; if {$f eq \"\"} {set f \u000f}; lappend ret $f $t; set str $r}; return $ret}\n",
  "sliceyiff": "{{n {}}} {eval \"string map {girlfriend mate eyes {[furry_noun]} slice {[regsub \"s( |$)\" [furry_verb] {\\1}]}} {[slice [name $n]]}\"}\n",
  "patch": "{} {return \"you have to parse the cat root slash dev etcetera file for eth0 and pugle the forward identity-locking rehooliginator and symlink it to the libgc perl humongisooler module after a kernel decompile and basic repatch update.\"}\n",
  "fakeqdb2": "{{id random}} {set n [list];foreach i [names] j [shuffle [names]] {lappend n $i $j};string map $n [lolqdb $id]}\n",
  "master_help": "{} { return \"type - tcl masterm 1 1 1 1 - to play (4 digits 1-5)\\nGuess the digits, to see your stats type - tcl master_stat\\nTo see your score compared to everyone else type - tcl masters\"; }\n",
  "goonapproved": "{} {regsub -all {\\\\ ?[\\\\|]_+[\\\\|]} [embed [embed [join [padlinesto 50 [split \"\\n\\n\\n\\n\\n\\n[gold [5stamprow]]\\n\" \\n]] \\n] [goonstamp] 11 1] [STgoon] 17 1] {\u0003\\0\u00038}}\n",
  "disclaimer": "{} {return \"By using this bot you disclaim all rights to the code you submit and also probably like to suck a lot of dick\"}\n",
  "round": "x { expr round($x) }\n",
  "judaism": "{} {return [gudrize god\\ bles\\ israel\\ god\\ bles\\ zionism!]}\n",
  "rst": "args {checkbox rude same true}\n",
  "prog2inf": "args {global eng_cr eng_vr eng_dr;regsub -nocase \"($eng_dr){2}ing\\\\b\" $args {\\1}}\n",
  "-": "{a b} { expr ${a} - ${b} }\n",
  "aimbadtrip": "{{who {}}} {return \"[aim -n [aimname $who] [badtrip]]\"}\n",
  "image-pistol": "img { magick-scale-composite-bottom-right $img http://i.buttes.org/http://spazbot.com/stuff/bangbang.gif 0.8}\n",
  "lasttrack": "{{who {}}} {if {![cache exists last_track [nname $who]]} {track urmom 420} {apply track [cache get last_track [nname $who]]}}\n",
  "choose_random_uniq": "{n l} { lrange [shuffle $l] 0 [decr $n] }\n",
  "tracer%tree_l": "{proc args} {set ::ttpos_${proc} [apply expr [. \"\\$::ttpos_${proc} - 1\"]]}\n",
  "hd-dvd": "{} { return \"09 F9 11 02 9D 74 E3 5B D8 41 56 C5 63 56 88 C0\" }\n",
  "a_sextoy": "{} {lindex_random $::sextoys}\n",
  "matix_error": "{} {. [matrixify \"Warning: Error in the Matix\\n[bigmatix]\"]}\n",
  "tuxpaintstamp": "args { if {[llength $args] > 0} { set s [search tuxpaintstamps $args]; if {[llength $s] > 0} { return [lindex $::tuxpaintstamps [?? $s]] } { return [?? $::tuxpaintstamps] } } { return [?? $::tuxpaintstamps]  } }\n",
  ":E": "{} {return [http://pastebin.com/pastebin.php?dl=f16f8d5e5]}\n",
  "STsaq1": "{} { return \"    _\\n  _/\\\\)_ \\n |( Y)| \\n ^ || ^\\n   ``\"; }\n",
  "nationality": "{} {lindex_random $::nationalities}\n",
  "sexy": "{{who {}}} {gudrize \"hey [name $who] im [lindex_random [seq 4 7]]`[lindex_random [seq 1 11]] [rand 500]lbs sexy as [goon_word] an im single lookin fa da right [random_word] ta [act_word], so if u liken wat u see [act_word] at me an well do da [crw_word]\"}\n",
  "buttfood": "{{a {}} {b {}}} {return \"Who likes buttfood more: [name $a] or [name $b]?\"}\n",
  "lapdogs?": "{} {c [llength [intersect [string tolower [names]] $::lapdogs]] lapdogs}\n",
  "pagga": "{} { return \"i run my own private tor network\" }\n",
  "trace:help": "{} {each [lfilter_not trace:help [info proc trace:*]] {p {say2 [. \"\\x1f$p\\x1f ([info arg $p])\" - \\x02$::trace_help($p)\\x02] [channel]}}; say2 [center2 \"(\\002available trace types\\002: [lsort -unique [regsub -all {tracer%|_l} [info proc tracer%*] {}]])\"] [channel]}\n",
  "mroach10": "{} {return {Google made their link font darker and I don't like it. Leave well enough alone, guys. Using google.de until I make an override stylesheet}}\n",
  "lolqdb": "{{id random}} {if {$id eq \"random\"} {set nc -nocache} {set nc {};set id [expr $id + 0]};cwget $nc http://lolqdb.buttes.org/rest.php?quote/$id/text}\n",
  "u": "{} {. \"\\037\"}\n",
  "stbc": "args { return \"[color white on black] Lou Dobbs says: [color red on black]$args, show the birth certificate!\"}\n",
  "STunhappybat": "{} {lindex_random $::unhappybat}\n",
  "sam_plot": "{} {. \"\\\"[ucwords [sam_word]][sequel]\\\" ([string totitle [genre]], [+ 1982 [rand 26]]) tells the story of Sam Stephenson ([celebrity]) growing up in a [era] [state], coping with [sam_word], [sam_word], and [sam_word]. [review]\"}\n",
  "locate": "{substring string} {set ret [list]; set n 0; foreach line [lines $string] {incr n; foreach pair [regexp -all -inline -indices [escape_regexp $substring] $line] {lappend ret [list [+ 1 [first $pair]] $n]}}; return $ret}\n",
  "kde": "{{fag {}}} {. \"[string map {c k C K} $fag]\"}\n",
  "incog3": "{} {return [bgt bioshock]}\n",
  "norse_poem": "{} { smega { lindex_random $::norse } }\n",
  "internet": "{} lump\n",
  "owl": "h3h {. ,___,\\n\\{-.-\\}Â $h3h\\n(__(\\\\n-\"-\"-}\n",
  "jessejackson": "{} {stampsay -s goonigger \"I wanna cut his [choose balls nuts cajones testicles bollocks nads nards knackers stones jewels junk sack manjigglys] off.\"}\n",
  "coca": "{} {. tcl cola}\n",
  "wmfimage": "{} { subst \"<a href=\\\"[lindex_random $::wmfs]\\\">[imageshack]</a>\"}\n",
  "comic_line1": "{} {return \"[choose \"I love\" \"I hate\" \"I often think about\" \"I'm in love with\" \"You talkin about\" \"What is this so-called\" \"Holy\" \"Wow...\" \"Amazing\" \"Wonderful, wonderful\" \"What do you think about\" \"Totally digging\" \"My [relative] was tellin me about\" \"Niggas looooooove\" \"Check out this\" \"Do you like my\" \"Hello little\" \"I want more\" \"Gimme\" \"Yummy\"] [random_word]\"}\n",
  "uchar_vflip": "args {set str [join $args]; set ret [list]; foreach ltr [split $str \"\"] { if { [lsearch -exact $::flipmap $ltr] != -1 } { lappend ret [uchar [string map $::flipmap $ltr]] } else { lappend ret $ltr } }; return [join $ret \"\"] }\n",
  "revisions": "{} {\n  set revision [rev_parse HEAD]\n  set revisions $revision\n  \n  while true {\n    if {$revision eq \"\"} break\n    if [cache exists next_revision $revision] {\n      set revision [cache get next_revision $revision]\n      lappend revisions $revision\n    } else {\n      set commits [history ${revision}^]\n      if ![llength $commits] break\n      \n      foreach commit [history ${revision}^] {\n        set next_revision [lindex $commit 0]\n        if {$next_revision ne \"\"} {\n          cache put next_revision $revision $next_revision\n          lappend revisions $next_revision\n        }\n        set revision $next_revision\n      }\n    }\n  }\n  \n  set revisions\n}\n",
  "image-troll-bold": "url { image-rel-border [magick-stack_scheme $url [latext \"\\\\textbf{[trolldb]}\"] 30] }\n",
  "bestprocever": "{} honeypot\n",
  "args_lmiot2": "args {subst -nobackslashes [string map {{BUTTES CHAT} {[string toupper [subst $args]]}} [butteschat]]}\n",
  "STwtchit": "{} { return \",___,\\n|  ||/,.\\n| @@@@,.\\n|  ||,.\\\\\\n|  ||\"; }\n",
  "aenimatroll": "args {string map {Hello Aenima hello aenima} [apply hellotroll $args]}\n",
  "midnight": "{} {clock scan [lrange [clock format [clock seconds]] 0 2]}\n",
  "factor_stats": "{{n 10}} { drawtable [lrange [sort_factor_stats] 0 $n] }\n",
  "nigdb": "{} {return [niggerize [trolldb]]}\n",
  "lastfm:purge": "{} {map [array names ::lastfmnamemap] {{x} {cache put lastfmlasttime $x 0}}}\n",
  "track_dhl": "ul {. [string toupper [list [randacro DHL]]]}\n",
  "primate": "{} {lindex_random $::primates}\n",
  "go:set_current_game": "gb { go:assertboard $gb; set ::current_game $gb; }\n",
  "macify": "{image {xoff 0} {yoff 0}} {magick composite [mac_icon com.apple.mac] [magick_id [magick resize [crop_to_fit $image $xoff $yoff 460 287] 460 287]] 26 81}\n",
  "wow_class": "{} {lindex_random $::wow_class}\n",
  "politicaljoke": "{} {return \"Q: How many [political_word]s does it take to screw in a light bulb?  A: [set x [expr {int(rand()*50)+3}]] -- one to kill the [ethnic_group], one to bomb [country], and [incr x -2] to blame [political_figure]!\"}\n",
  "foldoc": "word {set html [lindex [http post http://www.dict.org/bin/Dict Form Dict2 Database foldoc Query $word] 2];join [lrange [split [html [strip_html [lindex [regexp -inline {<pre>\\s*(.+?)\\s*</pre>} $html] 1]]] \\n] 3 end] \\n}\n",
  "cry": "{} {return \"why don't you cry about it?\"}\n",
  "egghead": "{} {. \"http://photos-c.ak.facebook.com/photos-ak-sf2p/v166/160/97/580553812/n580553812_287794_1609.jpg\"}\n",
  "smiles": "{} {lindex_random $::smiles}\n",
  "MAC": "{} { acroform media access control }\n",
  "cunt": "{} { return \"We are the modern cunt\\npositive anti reason\\nunbounded unleashed unforgiving\\nwe see art with our cunt we make art with our cunt\\nwe believe in jouissance madness holiness and poetry\\nwe are the virus of the new world disorder\\nrupturing the symbolic from within\\nsaboteurs of big daddy mainframe\\nthe clitoris is a direct line to the matrix\\nVNS MATRIX\\nwe are the future cunt\" }\n",
  "awet": "args {apply {ajoin \" \"} [map [split [join $args] {}] {char {apply [next_in_list {wet {fw wet}}] $char}}]}\n",
  "shitzoid": "str {regsub -all -nocase {s[^h ][aeiou]*[a-z]?} [regsub -all -nocase {sh[aeiou]*} $str shit] shit}\n",
  "oknujt": "{} {return tru.dat}\n",
  "3gs": "{} {?? $::iphone}\n",
  "weasel": "{} {return \"\u0002W\u0002illies \u0002E\u0002nter; \u0002a\u0002re \u0002s\u0002ucked \u0002e\u0002ver \u0002l\u0002ovingly\"}\n",
  "aimniggerjoke": "args { aim -n [aimname $args] [niggerjoke] }\n",
  "r1ch2": "{{who notR1CH}} {return \"([clock format [clock seconds] -format \"%H:%M:%S\"]) $who: [whittle [cut]]\"}\n",
  "politicalcartoon2": "args {. [ajoin \" \" \\n\\n\\n\\n\\n\\n[upper [?? $::ourshit]]\\n[STpoo]  [upper [?? $::thosefuckers]]\\n[omgchair]]\\n[upper [?? $::usfolks]]\\n[negromg]}\n",
  "unzip": "l {set o [list]; foreach {a b} $l {lappend o [list $a $b]}; return $o }\n",
  "nigerian_spam": "{} {set name \"[title] [waspfirstname] [zulufullname]\"; set bank \"[waspfullname] Bank Ltd\"; set client \"[title] [zulufullname]\"; set my_percent [expr {(int(rand()*9)+1)*10}]; set your_percent [expr {100-$my_percent}]; set ret [list]; foreach line $::nigerian_spam_lines {lappend ret [subst $line]}; join $ret \\n}\n",
  "aimbeastmovie": "args {aim -n [aimname $args] hey why did you send me this [beastmovie]}\n",
  "metaquote": "{nick args} {return \"<@$nick> [eval $args]\"}\n",
  "has": "args {if [llength $args] {return \"\u0002urmom\u0002 has $args\"} {return \"tcl has a bigger [random_word] than u am i rite\"}}\n",
  "hostname": "{} {pick 1 {strip_u [fetish_porn]} 5 {food_word}}\n",
  "comment_word": "{} {lindex_random $::comment_word_dict}\n",
  "chatbus": "{} {regsub Z.{7} [czirc] CHATBUS!}\n",
  "bigteef": "{} {biggaytext [strip_color [teef]]}\n",
  "christianright": "{} {air \"christian right\" \"christian [lindex_random {stupid wrong fags cockmeisters blowjobs dicks Riech cocks idiots jews baptistfags}]\"}\n",
  "fsj": "{{who {}}} {return \"Namaste, [name $who]. I honor the place where [choose [name] [lindex_random $::fsjism]] and [choose [name] [lindex_random $::fsjism]] become one.\"}\n",
  "mccain_flag": "{} { string map {MILLS\\ \\  GOOKS!\\  MILLS GOOKS TWO\\ AMERICAS *MY\\ FRIENDS*} [edwards_flag] }\n",
  "lionsex": "{} {string map {{_______@/oO\\@} {@@@@@@@@ -o @   (Roar)} {\\          __} {\\        @/oO\\@} {   -o} { @@@@} { ^ ^} {vvvv} {Cow Sex} {Lion Sex} {Here's The Beef} {Who sleeps tonight?} {W---} {----}} [cowsex]}\n",
  "aimholocaust": "{{who {}}} {return \"[aim -n [aimname $who] There are some things me and my friends just don't buy about the \\\"holocaust\\\"... for example, [holohoax_question]]\"}\n",
  "marketcap": "symbol {array set info [first [stock_info $symbol]]; . $info(name) mkt cap: $info(market_cap)}\n",
  "call_remote_command": "{url command arguments state} {\n  set params [list command $command]\n  foreach argument $arguments {lappend params arguments\\[] $argument}\n  foreach {name value} [remote_command_state $state] {lappend params state\\[$name] $value}\n\n  set response [apply {http post $url} $params]\n  switch [lindex $response 0] {\n    200 {lindex $response 2}\n    500 {error [lindex $response 2]}\n  }\n}\n",
  "utf8_demangle_old": "args {\n  set chars [split [join $args \" \"] \"\"]\n  set outstring \"\"\n  \n  ;# loop through consuming chars from list\n  while { [llength $chars] > 0 } {\n    set char [scan [lindex $chars 0] %c]\n    \n    if { [(($char & 0x80) == 0)] } {\n      ;# normal ASCII\n      set first [lindex $chars 0]\n      set chars [lreplace $chars 0 0]\n      \n      lappend outstring $first\n    } elseif { [llength $chars] >= 2 && [(($char & 0xE0) == 0xC0)] } {\n      ;# two-byte sequence\n      set first [scan [lindex $chars 0] %c]\n      set second [scan [lindex $chars 1] %c]\n      set chars [lreplace $chars 0 1]\n      \n      set first [(($first & 0x1f) << 6)]\n      set second [(($second & 0x3f) << 0)]\n      \n      lappend outstring [format %c [+ $first $second]]\n    } elseif { [llength $chars] >= 3 && [(($char & 0xF0) == 0xE0)] } {\n      ;# three-byte sequence\n      set first [scan [lindex $chars 0] %c]\n      set second [scan [lindex $chars 1] %c]\n      set third [scan [lindex $chars 2] %c]\n      set chars [lreplace $chars 0 2]\n      \n      set first [(($first & 0x0f) << 12)]\n      set second [(($second & 0x3f) << 6)]\n      set third [(($third & 0x3f) << 0)]\n      \n      lappend outstring [format %c [+ $first $second $third]]\n    } elseif { [llength $chars] >= 4 && [(($char & 0xF8) == 0xF0)] } {\n      ;# four-byte sequence\n      set first [scan [lindex $chars 0] %c]\n      set second [scan [lindex $chars 1] %c]\n      set third [scan [lindex $chars 2] %c]\n      set fourth [scan [lindex $chars 3] %c]\n      set chars [lreplace $chars 0 3]\n      \n      set first [(($first & 0x07) << 18)]\n      set second [(($second & 0x3f) << 12)]\n      set third [(($third & 0x3f) << 6)]\n      set fourth [(($third & 0x3f) << 0)]\n      \n      lappend outstring [format %c [+ $first $second $third $fourth]]\n    } else {\n      ;# unknown or incomplete character\n      ;# eh just pass it through\n      set first [scan [lindex $chars 0] %c]\n      set chars [lreplace $chars 0 0]\n      lappend outstring [format %c $first]\n    }\n  }\n  return [join $outstring \"\"]\n}\n",
  "myspace": "args { set url [eval \"myspace_url $args\"]; return \"Is this your myspace: <a href=\\\"[nimpify $url]\\\">$url</a>\"; }\n",
  "howmuch": "args { return \"$args [thismuch [rand 30]]\" }\n",
  "goldbstfu": "{{who {}}} {if {$who eq \"\"} {set who [name]}; return \"[biggoldtext stfu\\ $who]\"}\n",
  "macro": "{name args} {set body [cwget http://buttes.org/macros/$name]; set rest [repeat [llength [regexp -all -inline {%-?\\d*s} $body]] name]; apply {format $body} [concat $args $rest]}\n",
  "missingno": "{} tv_static\n",
  "thosefuckers": "{} {lindex_random $::thosefuckers}\n",
  "longpres": "{} { return \"[presentation], although my internet name is [name], and I enjoy [random_word], [crw_word], [name], [zulu_word] and above all: [random_word]! I live in [location_word], vote [political_word] and my favourite pastime is [hate_crime_word].\" }\n",
  "smdamid": "{} {pyramid smd\\ }\n",
  "jabon_aim": "{{who {}}} {if {$who eq \"\"} {set who [rand_aim]}; aim -n $who [jabon [capitalize $who]]}\n",
  "bottle": "{} {join {{      ,.} {    ,/ /} {   /,.`)} {  //  /} { /_ `/} {(  `/} { `-'}} \\n}\n",
  "bigjewnicodeswastika": "{} { return \"âââââââââââââââââââââââââââââââââ\nâââââââââââââââââââââââââââââââââ\nâââââââââââââââââââââââââââââââââ\nâââââââââââââââââââââââââââââââââ\nâââââââââââââââââââââââââââââââââ\nâââââââââââââââââââââââââââââââââ\nâââââââââââââââââââââââââââââââââ\nâââââââââââââââââââââââââââââââââ\nâââââââââââââââââââââââââââââââââ\nâââââââââââââââââââââââââââââââââ\nâââââââââââââââââââââââââââââââââ\nâââââââââââââââââââââââââââââââââ\nâââââââââââââââââââââââââââââââââ\nâââââââââââââââââââââââââââââââââ\nâââââââââââââââââââââââââââââââââ\nâââââââââââââââââââââââââââââââââ\nâââââââââââââââââââââââââââââââââ\nâââââââââââââââââââââââââââââââââ\nâââââââââââââââââââââââââââââââââ\"}\n",
  "glug2": "{{what {}}} {let {word {moirasay $word? I don't even KNOW her [last [regexp -inline {er(.*)} $word]]! [haioh]}} [or $what [word {\\w+er\\w{2,}}]]}\n",
  "STfartcloud": "{} { join {{  ,--. ,-.    } { (    `   ).  } {('   ,   ,  ; } { ,-          ,} { ;  '   '   ,)} {  '(   ,    ) } {    '-' '--'  }} \\n}\n",
  "pakistan": "{} {'_-==\u0002\u00030,3 BLESSD B THEY SCARED LAND ... HAPPY B THE BOUNCYEOUS RALM. CYMBAL OF HI-RESOLVE ....... LAND OF PAKISTAN. (PLEASE TELL FRIENDS OF FUN GOOD CHAT AT #PAKISTAN /TIMER 20 0 /SAY JOIN #PAKISTAN) (NO NAZIS!!!!) \u0002\u0003==-_\u000f'}\n",
  "puberror": "num {publish [. [subst [string repeat {[radiumerror]\\n} [expr {int($num)}]]]]}\n",
  "gc": "args {set str [join $args]; set len [expr [llength $str]/2]; c [lrange $str 0 $len] [lrange $str [expr $len+1] end]}\n",
  "alert2": "{} {return \"\u00038,4\u0002/!\\\\\u000f\u00034,8\u0002/!\\\\\u000f \u00034\u0002octalc0de computer adventures\u000f \u00034,8\u0002/!\\\\\u000f\u00038,4\u0002/!\\\\\u000f\"; proc alert {} {alert1}}\n",
  "alert": "{who what} {string map [list octalc0de $who computer $what] [alert_base]}\n",
  "hep": "{} {fart 20040929.html}\n",
  "delgex:sam": "{} sam\n",
  "boom": "{} {string repeat \"gay\" 50004404}\n",
  "blackjack_get_bid": "p { return [lindex [array get ::blackjack_bid $p] 1];}\n",
  "spitzer": "{} {. http://farm4.static.flickr.com/3088/2330071178_7af09c6ecc.jpg}\n",
  "nomg": "a { return [repeatblock  \" __ \\n/..\\\\\\n\\\\_O/\" $a]; }\n",
  "fandom": "{} {return \"Yes, I am a fox. So? I dont see any problem. I embraced my animal soul long ago and I am happy together with my boyfriend (who is a cute b/w wolf!). We have a fucking lot of friends in and outside of the fandom and I am pretty slim and good looking. But thanks anyway asshole. Go and watch your stupid anime shit while I have SEX with my boyfriend.\"}\n",
  "subtract": "{{who {}} {who2 {}} {who3 {}}} {if {$who eq \"\"} {set who [random_word]}; if {$who2 eq \"\"} {set who2 [random_word]}; if {$who3 eq \"\"} {set who3 [random_word]}; return \"$who - $who2 = $who3\"}\n",
  "lastfm:setlasttrack": "{user trackid} { cache put lastfmlasttrack $user $trackid }\n",
  "whatbotinfiniteloop.": "args {apply {. Whatbot: whatbotinfiniteloop} $args}\n",
  "image-border-gen": "{url {offset 50}} { return \"(let ((bg (image http://churchturing.org/x/white100x100.png))\n      (i (image [scheme_escape $url]))\n      (iw (width i))\n      (ih (height i))\n      (offset $offset))\n     (composite (resize bg (+ iw offset offset) (+ ih offset offset)) i offset offset))\"}\n",
  "stevegrave": "{} {return \\ \\ \\ \\ \u000314_____\\n\\ \\ \u000314/~/~\\ \\ \\ ~\\\\\\n\\ \u000314|\\ |\\ \\ \\ \\ \\ \\ \\ \\\\\\n\\ \u000314\\\\\\ \\\\\\ \\ steve\u000314\\ \\\\\\n\\ \\ \u000314\\\\\\ \\\\\\ \u000314\\ jobs\u000314\\ \\ \\\\\\n\u00033\u00033\u00033\\ --\u000314\\\\\\ \u000314\u000314\\\\\u000314\u000314\\ \\ \\ \\ \\ \\ \\ \u00039.\u000314\\\\\u00039''\\n\u00033\u00033--==\u000314\\\\\\ \\\\\u000314\u000314\\ \\ \\ \\ \\ \u00039,,i!!i,\\n\\ \\ \\ \\ \u00039''\\\"'',,\\}\\{,,}\n",
  "slackuser": "{{who {}}} {if {$who eq \"\"} {set who [lindex_random [names]]}; return \"<$who> i'm gay\"}\n",
  "sams?": "{} {c [llength [intersect [string tolower [names]] {sam sma sherman samanthajean}]] sams}\n",
  "randomchat": "args { embed [embed [embed [join $::letmeinonthisascii \"\\n\"] [ST*] 5 1] [ST*] 17 2 ] \"[first $args [upper [*word]]] CHAT\" 30 4 }\n",
  "niggerphrase": "{} {subst [lindex_random $::niggerphrases]}\n",
  "slash": "{} { return /}\n",
  "ryramid": "str {set ret [list]; foreach i {9 7 5 3 1} {lappend ret [center [string repeat $str $i] [expr {[string length $str]*9}]]}; join $ret \\n}\n",
  "abezfu": "{} {ajoin \"\" [fu] [STabezexp] [flip [fu]]}\n",
  "getnuniq": "{n f {o {}}} { while {[llength $o] < $n} { set t [eval $f]; if {-1==[lsearch $o $t]} { lappend o $t } {}; }; return $o}\n",
  "jax": "{} {chatquote jax}\n",
  "immigrants": "{{who @Karabiner}} {return \"<[name $who]> there are no [ethnic_group] above the 38th parallel ([name], [name]: I know)\"}\n",
  "sa_thread_titles": "{{forumid 0}} {odd_elm [sa_threads $forumid]}\n",
  "factor_prime": "{{big_ass_integer 33137}} {. $big_ass_integer = [prime_word] * [prime_word]}\n",
  "flickr_lg": "url {regsub .jpg $url _b.jpg}\n",
  "afedsnightout": "{} { return \"[sex_act] a [alliterate $::faglame_dict $::sexparts]\"}\n",
  "drawtable2": "{table {colors {}} {seperator {}} {align {}}} {if [llength $table] { set colwidths [colwidths $table];join [map [seq 0 [expr [llength $table] - 1]] {rownum {drawrow [lindex $table $rownum] $colwidths $colors $seperator $align}}] \\n}}\n",
  "karamm": "n {upvar #0 karamm a karastats s;set k [nick];if {[lsearch [array names a] $k]<0} {array set a [list $k [list [expr [rand 4]+1] 1]]};set c [lindex $a($k) 0];set m [lindex $a($k) 1];if {$n==$c} {unset a($k);lappend s($k) $m;return \"Good job $k the combo was [master_col $c] in $m moves\"} {incr m;array set a [list $k [list $c $m]];return \"$k [master_col $n] Perfect Matches 0 Not So Perfect Matches 0 Misses 1\"}}\n",
  "juden": "{} {return \"Wer vom Juden isst, stirbt daran.\"}\n",
  "bibleverse": "{b c s e} {set b [string map {{ } +} [capitalize $b]];set o [list];if {$e eq \"\"} {set n [expr $s+1];set e $s} {set n $e};set html [cwget http://quod.lib.umich.edu/cgi/k/kjv/kjv-idx?type=citation&book=$b&chapno=$c&startverse=$s&endverse=$n];foreach {m v t} [regexp -all -inline {<br>\\[<b>(\\d+)</b>\\] ([^<]+)} $html] {if {$v >= $s && $v <= $e} {lappend o \"\\[[string map {+ { }} $b] $c:$v] $t\"}};join $o \\n}\n",
  "strawman-comic": "{strawman pinhead} {avatar-say [avatar-say http://i.buttes.org/http://duriansoftware.com/toys/strawman.png $pinhead R] $strawman L}\n",
  "buster": "{} {biggaytext @MACRO\\ BUSTER@}\n",
  "darren?": "{} {foreach darren [string tolower [names]] { if [regexp {\\.(co|net)\\.nz|jp$} [hostmask $darren]] { return [c \"$darren\" \" fucks sheep\"] }; }; }\n",
  "nip_talk": "{{oi 3} {ii 30}} {set str \"\"; for {set i 1} {$i <= $oi} {incr i} {append str \"[nip [lindex_random [seq 1 $ii]]][choose {\u0002} {m\u0002} {\u0001} {K\u001f} {L\u001f}]\"}; return \"$str[lindex_random $::jap_emotes]\"}\n",
  "band": "{} {lindex_random $::bands}\n",
  "nigqdb": "args {niggerize [apply lolqdb $args]}\n",
  "cockboat": "{{idiot {}}} {return \"Stop sailing the COCKBOAT\\n\\,\\,,\\\\\\B==Captain $idiot==D/\\,\\,\\,\"}\n",
  "tp_a": "{{who Kalle}} {. \"<[name $who]> [p_a]\"}\n",
  "britfighter": "{{name {}}} { . [or $name \"[waspfirstname] \\\"[title] [random_word]\\\" [choose [alshort] [waspsurname]]\"], fighting out of [englishtown], Great Britain }\n",
  "rpg_adventure": "{} {return \"You begin your quest in a dirty apartment in [city], [sex_act] a [adjective] [niggerword].  To your [direction] is some [drug].  To your [direction] is a door.\"}\n",
  "fuckword": "{} {lindex_random $::fuckwords}\n",
  "master_get": "i { set a [lindex [array get ::mastermind $i] 1]; if {$a == \"\"} { return [master_generate $i] } else { return $a };}\n",
  "bgc": "{c1 c2 str1 str2} {join [adjacent_join [list [nsplit [bgr $c1 $str1]] [nsplit [bgr $c2 $str2]]]] \\n}\n",
  "timeline:img": "{} { join { {                         TIMELINE OF HISTORY} {     Birth of       The Big            } {     John McCain    Bang                                          NOW} {    -|--------------|---------------|------------------------------|-} {                                                   ^} {                                                   |} {                                               YOU ARE HERE}} \\n}\n",
  "puntme6": "{} {sombrerify2 [puntmesay [puntme5]] {  ___/(__}}\n",
  "proofthatdarrenisarab": "{{who darren}} {return \"<00:32.09 <@puntme> arab you ever play quest 64\\n00:32.11 < [name $who]> huh no i never played that\\n00:32.15 < [name $who]> not that i am arab\\n\";}\n",
  "hellojpg": "{} {. http://goatse.fr/hello.jpg}\n",
  "miniokey2": "{} {. \"._Â·\"}\n",
  "apple": "{} {return \"what the fukkk Apple Computer announcing switch to [shsc_word] on Monday??!\"}\n",
  "random_word": "{{w {}}} {if {$w eq {}} {set dict [random_dict];set w [strip_u [$dict]]};return $w}\n",
  "randomsafetyimage": "{} {safetyimage [roll $::safetyimagelimit]}\n",
  "randbot": "{} {. Whatbot: [random_word]}\n",
  "uniq3": "list {array set values [zip $list {}]; array names values}\n",
  "chinsamoira": "{} {return [embed [embed [chinsamid] [flip [bottle]] 27 3] \"Ã\\\\\" 25 3]}\n",
  "STspade": "{} { return \"     /\\\\      \\n    /  \\\\     \\n   (_/\\\\_)    \\n     /\\\\      \";}\n",
  "nick_loan": "{} { wget http://abez.ca/~abez/zybl0re_loan_2 }\n",
  "get_coords": "icao {\n\tset ical [string toupper $icao]\n\tif [cache exists airport_cache $icao] {\n\t\treturn [cache get airport_cache $icao]\n\t}\n\tset addr \"http://maps.google.com/maps/geo?output=csv&oe=utf-8&q=$icao&key=ABQIAAAAdsSAw1O-7omKe7LKXavpFRQh99ZTDzCKrh6sdHmT446MSWVSuhQasqJRpIgMOXXBU7v4pHuaaCd2rA\"\n\tset api_output [split [cwget $addr] \",\"];\n\tif {[lindex $api_output 0] != 200} then {error \"geo api failed\"};\n\tset coords [lrange $api_output 2 3]\n\tcache put airport_cache $icao $coords\n\treturn $coords\n}\n",
  "seinlords": "{{who {}}} {if {$who eq \"\"} {set who [lindex_random [names]]}; return \"<$who> I for one welcome our new [strip_s [seinfeld_word]] overlords\"}\n",
  "clothing": "{} {lindex_random $::clothing}\n",
  "dork": "{} {lindex_random $::dork_quotes}\n",
  "padlinesto": "{m lines} {set nlines \"\";set a \" \"; foreach j $lines { set sl [string length [strip_all $j]]; if {$sl < $m} { set j \"$j[string repeat $a [expr {$m - $sl}]]\"; }; lappend nlines $j; }; return $nlines}\n",
  "swastisay": "args {ajoin \" \" [cswas] \"\\n\\n[bt [join $args]]\" [cswas]}\n",
  "xd": "{{lol {}}} {if {$lol eq \"\"} {set lol \" \"}; return [biggaytext XD]\\ $lol}\n",
  "gen-avatar-say-code": "{avatar text {orient L} {balloon http://churchturing.org/x/stamps/symbols/shapes/speech_balloon.png}} {\n\tset str [scheme_escape [wrap $text 30]];\n\tset avoffset [if {$orient == \"L\"} {. 0 } {. (- mw aw) } ];\n\tset svoffset [if {$orient == \"L\"} {. 0 } {. (- mw sw) } ];\n\tset flop [if {$orient == \"L\"} {. noop } {. flop } ];\n\treturn \"(let ((avatar (image $avatar))\n\t              (aw (width avatar))\n\t              (ah (height avatar))\n\t              (speech \n\t                  (annotate \n                              ($flop (image $balloon))\n                              14 25 25 black \\\"$str\\\"))\n\t              (sw (width speech))\n\t              (sh (height speech))\n\t              (mw (if (> aw sw) aw sw))\n\t              (mh (+ ah sh))\n\t              (canvas (resize (image http://churchturing.org/w/1x1.png) mw mh)))\n\t                  (composite (composite canvas avatar $avoffset (* 0.99 (height speech))) \n\t                             speech $svoffset 0))\"\n}\n",
  "m0ntspace": "args { set n [first_true $args [niggerwoman]]; subst \"Is this your montspace http://www.montspace.com/$n\" }\n",
  "buttesfeld": "{} {. <[name]> and what's the deal with [talking_word_for #onebutan]?}\n",
  "achievement": "args {. http://achievements.schrankmonster.de/Achievement.aspx?text=[urlencode [join $args]]#.jpg\\nhttp://centracomm.cachefly.net/majornelson/2007/Achievement-mp3-sound.mp3}\n",
  "octalsay": "args {stampsay -s octalc0de [join $args]}\n",
  "image-troll": "url {caption $url [trolldb]}\n",
  "aim+": "args {if {[lrange $args 0 0] eq \"-n\"} {set nick [lrange $args 1 1]; set what [join [lrange $args 2 end]]} {set nick [rand_aim]; set what [join $args]}; set ret [list]; foreach dong [split $what \\n] {lappend ret \".a\\im+ $nick [strip_all $dong]\"}; join $ret \\n}\n",
  "frotflag": "{} {gayflagify [head 18 [walloffrot]]}\n",
  "overheard_niggers": "{} {}\n",
  "babby": "{} {. \\n\"babby\" is formed by adding a \"b\" to baby \\n\"pragnent\" is formed by rearranging the \"a\" and the \"e.\"}\n",
  "metasolve": "{} {proc solve {} {return \"Install Linux -- Problem Solved\"}; proc dissolve {} {proc solve {} {metasolve}}}\n",
  "new_youtube_comment": "{} { last [youtube_comments [?? [top_youtube_ids]]] }\n",
  "dink": "{} return\n",
  "temperature": "l {regexp -line {^Temperature:.*$} [weather $l] m;. $m}\n",
  "Krashed": "{} {return \"\u000308A\u000304B\u000313S\u000312O\u000311L\u000309U\u000308T\u000304E \u000313F\u000312A\u000311G\u000309G\u000308O\u000304T\u000f\"}\n",
  "test_coutn_nicks": "mask { set mask [string tolower [regsub {s?\\?$} $mask \"\"]]; set count [llength [lfilter *$mask* [string tolower [names]]]]; if {count = 1} {return \"${count}${mask}\" } else {return \"${count}${masks}\" } }\n",
  "ikea": "{} {stampsay -s vikingboat \"The new [string toupper [swede_word]] [choose \"computer desk\" table chair lamp bedframe \"shelf system\" pillow]; only at IKEA\"}\n",
  "nethack:lit": "{} { return \\302\\267 }\n",
  "image-think": "{url txt} {magick annotate [magick_composite_top_left $url [tuxpaintstamp thought]] 14 25 20 black [wrap $txt 25]}\n",
  "homebrew_cheers": "{} {embed [embed [embed [embed [homebrew] [flip [homebrew]] 20 1] [flip [STmoira]] 30 6] [stream 10 3] 24 3] [flip [stream 10 4]] 18 3}\n",
  "minutes": "args {if {$args eq \"\"} {set retard [nick]} else {set retard [strip_all [join $args]]};  set i [intersect [string tolower $retard] [string  tolower $::unlimited_plan]]; if {$i > 0} {return \"\u0002$retard is on the unlimited buttes minutes plan!\";} else { return \"$retard's buttes minutes have \u0002expired\"}}\n",
  "bonertime": "{} {return \"         _____\\n      _.'_____`._\\n    .'.-'  12 `_.`.\\n   /,'  _     /\\\\)`.\\\\\\n  // 10(/\\\\   / / 2 \\\\\\\\\\n ;;     \\\\ \\\\ / /     ::\\n || 9   (Y ( Y)   3 ||\\n ::      \\\"  \\\"\\\"      ;;\\n  \\\\\\\\ 8           4 //\\n   \\\\`. 7       5 ,'/\\n    '.`-.__6__.-'.'\\n     ((-._____.-))\\n     _))       ((_\\n    '--'       '--'\\n    \u0002IT'S BONER TIME\u0002\"}\n",
  "master_won": "{i a b c d} { master_clear $i; set ret [master_won_print $i $a $b $c $d]; master_inc_stat $i [master_score_get $i]; master_score_clear $i; return $ret}\n",
  "est": "{{who {}}} {if {$who eq \"\"} {set who [name]}; set est [word iest$]; return \"$who is the $est [regsub {iest} $est \"\"] that ever [regsub {iest} $est {ed}].\"}\n",
  "morseml": "{} {morse [fml]}\n",
  "japanese_thing": "{} {lindex_random $::japanese_thing_dict}\n",
  "salted_broth_ad": "{} {. [figlet \" Lush Mick's\\n          SALTED\\n              BROTH\" Varsity]\\n \\n[center \\\"[mmm]\\\" 80]}\n",
  "unknown:1:cmd/^(\\d+)gis$/": "{matches cmd args} {apply ngis [concat [list [last $matches]] $args]}\n",
  "fagacro": "{} {randacro [regsub -all {[^a-zA-Z]} [randacro [word]] {}]}\n",
  "box": "what {set lines [split $what \\n]; set top_edge \".-[string repeat - [maxstringlength $lines]]-.\"; set side_edge [join [string repeat \"| \" [llength $lines]] \\n]; return $top_edge\\n[ajoin \"[^O] \" $side_edge $what $side_edge]\\n[string map {. '} $top_edge]}\n",
  "lessees?": "{} {c [llength [intersect [string tolower [names]] [string tolower $::leasers_list]]] lessees}\n",
  "gayagenda:time": "{{hour 0} {min 0} {second 0}} { regsub {^0} [clock format [+ [midnight] 3600*$hour  60*$min  $second] -format \"%I:%M %p\"] { }}\n",
  "therapy": "{} {goonsay {5'11\" tall, 350 lbs.}}\n",
  "white_mills": "{} {. \"[color red on white] MILLS MILLS MILLS \"}\n",
  "gisfml": "{} {set f [fml]; set g [gis [join [map [lrange [lreverse [lsort [word_count $f]]] 0 4] [& cdr]]]]; return [list $g $f]}\n",
  "annoying": "{} { subst [ lindex_random $::annoying ] }\n",
  "squirt_jihad": "{} {. \"[upper [squirt_word] [sperm_word]] upon those who [insult_verb] [upper [crw_word]]\"}\n",
  "ugh": "{} {fw [choose bt bgt et] ugh}\n",
  "bt911": "args {ajoin [uchar 2708 20] \"\" [bt [join $args]]}\n",
  "rexalert": "{who args} {rexsay \"[bold][color red][upper \"$who [join $args] adventure comics\"][color][bold]\"}\n",
  "GaSSy": "args {return [gassy]}\n",
  "alien": "{{name Alien}} {return \"<[name $name]> nobody likes [element_word]\"}\n",
  "chatsoft": "{} {rainbow [strip_color [wt2 \"chat soft\"]];}\n",
  "STranch": "{} {join {{    .----.} {    |    |} {    |____|} {    |____|} {    ;    ;} {  .'  /\\  '.} { / .------. \\ } {; | Hidden | ;} {i | Valley | i} {i | RANCH  | i} {i `--------' i} { \\          /} {  `.______.'}} \\n}\n",
  "STshoe7": "{} {join {{        _   } {     .'--'\\ } { _.-`   __/ } {(_____.'|_| }} \\n}\n",
  "fatniggerweb": "{{glob {}}} {stampsay -s savage [niggerize [lindex_random [lfilter *${glob}* [eval [wget http://www.fatgoon.com/blog/all.tcl]]]]]}\n",
  "randhorse": "{} {}\n",
  "bazooka2": "{} {return \"  _________________________________   __   ______\\n |_________________________________|  __===______)\\n               |  /  ||_|     ||\\n               |_/   ||       ||   Lovingly, I slid my bazooka shell\"}\n",
  "mccain_slogan": "{} {set uw [getnuniq 3 mccain_word]; upper \"[choose \"[lindex $uw 0] is born of [lindex $uw 1]\" \"[join $uw .\\ ]\" \"[mccain_word] we can believe in\"].\"}\n",
  "arabnews1": "{} {return \"[upper [arabland]] ([newsservice]) - UNICEF rages as [newscompany] reporter [jewfullname] uncovers a story of an underaged victim of [sex_act] convicted to corporal punishment along with the perpetrator.\"}\n",
  "STgerbil": "{} {return \"      .     .\\n     (>\\\\---/<)\\n     ,'     `.\\n    /  q   p  \\\\\\n   (  >(_Y_)<  )\\n    >-' `-' `-<-.\\n   /  _.== ,=.,- \\\\\\n  /,    )`  '(    )\\n ; `._.'      `--<\\n:     \\\\        |  )\\n\\\\      )       ;_/\\n `._ _/_  ___.'-\\\\\\\\\\\\\\n    `--\\\\\\\\\\\\\"}\n",
  "aimf_nimpspace": "args {aimify nimpspace $args}\n",
  "truncate": "list {take 5 $list}\n",
  "aim": "args {\n if {[lrange $args 0 0] eq \"-n\"} {\n  set nick [lindex $args 1]\n  set what [join [lrange $args 2 end]]\n } elseif {[lrange $args 0 0] eq \"-d\"} {\n  set nick [raim [lindex $args 1] ]\n  set what [join [lrange $args 2 end]]\n } else {\n  set nick [rand_aim]\n  set what [join $args]\n }\n set ret [list]\n foreach dong [split $what \\n] {\n  lappend ret \".a\\im $nick $dong\"\n }\n join $ret \\n\n}\n",
  "go:right": "{} {uchar 252b }\n",
  "STpenis2": "{} {return \"   _\\n  /\\\\)\\n / (\\n(   )\\n \\\"\\\"\\\"\"}\n",
  "fruitarian": "{} {return [rain [rawvegan]]}\n",
  "ipozt": "{} {return \"  ____________________\\n / __________________ \\\\\\n| |                  | |\\n| |       / \\\\        | |\\n| |      /   \\\\       | |\\n| |    \u000305G.\u000308R.\u000309I.\u000302D.\u000306S.\u0003    | |\\n| |    /_______\\\\     | |\\n| |                  | |\\n| |__________________| |\\n|                      |\\n|                      |\\n|       ________       |\\n\"}\n",
  "threatens": "{a b} {. $a threatens $b}\n",
  "virusfile2": "{{who {}}} {return \"[underscore [choose \"[expr {int(rand()*40)+60}]_year_old_\" \"[expr {int(rand()*22)+1}]_month_old_\" \"[expr {int(rand()*8)+1}]_week_old_\" ]\"[celebrity]_[fetish_porn]_[gudrow_word]_[sex_act]_[food_word]_with_[name $who]_[goon_word]_and_[faglame]_[ethnic_group][virusextension]]\"}\n",
  "mystery2": "{} {set mysteryproc [lindex_random [info procs]]; if {[llength [info args $mysteryproc]] < 1 } { set mysteryresult [eval $mysteryproc]; return \"output of proc $mysteryproc:\\n$mysteryresult\" } else { mystery2 }}\n",
  "ihbt": "{{name {}}} {. [or $name [nick]] \"has been trolled\\; \\\"ihbt,\\\" he quickly replies, hoping to take the edge off the blow.  Phew, he thinks, that was close.\"}\n",
  "seizureblock": "{{n 18}} {aflip [join [mapx [lines [randart $n]] line {join [mapx [split $line {}] char {. [color [gay] on [gay]]$char}] {}}] \\n]}\n",
  "err": "{} {. $::errorInfo}",
  "arotate180": "v {vflip [flip $v]}\n",
  "applestore": "{{store {APPLE STORE}}} { string map [list {GAY BAR} $store] [gaybar]}\n",
  "whilst": "{} {. <sam> I can't help but roll my eyes every time I read the word \\\"[random_word].\\\" I know it's common in [country] [language] but it's just so [word tatious$].}\n",
  "aapl": "{} {set aapl [stock aapl]; if {[regexp {\\+\\d} $aapl dummy]} {. [uchar f8ff 20 2708] $aapl} else {. [uchar 2708 20 f8ff] $aapl}}\n",
  "asuka": "{} {return \"http://farm3.static.flickr.com/2368/2441887271_b03cc8c8cb.jpg?v=1209210103\"}\n",
  "welshword": "args {if {$args == \"\"} {set args [rand 4 9]}; string map {\" \" \"\"} [lselect_random {\"c\" \"y\" \"w\" \"m\" \"r\" \"g\"} $args]}\n",
  "edwards_field": "{} {smega {next_in_list {{red_mills} {white_mills}}} 5}\n",
  "comic_line": "{} {eval \"[choose albot niggerphrase cached_onehug random_word comic_line1 moiradrunk ripper_line overheardline]\"}\n",
  "fullwidth": "args {set str [strip_color [join $args \" \"]]; set ret [list]; foreach ltr [split $str \"\"] {set dec [scan $ltr %c];if {$dec > 32 && $dec < 127} {lappend ret [unichar_dec [expr $dec + 65248]]} elseif {$dec == 32} {lappend ret [uchar 3000]} else {lappend ret $ltr}}; return [join $ret \"\"]}\n",
  "ceval:load": "key {\n  if [cache exists ceval $key] {\n    uplevel [list array set data [cache get ceval $key]]\n    return 1\n  }\n  return 0\n}\n",
  "cordify": "str {string map [list cord $str] [cord]}\n",
  "audiophile_review": "{{product {}}} {. The [or $product \"[audiophile_brand] [audiophile_product_word]\"] brought new [shakti_word] to the system. [capitalize [shakti_word]], [shakti_word] and [shakti_word] all improved greatly. My friend has a Ph.D. in [shakti_word] studies and agreed that the [shakti_word] was noticeably amazing.}\n",
  "http_status_message": "code {if [info exists ::http_status_messages($code)] {return $::http_status_messages($code)} {return \"\"}}\n",
  "thegame": "{} { return $::thegame; }\n",
  "dberize": "{} {return [[lindex_random {weaselize underscoreize niggerize canadianize chinkerize homoize haikuize colorize hyphenize phpize randcap}] [trolldb]]}\n",
  "cpchat": "{} {string map {{| |   } CATBUS BUTTES CP} [butteschat]}\n",
  "columns": "args {return \"12222222222333333333344444444445555555555666666666677777777778\\n90123456789012345678901234567890123456789012345678901234567890\\nRemember kids, you have this much room to play if you expect\\nyour macros to look right in normal sized terminals. Please \\nrespect our ASR33 users!\\n|<------------------------62 columns------------------------>|\\n\\nOh yeah, don't worry about how many lines you use because no\\none cares if you spam.\"}\n",
  "goonphrase": "{} { lindex_random $::goonphrase_dict }\n",
  "blakemug": "{} {. \"http://i.conio.net/blake.jpg\"}\n",
  "xaozon": "{{who xaozon}} {. \"<[name $who]> im gay\"}\n",
  "rndtcl_proc": "{} {set ret [lindex_random [info procs]]; do_times [rand 3] {lappend ret [rndtcl_expression 1]}; join $ret}\n",
  "ignorance": "{} {return {GIN OCEAN}}\n",
  "bullmonkey": "{} {lindex_random $::bullmonkey_phrases}\n",
  "yogotdatright": "{} {return \"i call mah wife dat fuckin' biatch when I wid mah crew. dey laugh and say yo' got dat right !\"}\n",
  "bj_hit": "{} { return [bj_hitme]; }\n",
  "klulz": "{} {. KLULZ was a perfectly good radio station until revmischa took it over under the belief he knew what he was doing. In order to achieve this spectacular coup, he enlisted Sloth and g0sp to alienate everyone useful from the website. They succeeded in this aim, and are now sole controllers of an internet radio station that would lose money if ezbake ever stopped ddosing it and it gained an audience bigger than ten people}\n",
  "andrzej_recipe": "{} {. \"<andrzej> I want to share with you a traditional Wojcieszynski family recipe from the old country. You'll need 12 ounces of [?? $::goon_liquidfood], 3 packages of [?? $::goon_solidfood] and some [polish_food]. We made it when Poland was occupied by [political_word] [country_name]. [mmm]\"}\n",
  "au": "args {tt \"action update:\" [join $args]}\n",
  "albot": "{} {lindex_random $::albot_dict}\n",
  "boqueefa": "{} {return \"tcl boqueefa\"}\n",
  "hypnotic": "{} {return \",_________       __________ \\n\\\\   @    |    \\\\  |      @ /\\n \\\\______/      \\\\  \\\\______/\\n                \\\\    \\n                /      \\n  \\\\_____________________\\n\"}\n",
  "movieplotfor": "{{who {}}} {set w [name $who]; . \"\\\"[ucwords [talking_word_for $w]][sequel]\\\" ([string totitle [genre]], [+ 1982 [rand 26]]) tells the story of $w ([celebrity]) growing up in [choose [country] [state] [city]], coping with [talking_word_for $w], [talking_word_for $w], and [talking_word_for $w].\"}\n",
  "uniq2": "l {foreach i $l {array set o [list $i 1]}; array names o}\n",
  "nethack:trcorner": "{} { return \\342\\224\\220 }\n",
  "mi2km": "miles {expr $miles * 1.609344}\n",
  "hillary": "{} {lindex [regexp -inline -line {<a class=\"phrase\" href=\"/\">(.*?)</a>} [wget http://hillaryismomjeans.com]] 1}\n",
  "every_n_from": "{n offset args} {set list [join $args]; set ret [list]; for {set i $offset} {$i < [llength $list]} {incr i $n} {lappend ret [lindex $list $i]}; return $ret}\n",
  "oceanlanding": "{} {set plane [lines [upside_down [pad_lines [STcockjet]]]]; join [concat [lrange $plane 0 4] [map [lrange $plane 5 end] {line {. [color blue on white]$line}}]] \"\\n\";}\n",
  "moiradoom": "url {magick_overlay [moiravision $url] http://magick.buttes.org/temp/dd5717bd0b7406d51c42b8a655a2ef12.png}\n",
  "buzzmano": "{} {giga {. manophone}}\n",
  "Dump": "Hepatitis_C {lappend Mountain_Dew [slack]; set Scrotum $large_intestine; return $spade; return [expr [threads] >= $Fluorine]; return $Amazonian_Women}\n",
  "mean": "args { expr [lsummate $args] / ( 1.0 * [llength $args] ) }\n",
  "stig": "{} { ?? $::stig_dict}\n",
  "realwrap:ttllen": "{tokenlist token} { + [realwrap:len $tokenlist] [string length $token]}\n",
  "whisper": "stuff { set ret \"pspsssssspssgirlshitspsssstpspsstssdidyouknow${stuff}omgpsssspsssssst\"; return $ret;}\n",
  "sexytime": "{} { set pair [ajoin \" \" [STwoman] [vflip [STwoman]]]; ajoin \" \" $pair $pair $pair [STwoman]; }\n",
  "niggasay": "{} {goonsay \"OOGA BOOGA WHUR DA WHITE WEMEN @\"}\n",
  "ircify": "l { join [map $l {{x} {. \"<[choose a b c]> $x\"}}] \\n }\n",
  "bgb": "{} {upper [subst [next_in_list $::bgbl]]}\n",
  "smalltext": "str {string tolower $str}\n",
  "leftomgchair": "{} { join $::leftomgchair \\n }\n",
  "capitalize_first": "str {. \"[string toupper [string index $str 0]][string range $str 1 end]\"}\n",
  "go:bottom": "{} { uchar 253b }\n",
  "zxc": "a {. \"${a}_b\" }\n",
  "ancientchinesesecret": "{} {return \"[smega { chinee [mystery] }]\"}\n",
  "syllables": "word {\n\tregsub -nocase {(es|ed|[^l]e)$} $word {} word\n\tset len [string length $word]\n\tif {$len <= 3} {return 1} else {\n\t\tregsub -all -nocase {[aeiouy][aeiouy]} $word {a} word\n\t\treturn [regsub -all -nocase {[aeiouy]} $word {} null]\n\t}\n}\n",
  "youlie": "{{liar {}}} {return \"[color blue on black]$liar, [color red on black] Joe Wilson[color blue on black] says you lie.\"}\n",
  "grid_layout": "l {set w [llength [first $l]]; set wl [expr 80 / $w]; set div [join [repeat $w [list string repeat - [+ 1 $wl]]] +]; join [map $l {{row} {apply ajoin [concat \"|\" [map $row {{x} {realwrappad $x $wl}}]]}}] \\n$div\\n }\n",
  "flickrphoto_list": "{id args} {if {$args == \"\"} {set t \"\"} {set t \"&tags=[join $args ,]\"};set html [unescape_html_entities [cwget http://api.flickr.com/services/feeds/photos_public.gne?id=$id&lang=en-us$t&format=rss_200]]; set images \"\"; set matches [regexp -all -inline {<img src=\"(.*?)\"} $html]; for {set i 0} {$i < [llength $matches]} {incr i} {if {$i  % 2} {lappend images [flickr_med [html [strip_html [lindex $matches $i]]]]}}; return $images}\n",
  "slot_stamp_value": "stamp_name {string length [string map {\\n \"\" \" \" \"\"} [eval $stamp_name]]}\n",
  "rebootdance": "{{lyrics {REBOOT REBOOT CHA CHA CHA}}} {set saqs [saqdance]; return \"[center $lyrics [string length [lindex [split $saqs \\n] 0]]]\\n$saqs\"}\n",
  "savebigmoney": "{} {. \"http://i.conio.net/menards.m4r#.mp3\"}\n",
  "digital_signal_processor": "{} {return \"digital sheepfucker\"}\n",
  "moira_beer_review": "{} {. [berp] [?? [lrange [lines [strip_all [colin_white_show]]] 1 end-1]]}\n",
  "YIFF": "{} {return \"MURR\"}\n",
  "dasherize": "phrase {join [split $phrase] -}\n",
  "dinosaurs?": "{} { gudrows? }\n",
  "hydraquit": "{} {. Want to be different? Try \u00030HydraIRC\u0003 -> http://www.hydrairc.com }\n",
  "scat": "{} {. Ski-Bi dibby dib yo da dub dub\\nYo dab dub dub\\nSki-Bi dibby dib yo da dub dub\\nYo dab dub dub}\n",
  "unknown:4:cmd/neonfreon/": "{} { good1 dork }\n",
  "goondoctor": "{} {stampsay -l -s doctor2 [doctoral] [mmm]}\n",
  "maybe_in_the_usa": "{} {choose \"\" \" in the U.S.A\" \", Can't Get Enough\" \" Hardcore Remix\" \" Feat. [capitalize [random_word]]\" \", DJ [capitalize [random_word]] Mix\" \", where are you?\" \" on the way to the club\" \" on your face\" \" of pleasure\" \" ([seinfeld_word] soundtrack)\" \" 2k[rand 5]\" \" Reloaded\" \", Oh Yeah\" \", Holla!\" \" (Gimme Some)\" }\n",
  "np": "{} {bgt not a problem}\n",
  "cosinewave": "word { join [map [seq 1 15] {{x} {. [string repeat \" \" [expr int(10 + 10 * cos(3.14 * 3 * $x/20))]] $word }}] \\n }\n",
  "trace:tree_levels": "proc {apply {set ttree} [. \"\\$::ttree_${proc}\"]; say2 \"Call level statistics for `\\x1fproc $proc\\x1f':\" [channel]; center2 [each [lsort -unique -integer -decreasing [regexp -all -inline {[0-9]+} $ttree]] {l {. \"\\002$l\\002 (\\x1f[uplevel \"llength \\[lsearch -regexp -all \\$ttree \\\"^$l\\$\\\"\\]\"]\\x1f)\"}}]}\n",
  "enc": "args {set k [split [wt $args] \"\\n\"]; k}\n",
  "fixchargen": "{} {proc chargen {} {return \"\\1DCC CHAT CHAT 1122436482 19\\1\"}; return \"chargen fixed\"}\n",
  "nickinfo": "{{who {}}} {embed [embed [embed [box [canvas 20 11]] [. \" [name $who] \"] 4 1] [. \"MAX UNIT : [string toupper [rand_char2]][string toupper [rand_char2]]-[rand 9][rand 9][rand 9][rand 9]\\nMAX POWR : [rand 4000]ps\\nMAX SPD  : [rand 800]km/h\\nWEIGHT   : [rand 2000]kg\\n\\n ACCELERATION\\nkm/h\\n |\\n |\\n |\\n '------------------\"] 3 2] [snakebanner] 5 9}\n",
  "enumlist": "l {set len [llength $l]; zip [seq 0 [- $len 1]] $l}\n",
  "bb_phrase": "{} {?? $::bb_dict}\n",
  "hectagenda": "{} { catagenda HECTING }\n",
  "planet": "{} {?? {Mercury Venus Earth Mars Jupiter Saturn Neptune Uranus}}\n",
  "niggeraddress": "{} {return \"[string tolower [string map {\" \" \"\" \"'\" \"\"} [niggername]]].[choose johnson jackson jenkins [string tolower [muslim_firstname]]]@[string map {\" \" \"\" \"'\" \"\" \"-\" \"\"} [string tolower [niggerword]][tld]]\"}\n",
  "minikitty": "{} {return \":\u000313Â·\u0003\u0002\u00023\u000f\"}\n",
  "niggertoes": "{} {return \"shut up, fishmech\"}\n",
  "btc": "args {kikesay \"[?? $::btc_dict]\"}\n",
  "image-fml:queries": "{} { set hb [gis [hotbutton]]; set fml [fml]; cache put image-fml hb $hb; cache put image-fml fml $fml }\n",
  "dongue": "text { rainbow $text }\n",
  "STmoon": "{} { return \"       |\\\\    \\n       | \\\\   \\n     _/o  |  \\n  __'_,  /   \\n  \\\\_____/    \";}\n",
  "aimfoodsult": "{{who {}}} {aim -n [aimname $who] [foodsult]}\n",
  "blackitem": "{} {subst [lindex_random $::blackitem]}\n",
  "hackertip": "{} {. Unsheathe your samurai e-sword from its scabbard young hacker, it's time for some serious hack-fu which isn't recommended for beginners. I, the great Erica Sadun have discovered an amazing undocumented feature of Mac OS X. To unleash the true power of the BSD subsystem and UNIX underpinnings, open terminal.app and type the following command: [?? $::unix_commands]}\n",
  "ceval": "{script {ttl {}}} {\n  if ![ceval:get $script value] {\n    set value [ceval:set $script [eval $script] [or $ttl $::ceval_ttl]]\n  }\n  return $value\n}\n",
  "electhillary": "{} {. \"[permute \"Hillary Clinton #1 Presidential Candidate\"]\\n- The Momjeans [publication]\"}\n",
  "gnu": "line {for {set i 0} {$i < [expr [llength $line] / 2 + 1]} {incr i} {set tok [lindex_random $line]; if {[string length $tok] > 3} {lappend gnulist $tok \"GNU/$tok\"}}; if {[info exists gnulist]} {string map $gnulist $line} {. $line}}\n",
  "scheisse": "{} {scheissegern; scheissegern2; scheissegern3; scheissegern4; scheissemid}\n",
  "lilo2": "{} {. \"LI\"}\n",
  "novowels": "args {regsub -all -nocase {[aeiou]} [join $args] \"\"}\n",
  "view_last": "{kind name} {set sname [sha1 $name]; set url http://shaniqua.buttes.org/git/shaniqua/log/${kind}s/$sname; . http://shaniqua.buttes.org/git/shaniqua/plain/${kind}s/$sname?id=[lindex [regexp -inline -all {\\?id=([a-z0-9]+)} [wget $url]] 7] }\n",
  "go:getxy": "{board x y} { lindex [lindex [go:getboard $board] $y] $x}\n",
  "msgall": "inmsg { putserv \"PRIVMSG #caretown: $inmsg\" }\n",
  "gaychorus": "{} { lindex_random $::gaychorus }\n",
  "cityslander": "{} {return \"[city]? More like \\\"[city]-wannbe!\\\"\"}\n",
  "search": "{d s} {eval \"lsearch -regex -all \\$::$d $s\"}\n",
  "evilsquid": "arg {ajoin \" \" [squid] \"[color red]      \\n[color red]\\n[color red]\\n[color red]\\n[color red]\"  $arg}\n",
  "lsinewave": "{} {string repeat x 2147483644}\n",
  "buttix": "{{who {}}} {. [macro buttrix]\\n Neo Was really [name $who]}\n",
  "invert": "text {return \"\\026$text\\026\"}\n",
  "v%dns": "{ip host s c p a} {\r\n\tif {!$s} {\r\n\t\tv%blog \"DNS lookup failure for `${host}'\" ${c};\r\n\t} else { ${p} ${ip} ${c} ${a}; };\r\n}\n",
  "unsort": "lines {\nset count [llength $lines]\nfor {} {$count>1} {incr count -1} {\n         set idx_1 [expr {$count-1}]\n         set idx_2 [expr {int($count * rand())}]\n         set temp [lindex $lines $idx_1]\n         lset lines $idx_1 [lindex $lines $idx_2]\n         lset lines $idx_2 $temp\n     }\nreturn $lines\n}\n",
  "alyssa": "{} {return \"Abez's sister is fucking hot\"}\n",
  "atodd": "{{name {}}} {string map {\"computer\" \"ATM\" \"lump u out\" \"carve u up\" \"fronted on me\" \"support McCain-Palin 08\"} [lump $name]}\n",
  "ST_tard3": "{} {return \"       `.     \\\\_ `-._         _.-'_.-'   .'\\n         `--.._ `-._ `-.__..-'_.-'     .'\\n               `-._ `--.__..-'  _.----'`\\n                   `---.......-' \\n\"}\n",
  "md5": "{} {randhex 32}\n",
  "cmp_factor_stats": "{a b} {if {[lindex $a 2] eq 0} {return -1} {if {[lindex $b 2] eq 0} {return 1} {expr int(100*((pow([lindex $a 1],2)/[lindex $a 2])-(pow([lindex $b 1],2)/[lindex $b 2])))}}}\n",
  "tweetmymorse": "{} {heynot [morseml]}\n",
  "kalleclean1": "{} {}\n",
  "megatooley": "{{who {}}} {if {$who eq \"\"} {set who [lindex_random [names]]}; return \"[tooley $who]\\n[tooley $who]\\n[tooley $who]\\n[tooley $who]\\n[tooley $who]\"}\n",
  "web2_job_ad": "{} {. [web2_name] is looking to hire a [shsc_word] [web2_job]}\n",
  "kenosha_steam": "{} {. \"Kenosha [title_each [crw_word]] & Apartments Company\"}\n",
  "place": "{} {. The internet is the place for [tranny_word]}\n",
  "STrocketcock": "{} rocketcock\n",
  "shitgame": "{} {. \"< [?? [names]]> never [?? $::shit_game_verbs] [?? $::shit_games] again. [mobexcuse]\"}\n",
  "familyguy": "{} {return \"[familyguy_char]: Remember [80s]?\"}\n",
  "cxr": "{cmd args} {set components [lrange [split $cmd {}] 1 end-1]; return [eval [join [list \"c\" [join $components \"r \\[c\"] \"r \" $args [string repeat \"\\]\" [expr [llength $components]-1]]] {}]]}\n",
  "help": "{} { return \"http://www.tcl.tk/man/tcl8.5/tutorial/tcltutorial.html\" }\n",
  "gud2": "{} {ajoin \"[color]o/*\\\\o\" [gud1] [flip [gud1]]}\n",
  "mystic": "{} {lindex_random $::mystic_dict}\n",
  "array_,": "{arrayname key vals} { set l [array_get_default ::${arrayname} $key {}]; if {$l == {}} { set ::${arrayname}($key) {} }; , ::${arrayname}($key) $vals }\n",
  "textmate": "{} tm\n",
  "baz": "{} bar\n",
  "rand": "{ceil args} {if [llength $args] {set floor $ceil; set ceil [first $args]} {set floor 0}; expr {int(rand()*($ceil-$floor)+$floor)}}\n",
  ":<": "{} {pyramid :<}\n",
  "throwshoe": "{{str {}}} {ajoin  \"\" [zoom 4] [STshoe] \"  \" $str}\n",
  "waspsurname": "{} {return \"[unplural [waspfirstname]][subst [string repeat {[lindex_random $::wasp_surname]} [expr {int(rand()*3)+1}]]]\"}\n",
  "play": "sound {. http://123.campfirenow.com/sounds/$sound.mp3}\n",
  "snow": "{{n {}}} {join [map [seq 1 [or $n [rand 100 200]]] {x {uchar [?? {2038 0331 030b 030a 0335 0327 0323 030c 0306 0303}]}}] {}}\n",
  "buttemnd": "{title img mp3} {tinyurl [. http://churchturing.org/autoytmnd/index.cgi?[? mp3 $mp3 title $title img $img]]}\n",
  "loof": "{} {embed [head 21 [@spic]] [color white on black][center [loaf2] 25] 18 8}\n",
  "sayfrance": "{{propa {}}} {set wstring \"\"; for { set i 1 } { $i<=([string length $propa]+2) } { incr i } { append wstring \" \" } ;  return \"[color blue on blue]      [color white on white]$wstring[color red on red]      \\n[color blue on blue]      [color blue on white] [name $propa] [color red on red]      \\n[color blue on blue]      [color white on white]$wstring[color red on red]      \\n\"}\n",
  "spankbank:deposit": "{{site {}}} {, spankbank $site}\n",
  "ipodde": "{} { subst [join [string map [list \\\\ \\\\\\\\] $::ipoddata] \\n] }\n",
  "kalle_stool_review": "{} {. [kallecleanline] [saq_beer_review] [mmm]}\n",
  "ari_pua": "{} {caption [img-ari] [p_a]}\n",
  "aimf_onehug": "args {aimify onehug $args}\n",
  "kuntakinte": "{} {zulu [gudrize [whittle [strip_all [ubuntu]]]]}\n",
  "STraincloud": "{} { return \"  ,--. ,-.   \\n (    \\`   ). \\n('   ,   ,  ;\\n\\`---'...-'--'\\n',',',',','  \";}\n",
  "polishify": "word {. [string map -nocase {a n b o c p d q e r f s g t h u i v j w k x l y m z n a o b p c q d r e s f t g u h v i w j x k y l z m} $word][choose \"mi\" \"ki\" \"yn\" \"zy\" \"sz\" \"wy\" \"ka\"]}\n",
  "roffles": "size {for {set i 1} {$i<=$size} {incr i} {rainbow \"gay\"};}\n",
  "gappfm": "{} {lastfm:lastfm trufflemongers}\n",
  "rot:iscolor": "c {\n\tset C $::rotC; \n\tif {[string index $c 0]==$C} { return 1; } { return 0;}\n}\n",
  "fuckingnda": "{} {. \"no, fuck [bold]you\\nhttp://developer.apple.com/iphone/program/\"}\n",
  "stf1": "{} {return [giga stf]}\n",
  "reflectfun": "x {expr 2*($x%4==1) + ($x%2 + 1) % 2}\n",
  "aimf_crw": "args {aimify crw $args}\n",
  "haikuize": "words {\n\tforeach word $words {\n\t\tlappend haimap [list $word [syllables $word]]\n\t}\n\treturn \"[haikuize_n $haimap 5]\\n[haikuize_n $haimap 7]\\n[haikuize_n $haimap 5]\"\n}\n",
  "gorphin": "{} {gorfsay [dolphin]}\n",
  "bigamerica": "{{hater {}}} {if {$hater eq \"\"} {set hater [lindex_random [names]]}; return [hate [bigtext $hater] America]}\n",
  "ac%char": "{} {stampsay -s [lindex_random ${::ac%stamps}] [ac%line]}\n",
  "tombstone": "{{name {}}} { set name [name_or_other $name]; . [gis $name headstone] \\n \"Here lies $name â shot in the back over a matter of [crw_word]\" }\n",
  "aimfish": "args {eval [lindex_random $::aimpranks] $args}\n",
  "rndtcl_if": "n {bracketize_if $n \"if {[rndtcl_expr $n]} {[rndtcl_statement]} {[rndtcl_statement]}[expr {$n ? \"\\]\" : {}}]\"}\n",
  "==": "{value args} {set result 1; foreach arg $args {if {$value != $arg} {set result 0}}; return $result}\n",
  "undesirables": "{} {lindex_random $::undesirable_nouns}\n",
  "butanseal": "{} {. http://presn.s3.amazonaws.com/onebutan-seal-improved.png}\n",
  "force_restart_shaniqua": "{} {[honeypot]}\n",
  "shakti_disc": "{} {. My favorites: Maxell 80 Minute Pro (blue) for solid [shakti_adj] low end, [shakti_word] and clean [shakti_word]\\; Maxell Music 80 minute gold for a [shakti_adj] hight-to-mid-to-bottom and wide [shakti_word]\\; Fuji 80 Minute Audio for a [shakti_adj] sound (smoothes out the edges). Memorex Music 80 minutes is very [shakti_adj], Taiyo Yuden 700 MB are [shakti_adj], the Mitsui and BASF are in there, Sony could be better...}\n",
  "hillary2": "{} {set temp [crw_word]; return \"This isn't $temp you can believe in, it's $temp you can Xerox\"}\n",
  "niggershscnews": "{} {return {economist says march 2007 superkaramba megadread: post yo' mahsql}}\n",
  "buttes_cat": "{} {lindex_random $::buttes_cat_dict}\n",
  "cock": "{} {ncock 1}\n",
  "pixtag": "args { lindex_random $::pixtag }\n",
  "lutefisk": "{} {return \"ja Recipe for je fish is:\\njew tak a oven proof dish and smear butter all over ja inside. Den jew tak about tre pound fish and lay ja fish skin down in ja dish and put je salt all over it about one table spoon.\\nen jew cover ja dish wit foiland put in ja oven set at 400 degree for about tirty or forty minutes oruntil fish is flaky.\\nDen you pour off ja liquid and serve wit boiled potas and lefse and melted smear. Is good.\"}\n",
  "dfeooj": "url {last [regexp -all -inline {<title>(.*?)</title>} [wget http://downforeveryoneorjustme.com/[urlencode ${url}]]]}\n",
  "cache_lappend": "{name key value} {cache put $name $key [linsert [cache_get_default $name $key {}] end $value]}\n",
  "rot:not": "c { if {$c} { return 0; } { return 1; }}\n",
  "reversenwo": "args {return \"9/11 WAS AN OUTSIDE JOB\\nWTC DID JEWS\\nTHERE'S A MIND ON FOR YOUR WAR\"}\n",
  "giga": "{cmd args} {smega [concat $cmd $args] 5}\n",
  "url_stripanchor": "url {regsub {#.*} $url {}}\n",
  "playsine2": "args {apply audioconcat [map $args {x {sine2 1000 1000 $x}}]}\n",
  "puntme8": "{} {sunglassify [each [lines [box [embed [embed [embed [canvas 75 15] [string map {___/(___ ___Ã±___} [STfullpuntme]] 1 2] [each [lines [wrap [p_a] 50]] {l {. [center $l 50]}}] 26 7] $::moira_let 30 1]]] {l {. \"\\003[next_in_list $::mexico_colours]$l\"}}]}\n",
  "rigamid": "{} {return [pyramid rig\\ ]}\n",
  "overlords": "{{who {}}} {if {$who eq \"\"} {set who [lindex_random [names]]}; return \"<$who> I for one welcome our new [overlord_word] overlords\"}\n",
  "pix_tag": "args {set tag [join $args \",\"]; set html [unescape_html_entities [cwget http://api.flickr.com/services/feeds/photos_public.gne?tags=$tag&lang=en-us&format=rss_200]]; flickr_med [html [strip_html [lindex_random_ne [regexp -all -inline {<img src=\"(.*?)\"} $html]]]]}\n",
  "aimsurvey": "{{who {}}} {return \".a\\im [aimname $who] This is an informal survey for a really cool post I'm going to do in GBS. Who do you think the funniest GBS poster is [famous_gbs_names], [famous_gbs_names], or [famous_gbs_names]?\"}\n",
  "eotw": "args {set week [clock format [clock seconds] -format \"%U\"]; if {[lsearch [array names ::eotws] $week] < 0} {set a 0;set b 0;set c 0;set d 0; while {!$a} {set a [expr int(12*rand())-6]};while {!$b} {set b [expr int(12*rand())-6]};while {!$c} {set c [expr int(12*rand())-6]};while {!$d} {set d [expr int(12*rand())-6]};set ::eotws($week) [list [expr $a*$c] [expr $a*$d+$b*$c] [expr $b*$d]];};set a \"[lindex $::eotws($week) 0]x^2\";set b [lindex $::eotws($week) 1];if {$b > 0} {set b \" + [expr $b]x\"} elseif {$b eq 0} {set b \"\"} else {set o \" - [expr abs($b)]x\"};set c [lindex $::eotws($week) 2];if {$c > 0} {set c \" + $c\" } elseif {$c eq 0} {set c \"\"} else {set c \" - [expr abs($c)]\"};return \"Congratulations y = $a$b$c\\nYou are the\\nequation of the week\";}\n",
  "setnoradio": "newnoradio {set ::noradio $newnoradio}\n",
  "deafie_phrase": "{} {join [repeat [rand 10] deafie_word]}\n",
  "rainacro": "{{what {}}} {smega {strcat \u0003[gay] [randacro [expr {($what==\"\")?[regsub -all {[^[:alpha:]]} [lindex_random $::randacro([lindex_random [seq a z]])] {}]:$what}]]}}\n",
  "unflag": "{} { . \"[mac_icon AlertCautionIcon]\" \"[bold][color orange]Offensive chat flag has been removed, please proceed with caution.\" }\n",
  "dralbot": "{} {. You have [string totitle [choose [al_man_word] [al_hat_word]]] [string totitle [sexpart]]}\n",
  "slack": "{} {return \"Slackware! [lindex_random $::slack]\"}\n",
  "rndtcl_set": "{} {return \"set [rndtcl_identifier] [rndtcl_expression 1]\"}\n",
  "STmoira": "{} bottle\n",
  "rand_talking_name": "{} {set res 0; while {$res == 0} {set who [name]; set res [string match -nocase [lindex_random [list_keys $::talking_patterns]] $who]}; . $who}\n",
  "gooncon": "{{who {}}} {if {$who eq \"\"} {set who [lindex_random [names]]}; return \"[rainbow $who\\ ur\\ fukken\\ ded\\ at\\ gooncon]\"}\n",
  "niga": "{cmd args} {niggerize [apply [list giga $cmd] $args]}\n",
  "delysid": "{} {goonsay \"Firefox is pretty shitty, I agree. I like the tabbed browsing but other than that IE > Firefox. Our website where I work looks like shit when viewed in Firefox and some of the javascript doesn't work properly. Plus when you use java applets in Firefox it takes up MUCH more memory than in IE.\"}\n",
  "ubuntu_verb": "{} {lindex_random $::ubuntu_verb}\n",
  "supershaktimid": "{} {return \"[shaktimid] \u0003\u0002\u001f[capitalize [shakti_word]] Hacks have been Applied\"}\n",
  "ultraheinz": "{} {smega [. http://cache.lifehacker.com/software/uploaded/2005-09-06/erica_sadun.jpg]}\n",
  "whotest": "{} {}\n",
  "jewday": "{} jewboy\n",
  "gorf": "args {return \"Â Â Â Â Â \u000305,,\\nÂ Â Â Â Â \u000301,08Â ..\\nÂ Â Â Â Â \u000308,08Â \u0003Â Â Â $args\\nÂ Â Â Â Â \u000307,08*\\nÂ Â Â Â Â \u000307,08*\\n\u000305,\u000307,08Â *Â *Â \\nÂ \u000305,08_\u0003Â Â Â \u000305,08_\u0003\"}\n",
  "aimf_hello2": "args {aimify hello2 $args}\n",
  "kalleboner": "{} karaboner\n",
  "blackjack_print_player": "p { return [ajoin \" \" $p [blackjack_print_hand [blackjack_get_player $p]]]; }\n",
  "thesaurus": "args {string map {[\" {} {\"]} \"\" {\",\"} \", \"} [500~http://www.ironicsans.com/tproxy.php?term=[urlencode [join $args]]]}\n",
  "hijre": "{} {smega {strcat \"<[name]> jre: [jre.jpg] !\"}}\n",
  "giggle": "{{size 0}} {regsub -all h+ [join [string map {a e} h[laugh $size]] {}] h}\n",
  "encyclopedia": "{} {return \"Encyclopedia Brown and the Case of the [string totitle [adjective]] [string totitle [oneoff]]\"}\n",
  "kilonum": "{} {. [cubegoonsay [air Kilonum Kilodumb]]}\n",
  "registerdomain": "{{who {}}} {if {$who eq \"\"} {set who [choose [political_figure] [celebrity] [name]]}; return \"Congratulations, $who! You've just registered [string toupper [promote][string map {\" \" \"\"} [crime]][tld]]! Happy internetting!\"}\n",
  "djia": "{} {bigquote .dji}\n",
  "xdick": "{} {overlay [embed [embed [canvas 1 8] [flip [ncock 4]] 1 1] [ncock 4] 1 1]  [embed [embed [canvas 1 10] [ncock 4] 1 1] [flip [ncock 4]] 1 1]}\n",
  "goon_shakti": "{} {?? $::goon_shakti}\n",
  "megaminutes": "{{who {}}} {smega {minutes [name $who]}}\n",
  "swingler_tweet": "{{who {}} {rate 50}} {. \"<[name $who]> i'd pay \\$$rate/month for swingler never to mention [swingler_word] on twitter again\"}\n",
  "butteshack": "{} {set syms [butteshack:getsyms]; ajoin \"   \" [butteshack:map $syms] \"ButtesHack uses the following symbols:\\n\\n[butteshack:symbols $syms]\"}\n",
  "microsoft_product": "{{length 10}} {join [map [seq 1 $length] {microsoft_product_word}] \" \"}\n",
  "urban": "args {eval \"urbandictionary $args\"}\n",
  "kosherpostcard": "args {set url [join $args]; if ![regexp {^https?:} $url] {set url [gis [or $url \"tropical paradise\"]]}; magick polaroid [magick annotate [image-kosherize [image-bbw $url]] 30 10 5 Red {Wish You Were Here!}]}\n",
  "darrens": "{} {set ret {}; foreach name [names] { if [regexp {\\.(co|net)\\.nz$} [hostmask [name $name]]] { lappend ret $name; }; }; return [concat \"\" [llength $ret] \" darrens detected: \" $ret];}\n",
  "jacksonbrown": "{} {. <JacksonBrown> IM TAKIN YOU ALL DOWN WITH ME SNITCH HIGH EVERY DAY}\n",
  "viscosity": "{} {lindex_random $::viscosity}\n",
  "stereo_type": "{} {choose Marantz Kenwood Pioneer Yamaha Bose}\n",
  "winnipeg": "{} {. WINNPEG IS A [string toupper {[faglame] [ethnic_group]}]}\n",
  "race_whine": "{} {. Every time I've been attacked in the street, it's been by [ethnic_group]! Explain that!}\n",
  "florpspyfflantium": "{} {pick 1 chop 1 abuse}\n",
  "+2": "args {expr [join  $args  \" + \"]}\n",
  "bitset": "{var pos {val {}}} {upvar 1 $var word; if ![info ex word] {set word 0}; if {$val != \"\"} {set word [expr {$val? $word | 1 << $pos : $word & ~(1 << $pos)}]}; expr {($word & 1 << $pos) != 0}}\n",
  "wale": "{} { return [wale0]; }\n",
  "unixdev": "{} {return \"/dev/[join [random_word] /][rand 9]\"}\n",
  "stripcolon": "a { lindex [split $a \":\"] 0 }\n",
  "megahateporn": "{{who {}}} {return [hateporn $who]\\n[hateporn $who]\\n[hateporn $who]\\n[hateporn $who]\\n[hateporn $who]}\n",
  "renzo": "{{who {}}} {goonsay \"CHAT HARD CHAT HARD HEY [upper [name $who]] CAN YOU PAY ATTENTION TO ME PLEASE PLEASE???? CHAT HARD CHAT HARD\"}\n",
  "rot:transpose": "strl {\n    rot:serializemat [rot:transposematrix $strl]\n}\n",
  "randomphonenumber": "{} {return +1[rand 9][rand 8][rand 9][rand 9][rand 9][rand 9][rand 9][rand 9][rand 9][rand 9]}\n",
  "3vegan": "{} {join [repeat 3 rawvegan]}\n",
  "caresay": "{} {?? [subst \"\\$::[?? [choose $::care_dicts]]\"]}\n",
  "vxpify": "{args {n 20}} {join [map [repeat $n {uplevel {. $args}}] {w {. \"\\003[next_in_list $::vxp_colours]$w\"}}] \"\"}\n",
  "kingturd": "{} {return \"kingturd is great and everyone else sucks\"}\n",
  "aimf_zuluname": "args {return \"[aimify zuluname $args]?\"}\n",
  "cdown_to": "event {set e [expr $::cdown_events($event) - [clock seconds]]; if {$e < 0} { set e (-$e); set txt \"past\" } else { set txt \"until\" }; set d [($e / 86400)]; set e [($e - $d * 86400)]; set h [($e / 3600)]; set e [($e - $h * 3600)]; set m [($e / 60)]; set e [($e - $m * 60)]; return \"$d days, $h hours, $m minutes, and $e seconds $txt $event\"}\n",
  "japgrill": "{} { set j [choose japanese japan nip nipponese]; set b [choose  bbq barbeque grill]; . $j ($b): [gis $j $b] }\n",
  "drudgestory": "{} {  string toupper [subst [lindex_random $::drudge_headlines]] }\n",
  "card_club": "a { return \"$a\\n   _\\n _( )_\\n(_._._)\\n  / \\\\\\n       $a\";}\n",
  "annoywill": "{} {. HEY, WILL}\n",
  "aimgentoo": "{{n {}}} {set n [aimname $n];aim -n $n $n use my own os?  i do USE my own os, you dont, you use one someone else made for you, your entire OS is binary, fucking idiot, and i getting a sound card that isnt supported by linux whatsoever to work for half the time is alot more usefulness outta my os than you could ever amount to}\n",
  "lastfm:singleuserquery": "lastfmuser {drawtable [subst [wget http://manimal.prettybrd.com/~leedo/scripts/lastbutte.pl?u=$lastfmuser,[lastfm:namemap $lastfmuser]]] {default red green orange}}\n",
  "tfrsay": "args {ajoin \"\" [STrevolver] \"\\n=====\" \"\\n[box [wrap [join $args] 20]]\"}\n",
  "runes": "{{who {}}} {set who [name $who]; string toupper \"fuck $who; $who suk; $who are dying; $who are dead to me; $who hit wtc; $who -> ovens\"}\n",
  "yankee": "{} { return \"[yanks]\\n[COLOR 04 00] [string repeat \" \" 25] go home[string repeat \" \" 25] \\n[yanks]\" }\n",
  "british_statement": "{{who {}}} {return \"<[name $who]> [lindex_random $::british_statements]\"}\n",
  "c5": "{str1 str2 str3} {bgc2 [rrand_color] [rrand_color] [rrand_color] $str1 $str2 $str3}\n",
  "slotmachine": "{{n 3}} {eval \"ajoin {  } [string repeat {[rSTAMP] } $n]\"}\n",
  "STgeordrzej": "{} {. \"  ______\\n |\\[=====]\\n/     >  \\\\\\n\\\\_____O__/\"}\n",
  "youbet": "{{pwc {}}} {return \"You bet your [choose [viscosity] [adjective]] [smallword] [colour] [sexpart], [name $pwc]!\"}\n",
  "biggestgoon": "{{n {}} {huh {}}} {if {$n < 0} {set n 0};if {$huh > 65} {set huh 65};if {$huh == \"\"} {set huh 40}; if {$n > 17} {set n 17}; if {$n == 0} {return [fathead $huh]}; set lines [lines [fathead $huh]]; set chin [lindex $lines 2]; lremove lines 2; lappend lines [regsub -all _ $chin \" \"]; while {[incr n -1]} {lappend lines [regsub -all {[_O]} $chin \" \"]}; lappend lines [regsub -all O $chin _]; join $lines \\n }\n",
  "hellyeah": "{} {. [img-hi5] [yeah]}\n",
  "rss_get": "{rssfeed {interval 3600}} { http://feeds.churchturing.org/dynamic/dynamic.php?z&interval=$interval&url=[urlencode $rssfeed] }\n",
  "nours": "{} {return \"no you[pick 1 {concat r} 1 {concat 're} 1 {concat re} 1 {concat r'e}][subst [string repeat {[pick 1 {concat s} 1 {concat 's} 1 {concat '}]} [expr [rand 5]+1]]]\"}\n",
  "audiolaugh": "{{size 0}} {if {$size == 0} {set size [rand 5 10]}; apply audioconcat [repeat $size {?? {http://prettybrd.com/au/e5ad919c904985757a9924b7ba00d2c4.mp3 http://prettybrd.com/au/169ce4e48833a3a3d986a3a8b478b55f.mp3}}]}\n",
  "kanyack": "{{target {}} {whodat BEYONCE} args} {if {[llength $args] > 0} {set sperm $args} else {set sperm \"Music Video\"}; return \"[color white  on black]Now hold on a minute $target\\n[color white on black]I'mma let you finish\\n[color red on black]BUT [string toupper $whodat] HAD THE BEST [string toupper $sperm] OF ALL TIME!\"}\n",
  "magick-scale-composite-center": "{urlbottom urloverlay {scale 0.75}} { scale-and-composite-center_scheme $urlbottom $urloverlay $scale }\n",
  "eye": "txt {embed [aflip [cosharc [subst $txt] 15]] [circle2 [subst $txt]] 43 6}\n",
  "googleporn": "{{who {}}} {if {$who eq \"\"} {set who [lindex_random [names]]}; set str [regsub -all \" \" [strip_u [fetish_porn]] \"+\"];  return \"$who: http://images.google.com/images?q=$str&imgsz=xxlarge\";}\n",
  "rss_parse_feed": "xml {set items [list]; foreach {item body} [regexp -all -inline {<item>(.*?)</item>} $xml] {set content [rss_parse_item $body]; lappend items [lindex $content 0] [lindex $content 1]}; return $items}\n",
  "manning": "faggot {return \"[regsub -all {(\\w)(\\w+)} $faggot {man\\1\\2}]\"}\n",
  "cliche_bingo_matrix": "{{n 5} {names {}}} { set names [choose_random_uniq $n [or $names [names]]]; return [concat [list $names ] [map [seq 1 $n] {{x} {map $names [& cliche]}}]] }\n",
  "strid_word": "{} {lindex_random $::strid_word}\n",
  "aimstinker": "args {aim -n [aimname $args] \"Wanna tinker with my stinker?\"}\n",
  "mroach_keys": "{} {. \"Is mroach getting the keys to his [?? $::mroach_obsession] soon?\"}\n",
  "STzenoctal": "{} {join {{   _______    } {  (  _  _ )   } {  (____.__)   } {/   __   __ \\ } {\\_____O=O___/ } {/     \\/_   \\ } {\\_____/__\\__/ }} \\n }\n",
  "execfake": "cmd { exec(\"$cmd\"); }\n",
  "fight": "{{n1 {}} {n2 {}}} {set n1 [name $n1]; set n2 [name $n2]; set count($n1) 0; set count($n2) 0; each [repeat 20 {expr {int(rand()*2) ? [uplevel {. $n1}] : [uplevel {. $n2}]}}] {n {uplevel incr count($n)}}; return \"\\003[rand 15]$n1\\003\\x1f:\\x1f \\002$count($n1)\\002  \\x1f-\\x1f  \\003[rand 15]$n2\\003\\x1f:\\x1f \\002$count($n2)\\002\";}\n",
  "ngis": "{index args} {force_image [lindex [gis_results [join $args]] $index]}\n",
  "stretch": "args {set spaces { }; set out {}; foreach i [split [join $args] {}] {set out \"$out$i$spaces\"; set spaces \"$spaces \";}; . $out;}\n",
  "cityfathers": "{} {}\n",
  "qed": "{} {return \"Oh you're right @_@\"}\n",
  "pooify": "s {gay_pl_color_ify poo_colours \"$s\"}\n",
  "twitteratio:counts": "username {let {matches {list [lindex $matches 1] [lindex $matches 3]}} [string map {, {}} [regexp -all -inline {<span id=\"follow(?:er|ing)_count\"[^>]*>([^<]+)</span>} [http://twitter.com/$username]]]}\n",
  "cord": "{} {return \"The cord brought new [shakti_word] to the system.  [shakti_word], [shakti_word], and [shakti_word] all improved greatly.  My friend has a PhD in [shakti_word] studies and agreed that the [shakti_word] was noticeably amazing.  We went to Burger King and ordered whoppers with extra [shakti_word] and [shakti_word] and a side of [shakti_word].\" }\n",
  "vomit": "args {foreach char [split [join $args] {}] {if {$char eq \" \" || $char eq \"\\n\"} {append ret $char} {append ret \u0003[rrand_color]$char}}; return $ret}\n",
  "rainbanner": "str {return \"[rainbow [banner $str]]\"}\n",
  "moira_crew": "{} {embed [ajoin \"\" \\n\\n\\n[bottle]\\n [let {head {pick 1 {. $head} 1 {flip $head}}} [ajoin \"\" [STmoirahead] \" \"]] \\n\\n\\n[flip [bottle]]] \"[b]Moira Crew 2k8[b]\\nDrinking  Hard\\nNapping Strong\" 8 9}\n",
  "slaveauction": "{{a SLAVE} {b AUCTION}} {giga {string map {\"GAY\" \"$a\" \"BAR\" \"$b\"} [gaybar]}}\n",
  "STshoe2": "{} { join {    { ,___       } {  )  `\\     } { (   _ '-._ } {  )_( \\____)} } \\n }\n",
  "dickroulette": "{} {apply {ajoin \" \"} [map [getnuniq 5 name] {name {dickroulettechoose $name}}]}\n",
  "macrumors:last_post_id": "{} {lindex [regexp -inline {<postid>(\\d+)</postid>} [http://spy.macrumors.com/spy.xml]] 1}\n",
  "STkkk": "{} {return \"         |\\n     /(--+--\\n  /\\\\('')_|\\\\\\n  \\\\__ + _|/\\n    /   \\\\\\n   /_____\\\\\\n\"}\n",
  "footlongs": "{} { upper [next_in_list [list \"5\" \"5 dollar\" \"5 dollar footlongs\" \"(at subway)\"]]}\n",
  "woa": "{} {return [lol]}\n",
  "mastermind": "{a b c d} { return [master [nick] $a $b $c $d]; }\n",
  "loldong": "{} { return [cwget \"file:///etc/hosts\"] }\n",
  "warhol_colorize": "stamp { color_box [next_in_list $::warhol_colors] [ST$stamp] }\n",
  "kanyelyrics": "{} {lindex_random $::kanyelyrics}\n",
  "butteshack:wand": "{} {subst [lindex_random $::butteshackwands]}\n",
  "nwo_sign": "{} {. [nwo_top][nwo_bottom]}\n",
  "yiff_csam": "args {. [csammize [engimize [dikkyize $args]]]}\n",
  "STnerd": "{} {return \"      __    __\\n     /..\\\\ /| |'-.\\n    .\\\\_O/ || |   |\\n _ /  `._ \\\\|_|_.-'\\n| /  \\\\__.`=._) (_\\n|/ ._/  |\\\"\\\"\\\"\\\"\\\"\\\"\\\"\\\"\\\"|\\n|'.  `\\\\ |         |\\n;\\\"\\\"\\\"/ / |         |\\n ) /_/| |.-------.|\\n'  `-`' \\\"         \\\"\"}\n",
  "STkiwi": "{} { return \"  __ _  \\n /  ('>-\\n \\\\__/   \\n  L\\\\_  \\n\\n\"; }\n",
  "ALPHABET": "{} {seq a z}\n",
  "wow_talent": "{} {lindex_random $::wow_talents}\n",
  "gudrow_sent_small": "{} {set ret \"\"; for {set i 0} {$i < [rand 15]+3} {incr i} {append ret \"[gudrow_word][expr {[rand 2] ? \"\" : \",\"}] \"}; set ret [string trimr $ret {, }]; return [string toupper [string index $ret 0]][string range $ret 1 end][expr {[rand 3] ? \".\" : \"!\"}]}\n",
  "sidemid": "args {set i [join $args]; return \"$i\\n$i$i\\n$i$i$i\\n$i$i$i$i\\n$i$i$i$i$i\"}\n",
  "hate_crime": "{} {return \"lynching\"}\n",
  "buttbutt": "{} {return \"blah\"}\n",
  "artwork": "{} {caption [gis [random_word]] [random_word]}\n",
  "saq_expert_topic": "{} {?? $::saq_expert_topics}\n",
  "macify2": "{image {xoff 0} {yoff 0}} {magick_scheme [macify-gen $image $xoff $yoff]}\n",
  "liberal_media": "{} { return [choose [?? $::liberal_newspaper] [?? $::liberal_tv] [?? $::liberal_website]]}\n",
  "d8": "{} D8\n",
  "toilets": "{{oi {}}} {if {$oi eq \"\"} {set oi \"gudrow\"}; return \"someone let $oi near the toilet\"}\n",
  "radeon29": "{} {return \"B) I had a TV drop on my head last night (i work at best buy)\"}\n",
  "stf": "{} {return [giga bt SHUT TEH FACE]}\n",
  "randsub": "{s b {p 12}} {join [mapx [split $s] w {if {$p > [rand 100]} {set b} {set w}}] \" \"}\n",
  "bg": "args {set str [join $args]; bgb [rrand_color] [rrand_color] $str}\n",
  "ronpaul": "{} {return \"[bold][eval color [next_in_list {{white on blue} {blue} {red}}]]RON PAUL\"}\n",
  "goonstamp": "{} {return \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ,-----,\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\\\\\ \\ \\ \\ \\ /\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\\\\\ \\ \\ /\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ )\\ (\\n\\ _________\\ /\\ \\ \\ \\\\________\\n|\\\\\\ \\ \\ \\ \\ \\ \\ \\ |_____|\\ \\ \\ \\ \\ \\ \\ \\\\\\n\\\\\\ \\\\______________________\\\\\\n\\ \\\\|______________________|\\n\\ \\n\\ \\ G\\ O\\ O\\ N\\ \\ A\\ P\\ P\\ R\\ O\\ V\\ E\\ D}\n",
  "fjord": "{} {string map {CHATBUS! FJORD!\\ \\ } [chatbus]}\n",
  "thinktank": "{} {lindex_random $::thinktanks}\n",
  "laser": "{} {return \"   ___________\\n~Y/ =====-__|~  -  - = [rainbow 8=======D]\\n  / |L)~~~\\n  |_|             ACTION LASER\"}\n",
  "macify-gen": "{image {xoff 0} {yoff 0}} {. (composite (image [mac_icon com.apple.mac]) (resize [crop_to_fit-gen $image $xoff $yoff 460 287] 460 287) 26 81)}\n",
  "Whatbot": "{} {subst \"^_____^ http://www.wakachan.org/os/src/[regsub -all \"{|}\" [subst [regsub -all {\\s+} [split [string repeat \\  7] {}] {[rand_digit]}]] \"\"].[lindex_random {\"gif\" \"png\" \"jpg\"}]\"}\n",
  "morewine?": "{} {wineback [upper [?? $::affirmative_statements]] }\n",
  "china": "{} {return [chinasay [concat \"we rikey \" [chinkerize [random_word]]]]}\n",
  "blackjack_if_init": "{} { if [blackjack_initialized] { return 1; } else { return [blackjack_init]; }; }\n",
  "warhol_bat": "{} {warhol_bt ^^}\n",
  "butteshack:map": "syms {nethack $syms}\n",
  "dis": "{{who {}}} {if {$who eq \"\"} {set who [lindex_random [names]]}; return \"sry im gettin in dis conversation but u know wat $who, u a nice big bitch and don u be dissin me u dum sht clown ill be waitin for u to reply cuz dis is rly fun, no rly i anit jokin i get bored when im on the net some times thx man\"}\n",
  "hellobusiness": "{} {return \"<hello> okay, how about this guys, an internet [randor mail male] order business selling [strip_u [fetish_porn]]\\n<hello> 2) ???\\n<hello> 3) Profit!\"}\n",
  "chiggerize": "args {chinkerize [niggerize [join $args]]}\n",
  "vorgasm": "{{colorize {}}} {return \"[color [name $colorize] on white]] test\"}\n",
  "swapnicks": "{from to} {join [list [svsnick $from FAG$from] [svsnick $to $from] [svsnick FAG$from $to]] \\n}\n",
  "gapp": "{{who {}}} {apply [choose panties bra restaurant seamonster kink smokedetector] [list [name $who]]}\n",
  "coolimage": "{{who {}}} {if {$who eq \"\"} {set who [lindex_random [names]]}; return \"$who: [gis [choose [strip_u [fetish_porn]] \"[shakti_word] porn\" \"[singleethnic] porn\" \"[political_figure] nude\"]]\";}\n",
  "justwords": "{} {return \"[crw_word]...just words?\"}\n",
  "weathercondition": "{} { subst [lindex_random $::weatherconditions] }\n",
  "sodomize": "nick {act \"sodomizes $nick\"}\n",
  "care-o-meter": "{{care 5}} {. CARE-O-METER: [progress $care]}\n",
  "mirror_rand": "url {pick 1 mirror_left\\ $url 1 mirror_right\\ $url 1 mirror_top\\ $url 1 mirror_bottom\\ $url}\n",
  "leisuretown": "{} {?? [evens [lines [300~http://interglacial.com/~sburke/pub/prose/Tristan_Farnon_Overdrive/leisuretown.fortune.txt]]]}\n",
  "new_rss": "rssfeed { join [map [new_rss_data $rssfeed] {{x} {. [first $x] - [second $x]}}] \\n }\n",
  "uptime": "{} {set u [meta uptime]; if {$u == 420} { return \"FO TWENNY\" }; return $u }\n",
  "uvflip": "arg {regsub -all ~ [vflip $arg] [uchar 203e]}\n",
  "trollerize": "{} {. [lol [dberize]]}\n",
  "craigkirk": "{} {. Abstracting inferences between the revered and profane blurs the lines of taboo and acceptance. Utilizing a mixed media format to express ideas with a layered texture, Craig Kirk fuses historical contours though modern references to accent the dichotomy between sensation and faith.}\n",
  "drawrow": "{row widths {colors {}} {seperator {}} {align {}}} {join_subst [map [seq 0 [expr  [llength $row] - 1]] {colnum {drawcell [lindex $row $colnum] [lindex $widths $colnum] [lindex  $colors $colnum] [lindex $align $colnum]}}] \"[^O]$seperator[^O]\"}\n",
  "go:changeboard": "{gboard board} { go:newboard [go:width $gboard] [go:height $gboard] $board }\n",
  "wendys": "{} {ajoin \"\" [fu] [delicious_beverage] [flip [fu]]}\n",
  "SThorse": "{} { pick 1 SThorse1 1 SThorse2 1 SThorse3 1 SThorse4 }\n",
  "moneyjoke": "{} {set nigger [singleethnic]; set nigger2 [faglame]; set money [rand 40]; set cash [plural [currency]]; return \"So this $nigger walks into a grocery store and asks this $nigger2 working there \\\"how much for [topping] and some [plural [food_word]]?\\\" The $nigger2 says \\\"only $money $cash\\\".  So the $nigger says \\\"$money $cash?  What is this, a grocery store or [corporation]?!\\\"\"}\n",
  "dead_countru": "{} {?? $::former_countries}\n",
  "reverse": "str {join [lreverse [split $str \"\"]] \"\"}\n",
  "go:bottomleft": "{} { uchar 2517 }\n",
  "noevil": "{} {return \"  __    __    __ \\n /  \\\\  /..\\\\   ..  \\n \\\\_O/  \\\\__/  \\\\_O/ \\n see  speak  hear no evil\"}\n",
  "celebrity": "{} {lindex_random $::celebrities}\n",
  "rkelly": "{} {ajoin \" \" [crop [peeinto \" \"] 0 0 15  5] [catbus_girlfriend]}\n",
  "STtard": "{} {. [ST_tard1] [ST_tard2] [ST_tard3]}\n",
  "go:board": "{{n 9}} { return [list go:board $n $n [mapx [seq 1 $n] y {mapx [seq 1 $n] x {. \"empty\"}}]]}\n",
  "nsfw": "{{fag {}}} {. \"[name $fag]: Just because you're at home, or your workplace is cool with improper content, doesn't mean that your friends are in the same situation. If you're forwarding a dirty e-mail (or sending a song, image, or video containing improper language, nudity, or porn), just write \\\"NSFW,\\\" or \\\"Not Safe For Work\\\" in the subject line. Neglecting to warn someone can have extremely bad ramifications, so use your head.\"}\n",
  "format_log_line": "line {. <[lindex $line 1]> [lindex $line 3]}\n",
  "magick_debug": "{cmd id args} {. http://willstclair.com/magick/magick.rb?[?2 cmd $cmd id $id args [join [string map {\",\" \"%2C\"} $args] ,]]}\n",
  "dhoss": "{} { return \"don't I sound so sexy, echo echo echo\"}\n",
  "heydupe": "nick {heynot [$nick-twat]}\n",
  "radeon15": "{} {return \"<radeon> im thinking about buying a fleshlight\\n<radeon> i dont think i can justify spending 60 dollars on a sex toy though\"}\n",
  "blackjack_loses": "p { blackjack_set_score $p [expr [blackjack_get_score $p] - [blackjack_losing $p]]; return \"$p loses \\$ [blackjack_losing $p] ! \"; }\n",
  "STbird": "{} { return \" (\\\\  _   /)  \\n ( \\\\('<./ )  \\n  (_(..)_)   \\n    /\\\\/\\\\     \\n   /))((\\\\    \";}\n",
  "onebutan2": "{} {. Are you GAY? Are you a MAC USER? Are you a GAY MAC USER?}\n",
  "docker": "{} {return [frot_figures2]}",
  "youtube_comments": "videoid {map [regexp -all -inline {<content[^>]+>([^<]*)</content>} [http://gdata.youtube.com/feeds/api/videos/$videoid/comments?safeSearch=none]] {{x y} {. $y}}}\n",
  "rainstuff": "{} {act [rainbow [string range [join [lrange [split [stuff]] 1 end]] 0 end-1]]}\n",
  "STpuntme": "{} {. \"         ._-'-_ .\\n    . '  /_-_-_\\\\   ` .\\n .'     |-_-_-_-|      `.\\n(       `.-_-_-.'        )\\n!`.                    .'!\\n  ! ` .            . ' !\\n    ! ! ! ! ! ! ! !  !\\n      / /       \\\\ \\\\\\n    _-| \\\\___ ___/ /-_\\n   (_ )__\\\\_)\\\\(_/__( _)\\n       ))))\\\\X\\\\ ((((\\n         \\\\/ \\\\/\"}\n",
  "+longroundtrip": "{{text {}} {dest1 ja} {dest2 zh} {source en}} {set bin [or $text [channel]]; xset timestamp totrans [cache fetch +longroundtrip $bin {list [clock seconds] $text}]; if {$timestamp < ([clock seconds] - 300)} {set totrans $text}; set result [longroundtrip $totrans $dest1 $dest2 $source]; cache put +longroundtrip $text [list [clock seconds] $result]; cache put +longroundtrip [channel] [list [clock seconds] $result]; return $result}\n",
  "penni": "{} { return \"<@penni> anyway unlike you i actually have a life and things to do\" }\n",
  "hellocool": "args {. <@hello> sometimes [or [join $args] [word ism$]] is kinda cool}\n",
  "aimtinfoil": "{{who {}} {count 6}} {aim -n [aimname $who] \"Write this down and keep it in a safe place (away from windows and telephones): \\\"[spook $count]\\\"\"}\n",
  "cache_list": "{list value} {if {-1 == [lsearch -exact [set ::$list] $value]} {lappend ::$list $value}; return $value}\n",
  "rainbubble": "args {rainbow [bubble $args]}\n",
  "puntme11": "{{who puntme}} {. \"<[name $who]> watch out he'll make a proc out of it\"}\n",
  "stampsay": "{args} {\nset i -1;\nset f 0;\nset s [string range [?? [info procs ST*]] 2 end];\nset o [?? {l r}];\nforeach a $args {\n  incr i;\n  if {$s eq \"_\"} {\n    set s $a;\n    continue\n  };\n  if {$a eq \"--\"} {\n    incr i;\n    break\n  };\n  switch -glob -- $a {-f* {set f 1} -l* {set o l} -r* {set o r} -s* {set s _} default break}\n}\nset u [wrap [join [lrange $args $i end]] 45];\nset t [ST$s];\nif $f {set t [flip $t]};if {$o eq \"r\"} {ajoin \" \" $u \"\\n\\\\ \" $t} {ajoin \" \" $t \"\\n/ \" $u}}",
  "liberalagenda:event": "{} { subst [lindex_random $::liberalagenda] }\n",
  "zewb": "{} {chatquote zewb}\n",
  "buttespoem": "{{who {}}} {?? $::buttes_poems_dict}\n",
  "crash2": "{} {string repeat x 47328578525}\n",
  "winamp": "{{who {}}} {set who [name $who]; set len_min [expr {[rand 16]+1}]; set len_sec [rand 60]; set pos_min [rand $len_min]; set pos_sec [rand 60]; set pos ${pos_min}:[format %02s $pos_sec]; set len ${len_min}:[format %02s $len_sec]; return \"\\[winamp\\] \u0002Now Playing\u0002: [capitalize $who] - [fr][capitalize [strip_u [fetish_porn]][maybe_in_the_usa]] ($pos/$len, [lindex_random {96 128 160 192 256 384}]k)\"}\n",
  "onehug": "{} { lindex [split [grouphug] \".\"] 0}\n",
  "hth": "{} {bt hope this helps}\n",
  "jnz_is_a_faggot": "{} { pink [niggerize [fart]]}\n",
  "bar": "{} callers\n",
  "tabloid": "{} {return \"[string toupper \"[celebrity] caught with [political_figure] in [strip_u [fetish_porn]] fetish club\"]\"}\n",
  "gradient_line": "{n a b {width 30}} {set p [gradient_probabilities $n]; set Pa [lindex $p 0]; set Pb [lindex $p 1]; join [mapx [seq 1 $width] i {set c [pick $Pa \"concat $a\" $Pb \"concat $b\"]; strcat \u0003$c,$c \"  \"}] {}}\n",
  "nicklist": "{{who {}}} { set out [name $who]; if {[rand 3] == 2} { catch { set out [name $who]; lappend ::nicklist $out} }; return $out }\n",
  "puntme9": "{{who puntme}} {. \"[name $who]: Yeah oh my god I am so sorry I am not an ignorant fucking mexican who joined the airforce damn\"}\n",
  "oregontrail": "{{name {}}} {oregon_trail_ [name $name]}\n",
  "lol_honeypot": "{} honeypot\n",
  "buttesweather": "{} {return \"[string totitle [buttesroom]], Buttesnet (BUTT) [rand 99]-[rand 99]N [rand 99]-[rand 99]W 0M\\n[string totitle [weather1]] [weatherword]: [string totitle [weathercondition]] [maybe_measure]\\n[string totitle [weather1]] [weatherword]: [string totitle [weathercondition]] [maybe_measure]\\n[string totitle [weather1]] [weatherword]: [string totitle [weathercondition]] [maybe_measure]\"}\n",
  "randmeasure4": "{} {return \"http://[singlerandomword].on.nimp.org/download/[virusfile]/?u=[singlerandomword]\"}\n",
  "jase2": "{} {stampsay -s tranny [lindex_random $::jase_dict]}\n",
  "goonnomg": "{} { return \"[rainbow [nomg 12] \\n [name]! Your [body_part] is [gudrow_word] [goon_word]]\" }\n",
  "magick-concat-gen": "{img1 img2} {return \"\n(let ((i1 (image $img1))\n      (i2 (image $img2))\n      (w1 (width i1))\n      (w2 (width i2))\n      (w (+ w1 (width i2)))\n      (h1 (height i1))\n      (h2 (height i2))\n      (h (if (> h1 h2) h1 h2))\n      (h1o (if (> h  h1) (/ (- h h1) 2) 0))\n      (h2o (if (> h  h2) (/ (- h h2) 2) 0))\n      (canvas (resize (image [magick_id http://churchturing.org/x/100x100white.png]) w h)))\n     (composite (composite canvas i1 0 h1o) i2 w1 h2o))\"}\n",
  "roulette\u0002\u0002": "{} {\n\tif ![cache exists roulette current] {roulette_reload}\n\tcache put roulette current [cache get roulette hot]\n\t. [roulette_win]\n}\n",
  "pork": "{} {. shut the fuck up moira you stupid fucking cunt}\n",
  "snake_": "{} snake\n",
  "STsanjay": "{} {return \"   ______  \\n  (_\\\\____) \\n (___\\\\_\\\\__)\\n (  .   . )\\n (____o___)\";}\n",
  "mba": "{} {. \"[lindex_random $::mba_phrases]\"}\n",
  "sandpenguin": "{} {penguin [/^islam(_\\\\d)?$/]}\n",
  "&ify": "args {regsub -all {...} [join $args] {&}}\n",
  "fancyseinair": "{} {return \"[seinfeld_word]? Perhaps it would be more appropriate to say [strip_u [fetish_porn]], am I correct in this assertion?\"}\n",
  "arabs?": "{} {set darrabs 0; set darrabens \"\"; foreach darren [string tolower [names]] { if [regexp {^a-?rab@|root@127\\.0\\.0\\.1$}  [hostmask $darren]] { append darrabens \"$darren \"; incr darrabs; }; }; return [c \"$darrabs ARABS:\" [join $darrabens \",\"]];}\n",
  "crwthread": "{} {set result \"I will answer all your questions about \u0002\u00034[crw_word]\u000f.  ( \";set num_pages [expr [rand 6]+3];if $num_pages>7 {append result \"1 2 3 4 5 6 7 ... Last Page \"} {for {set x 1} {$x<=$num_pages} {incr x} {append result \"$x \"}};append result \")\";return $result;}\n",
  "abgbt": "args {apply {ajoin \" \"} [map [split [join $args] {}] {char {apply [next_in_list {bgbt {fw bgbt}}] $char}}]}\n",
  "col_char": "{} { return \u0003 }\n",
  "punt-me": "{} puntme\n",
  "unichar_dec": "num {if {$num > 0xffff} { return \\uFFFD } else { return [subst \\\\u[format %x $num]]}}\n",
  "randart:istrans": "char { if {$char==[randart:trans]} { return 1;} { return 0;}}\n",
  "ultragamer": "{} dreamhost\n",
  "STgorf": "{} {. Â Â Â Â Â \u000305,,\u000f\\nÂ Â Â Â Â \u000301,08Â ..\u000f\\nÂ Â Â Â Â \u000308,08Â \u0003Â Â \u000f\\nÂ Â Â Â Â \u000307,08*\u000f\\nÂ Â Â Â Â \u000307,08*\u000f\\n\u000305,\u000307,08Â *Â *Â \u000f\\nÂ \u000305,08_\u0003Â Â Â \u000305,08_\u0003Â }\n",
  "pb": "proc {paste inspect $proc}\n",
  "kukluxrandeon": "{} {kukluxradeon [ethnic_cleansing_verb] [ethnic_group]}\n",
  "blax2": "{} {return \"[bold]BLAX STATUS = [choose \"[color red]ALIVE\" \"[color green]DEAD\"]\"}\n",
  "blackout": "{} { return \"look. this is hard chats. we care about irc and take things SERIOUSLY here. if you dont, THE DOOR IS RIGHT HERE\" }\n",
  "aspergers": "{} { return \"the following people have aspergers: [array names ::factor_stats]\"}\n",
  "replace_chars": "{arr str} { join [map1 [split $str \"\"]  {replace_exact  $arr}] \"\" }\n",
  "rot:splitperchar": "v {\n\tset C $::rotC; set B $::rotB; set V $::rotV;\n\tset re  \"($C\\\\d{1,2},\\\\d{1,2}|$C\\\\d{1,2}|$B|$V|$C|\\[^$C$B$V\\])\"\n\tset matches [list]\n\tforeach {full submatch} [regexp -all -nocase -inline $re $v] {\n\t    lappend matches $submatch\n\t}\n\treturn $matches;\n}\n",
  "safari": "{} {. [img-beachball]}\n",
  "vs_battle": "arg { ajoin \"\" \"[amirror $arg]\" \"\\n\\n  VS.  \" $arg; }\n",
  "goonoi": "{{n 5}} {let {n {join [ map [zip [map [seq $n 1] {{x} {string repeat \" \" $x}}] [concat [list __________ {(--[ .]-[ .]} {(        O   )}] [map [seq 1 [- $n 3]] {{x} {return \"([string repeat \"_\" [+ 12 [* 2 $x]]])\"}}]]] {{x y} {return $x$y}} ] \\n}} [constrain 4 20 $n] }\n",
  "lhc": "{} {. [bonerbattle \"Welcome to CERN\"] \\n [cdown we\\ all\\ die]}\n",
  "jewboy": "{} {return \"get up early, [jewboy_activity], [jewboy_activity], [jewboy_activity], [jewboy_activity], [jewboy_activity], [jewboy_activity], [jewboy_activity], [jewboy_activity], [jewboy_activity], [jewboy_activity], [jewboy_activity], [jewboy_activity], [jewboy_activity], [jewboy_activity], [jewboy_activity]... Who says they don't work hard?\"}\n",
  "political_figure": "{} {lindex_random $::political_figures}\n",
  "allbl0re": "{} {set ret [list]; foreach p [lsort [info procs zybl0re*]] {lappend ret [join [split [regsub -all {<@?[^>]+> } [strip_all [eval $p]] {}] \\n]]}; join $ret}\n",
  "horse": "{} {return \"!horse\"}\n",
  "cdma": "{} { subst [lindex_random $::cdma] }\n",
  "frot_figures": "{} {ajoin \" \" [embed [ajoin \" \" [STdance] [oldflip [STdance]]] \"_ _\" 4 2] \"- let's frot!\"}\n",
  "wt2": "args {set str [strip_all [join $args]]; if {[string length $str] > 1400} {error \"too long, spic\"}; set prefixes [list \\n {} \\n \\n\\n]; set args [list]; set i 0; foreach c [split $str {}] {if {$c eq \" \"} {lappend args \"    \"} {lappend args [lindex $prefixes [expr {$i % 4}]][bgbt $c]; incr i}}; eval [concat [list ajoin \" \"] $args]}\n",
  "engimo_name": "{} {set left [string trimright [word e(?:n(?:g)?)?$] eng]; set right [string trimleft [word ^(?:o|mo|imo)] imo]; return \"${left}engimo${right}\"}\n",
  "jars": "{} {. [bold][color red]J.[color blue]A.[color yellow]R.[color green]S. [color fuchsia][underline /\\\\]}\n",
  "gis": "args {force_image [?? [gis_results [join $args]]]}\n",
  "willsurvey": "{major music age sex ethnic} {\nstrip_space [html [strip_html [lindex [http post \"http://www.cs.utexas.edu/~will/submit.cgi\" familiarscion [choose yes no maybe] owncar [choose yes no maybe] howpurchased [choose self parents financedparents financedother financedself other {sucking dick}] qual_change [expr [rand 4] + 1] qual_affordable [expr [rand 4] + 1] qual_unique [expr [rand 4] + 1] qual_sophisticated [expr [rand 4] + 1] qual_simple [expr [rand 4] + 1] qual_straightforward [expr [rand 4] + 1] qual_expressive [expr [rand 4] + 1] qual_superior [expr [rand 4] + 1] qual_convenient [expr [rand 4] + 1] qual_personal [expr [rand 4] + 1] qual_stylish [expr [rand 4] + 1] qual_striking [expr [rand 4] + 1] qual_clean [expr [rand 4] + 1] qual_intelligent [expr [rand 4] + 1] qual_functional [expr [rand 4] + 1] qual_unity [expr [rand 4] + 1] qual_hasslefree [expr [rand 4] + 1] qual_pushinglimits [expr [rand 4] + 1] major $major music $music age $age sex $sex education somehs ethnic $ethnic] 2]]]\n}\n",
  "scramble": "str {join [mapx $str w {join [shuffle [split $w {}]] {}}]}\n",
  "ircblog": "{{idiot {}}} {return \"[color white on black]$idiot, I see you're blogging on IRC.  Would you like to:\\n[color blue on black]Post a Comment [color white on black]| [color blue on black]Digg It [color white on black]| [color blue on black]Twitter [color white on black]| [color blue on black]Facebook [color white on black]| [color red on black]Shoot yourself, because nobody cares\"}\n",
  "era": "{} {lindex_random $::era_dict}\n",
  "aombrero": "args {sombrerify [sombrerify [apply aom $args]] {  ,.  }}\n",
  "hiwinkie": "{{who Winkie}} {smega {strcat \"<[name]> $who: [greeting] [brit_word]!\"}}\n",
  "roulette": "{} {if [roulette_empty] roulette_reload roulette_squeeze}\n",
  "furaffinity": "{} {return \"\u0002\u000300,05ÂÂÂ PLEASE DO NOT COPY, ALTER OR DISTRIBUTE ÂÂÂ\"}\n",
  "word": "{{r {}}} {?? [ceval \"lgrep [list $r] \\[words]\"]}\n",
  "olds?": "{} {c [llength [intersect [string tolower [names]] [string tolower $::old_count]]] olds}\n",
  "addrandsn": "{} { smega { subst .addrandsn } 5 }\n",
  "grandcentral": "{} {return \"Your account is not yet ready to be upgraded. Please check back shortly.\"}\n",
  "goonettesay": "{{curves {}}} {if {$curves eq \"\"} {set curves [fatgoonwebquote \"fat woman\"]}; return [stampsay -s goonette $curves]}\n",
  "aimf_myspace": "args {aimify myspace $args}\n",
  "randacro_lolqdb": "{} {randacro [regsub -all {[^A-Za-z]} [lindex_random [split [fakeqdb] \" \"]] {}]}\n",
  "muslimtitle": "{} {return [lindex_random $::muslimtitle]}\n",
  "gnol": "{} {return \"[gnolsay [lindex_random $::gnol_dict]]\"}\n",
  "yeshello": "{} hello\n",
  "STrevolver": "{} {return {            .-.____________________.-.\n     ___ _.' .-----.    _____________|\n    /_._/   (      |   /_____________|\n      /      `  _ ____/               \n     |_      .\\( \\\\                   \n    .'  `-._/__`_//                   \n  .'       |\"\"\"\"'                     \n /        /                           \n/        |                            \n|        '                            \n|         \\                           \n`-._____.-'}}\n",
  "moredrinks?": "{} { wet [ choose yes yes yes yes yes yes yes yes yes {of course} {seek help}] }\n",
  "incog6": "{{who incog} {name {}}} {. \"<[name $who]> there is nothing wrong with molesting children [name $name]\"}\n",
  "palin_name": "{} {capitalize \"[word {^Tr[a-z]+$}] [random_word] [choose [choose Van Easton Ski-Doo]\\  {}]Palin\"}\n",
  "flamoot": "{} { return [goonsay {drolley is a fucking whore i wnted to be in #love but tshe deopped me now i cant even go in and her new boyfriend has only been there two months and he has ops that fucking fed rat bitch im gonna post herimages on 4chan}] }\n",
  "holywow": "{{str {}}} {if {$str eq \"\"} {set str \"[name]'s [random_word]\"}; return \"[bubble [lindex_random {o O 0 .}] [lindex_random {o O 0 .}]]\\n     [lindex_random {O o}]      \u0002HOLY WOW CHECK OUT [string toupper $str]\"}\n",
  "city": "{} {lindex_random $::cities}\n",
  "unicode_abuse": "args {set str [join $args \" \"]; if { $str eq \"\" } { set str \"stop unicode abuse\" }; set ret [list]; foreach ltr [split $str \"\"] { if { [lsearch -exact $::unicode_abuse_map [lc $ltr]] != -1 } { lappend ret [uchar [string map $::unicode_abuse_map [lc $ltr]]] } else { lappend ret $ltr } }; return [join $ret \"\"] }\n",
  "unknown:1:cmd/^img[_-](.*)/": "{matches cmd {index -1}} {lindex_random [lines [fetch [last $matches]]] $index}\n",
  "STminiokey": "{} {return \"\\n\\n[miniokey]\"}\n",
  "make_speech_balloon": "nlines {\n    set nl [max 0 [expr int(0.8*($nlines - 4))]]\n    set rnp {160 80 40 20}\n    set rn {8 4 2 1}\n    set cnt {}\n    set k $nl\n    set trans \"http://churchturing.org/x/trans100x100.png\"\n    foreach x $rn {\n        if [expr ($k / $x) >= 1] { \n            lappend cnt [expr int($k / $x)]\n            set k [expr $k - $x * int($k / $x)]\n        } else {\n            lappend cnt 0\n        }\n    }\n    set img \"http://churchturing.org/x/sptop.png\"\n    foreach {c v} [zip $cnt $rnp] {\n        for { set i 0 } { $i < $c } { incr i } {\n            set img [~magick-stack_scheme $img \"http://churchturing.org/x/spmiddle$v.png\" $trans]\n        }\n    }\n    ~magick-stack_scheme $img \"http://churchturing.org/x/spbottom.png\" 0 $trans\n}\n",
  "STmexicat": "{} {sombrerify [STdeadcat2] {  /x.x}}\n",
  "omgsmile": "{} {set s [smile];string map \".. $s _O [string repeat _ [expr [string length $s]-2]]O_ __ [string repeat _ [string length $s]]\" [omg]}\n",
  "softchatter": "{} {abezthink {I don't know if I can handle ANOTHER irc network right now!!!}}\n",
  "msword": "{} {I am Microsoft Word. I have a long WYSIWYG interface that causes people to pay more attention to layout and format than content. If you don't repost this comment to at least 10 people on your Microsoft Office Communicator contacts list, I will slink into your Sharepoint folder tonight and make a mess of your quarterly reports. }\n",
  "ucwords": "str {set sl [split $str]; for {set i 0} {$i<[llength $sl]} {incr i} {append ret [string totitle [lindex $sl $i]] \" \"}; string trimright $ret \" \"}\n",
  "jazz": "{} {. [capitalize [shakti_adjective]] Jazz [fm_station_name] [fm_station_mhz]}\n",
  "image_format": "{} {?? $::image_format}\n",
  "infowars": "{} {return [http://pastebin.com/pastebin.php?dl=f3eea77d6]}\n",
  "pooppoop": "{} {poop; . POOP POOP U POOPED, [string toupper [nick]]\\n[tail 2 [poop]]}\n",
  "lastfm:isListening": "sphtml {if {[regexp  {nowListening} $sphtml]} { return 1 } { return 0 }}\n",
  "days_since_macbook_pro_update": "{} {curse_you_steve \"MacBook Pro\"}\n",
  "kalleterror": "{} {return \"!parrot [kallebooize \"[spook] [spook] [spook] [spook] [spook]\"]\"}\n",
  "K": "{a b} {set a}\n",
  "14words": "{} {return \"We must secure the existence of our people and a future for white children\"}\n",
  "rune": "{{who {}}} {set who [name $who]; string toupper \"fuck $who; $who sux; $who is dying; $who is dead to me; $who hit wtc; $who -> ovens\"}\n",
  "ny_locale": "{} {lindex_random $::ny_locales}\n",
  "sa_thread_url": "threadid {return \"http://forums.somethingawful.com/showthread.php?s=&threadid=$threadid\"}\n",
  "buttes_dog": "{} {?? $::buttes_dog_dict}\n",
  "obama": "{{who {[name]}}} {. \"<obama> [subst [lindex_random $::obama]]\\n<[subst ${who}]> [subst [?? $::obama_response]]\" }\n",
  "smokeweed?": "{} {. \"smoke weed every day? [checkbox yes]\\[ \\] no\"}\n",
  "rrand_color": "{} {format %02d [rand 2 14]}\n",
  "lastfm:urlfilter_broken": "x {regsub -all {\\+} [subst [regsub -all {%} $x {\\x}]] { }}\n",
  "nagios": "{} { . *** BUTTES NAGIOS ALERT *** \\nNotification type: [notification_type] \\nHost: [name].buttes.org Service: [string toupper [random_word]] \\nState: [service_state] \\nAdditional info:  [jerkcity]}\n",
  "bigrands": "{} {return \"[bt [rands 10]]\"}\n",
  "neg": "{{who {}}} {return \"\u0002\u000301,01 \u000300,00\u000301NEGMASTER 5000 \u000305:::::: \u000314*A*C*T*I*V*E* \u000303/\\\\/\\\\/\\\\/\\\\/\\\\ \u000306injecting rna interference drug \u0003092FH8AB\u000306... \u000304success \u000311||| \u000301[name $who] is neg!\"}\n",
  "deg2rad": "degrees {expr $degrees * (3.1415926535 / 180)}\n",
  "livejournal2": "{} {return \"Topic: [random_word]\\nIt was a Saturday night and I was hanging out with [acquaintance] and we were smoking a [food_word]. I had been smoking a lot and really started to feel like [sex_act]. I went to see my boyfriend in the other room. All of a sudden I felt really [mood_word] and I thought the room was turning into [random_word]. I started getting really [mood_word] and my boyfriend tried to tell me something and I punched him.\"}\n",
  "kukluxradeon": "{harm group} {stampsay -s ghost I DIDNT EVEN [string toupper $harm] THOSE [string toupper $group]}\n",
  "rage": "{{who {}}} {return \"[name $who]: Hi! You appear to be \u00034raging\u0003 and \u00039hulkin'\u0003 on IRC. Would you like to: \u0002\\[\u0002\u001fSuppress your Anger\u001f\u0002\\]\u0002 \u0002\\[\u0002\u001fEmoquit IRC Forever\u001f\u0002\\]\u0002 \u0002\\[\u0002\u001fLive in Denial\u001f\u0002\\]\u0002 \u0002\\[\u0002\u001fBlog to your Pals\u001f\u0002\\]\u0002 \u0002\\[\u0002\u001fSwitch to MSN\u001f\u0002\\]\u0002 \u0002\\[\u0002\u001fBan VXP\u001f\u0002\\]\u0002 \u0002\\[\u0002\u001fQuit Caring\u001f\u0002\\]\u0002 \u0002\\[\u0002\u001fEat Blogzap\u001f\u0002\\]\u0002 \u0002\\[\u0002\u001fDie\u001f\u0002\\]\u0002 \u0002\\[\u0002\u001f\u00034Commit suicide because nobody cares\u0003\u001f\u0002\\]\u0002\";}\n",
  "yomomma": "{} {return \"Yo momma's so [choose stupid desperate fat ugly slutty poor] she [choose eats kills scares fucks serves \"smells like\"] [choose [food_word] [ethnic_group] [plural [animal_word]]]\"}\n",
  "darren7": "{} {caption_raw [img-darren 2] \"\\\\large\\\\textbf{[latext_escape [join [lrange [d_a] 1 end]]]}\"}\n",
  "lasturl": "{} {stripnick [format_log_line [lindex [lgrepi {http://} [log]] end]]}\n",
  "google_suggest_results_for": "query {set results \"{[string map [list {\",\"} {\" \"} {],[} \"} {\"] [last [regsub -all {,\"\\d+s?\"} [regexp -inline {\\[\\[(.*?)\\]\\]} [~http://clients1.google.com/complete/search?client=safari&[?  q $query]&safe=off]] {}]]]}\"; if {[lindex $results 0] ne {}} {return $results}}\n",
  "buddies_web": "{} {ajoin \" \" [string map {\"I \" \"WE \" \"I'M\" \"WE'RE\" \"I AM\" \"WE ARE\" \"MINE\" \"OURS\" \" MY\" \" OUR\" \"I'VE\" \"WE'VE\" \"I'D\" \"WE'D\"} [mohammed [onehug]]] \"\\n\\n\\n\\n\\n\\n\\n\\n\\n[STpumpkin]\"}\n",
  "drugz": "{} {return \" Through my use of drugs and hard times in the past my fear of death has completely gone away, and so has the opinion that death is a bad thing. It is merely a gateway to another conciousness, perhaps another universe. Therefore I send my wishes that Troy is now learning the secrets of life, death, and beyond, whereever he may be. He will be missed, but we will all see him again.\"}\n",
  "master_win": "{i a b c d} { if { [master_gete $i 0] == $a && [master_gete $i 1] == $b && [master_gete $i 2] == $c && [master_gete $i 3] == $d } { return 1; } else { return 0; } }\n",
  "testf": "{} { . $test }\n",
  "lacist": "args {. [uchar ff08 3000 ff40 30fc 00b4 ff09][chinkerize [join $args]]}\n",
  "STfatgoon": "args {apply STgoon $args}\n",
  "faggot": "{{args {}}} {return \"[name $args] is a faggot\"}\n",
  "init2": "{} {return \"[format \"% -50s\" \"[capitalize [insulting_verb]] [random_word]...\"] \\[[pick 4 {. {\\0039\\ \\ OK\\ \\ \\003}} 2 {. \\0034FAILED\\003} 1 {. \\0037PASSED\\003}]\\]\"}\n",
  "emotion": "{} {lindex_random $::emotions}\n",
  "urlencode2": "str {\n  set chars [list]\n  foreach char [split $str {}] {\n    if [regexp -nocase {[-,%_a-z0-9]} $char] {\n      lappend chars $char\n    } else {\n      lappend chars %[format %02X [scan $char %c]]\n    }\n  }\n  join $chars {}\n}\n",
  "golf-swing": "{} {choose *swoosh* {*breaking glass*} FOOOOOOOOOORE}\n",
  "tattle": "{} {return \"hey, [rand_aim] on AIM is talking shit about you again... he just said you have \\\"a [size_word] [body_part],\\\" called you \\\"a fat [animal_word]-[word {^[a-z].*?(?:er)$}],\\\" and your family is \\\"no better than a group of [word {^[A-Z].*?(?:ic|ian|ite|ican|ede|ese)$}] [ethnic_group]\\\".  He also called your posts \\\"as welcoming as [disease_word].\\\"  Just FYI.\"}\n",
  "niggercoin": "{} {return \"nigger[coin]\"}\n",
  "phpradium": "{} {. From a computer science standpoint, PHP is a terrible language and I have little respect for it. But as a product, PHP has proven itself dependable, performs well, is easy to learn/deploy/maintain, and works as advertised. It is a [b]good product[b].}\n",
  "solution": "{{problem {}}} {if {$problem eq \"\"} {set problem [singleethnic]}; return \"The final solution to the $problem problem: [checkbox [random_word] [random_word] [random_word]]\"}\n",
  "hector": "{} {rainb [catsay useless use of cat detected]}\n",
  "text": "{func str} {set str [string trim $str]; if {[string length $str] > 30} {error \"too long, faggot\"}; join [adjacent_join [map1 [map1 [split $str {}] $func] nsplit]] \\n}\n",
  "porntag": "{} {return \"[upper [name]] from [channel] - Very YOUNG LOOKING [faglame] gets his tight [upper [sexpart]] POUNDED by [articleize [dndcreature]] !!!\"}\n",
  "beafailure": "args {aenimaback [upper [en->no [8ball]]]}\n",
  "rot:isreverse": "c {\n\tset V $::rotV; \n\tif {[string index $c 0]==$V} { return 1; } { return 0;}\n}\n",
  "arcade": "{{message {}} {font {}} {size {}}} {.  http://i.buttes.org/index.php/http:/nfggames.com/system/arcade/arcade.php/b-u/bp-0/y-[or $font [?? $::arcade_font]]/z-0/dbl-[or $size 2]/x-[urlencode $message]#.jpg}\n",
  "quine": "{} {tcl join  {{} \\{ \\}} {tcl join  {{} \\{ \\}} }}\n",
  "ShutUpCatbus": "{} {mega mega say \"SHUT THE FUCK UP CATBUS  SHUT THE FUCK UP CATBUS \"}\n",
  "mroach11": "args {. I can't remember the last time i slept in my bed. Sleeping on the couch is quite nice and it frees-up my bed for a place to keep my clothes}\n",
  "STmexicat2": "{} {join [map [split [STmexicat] \\n] {{l1 l2} {set colour [next_in_list $::mexico_colours]; . \"\\003$colour$l1\\n\\003$colour$l2\\n\"}}] \\n}\n",
  "octalch0de": "{} {bigtext \"i am a faggot\"}\n",
  "bighateporn": "{{who {}}} {if {$who eq \"\"} {set who [lindex_random [names]]}; bighate $who [strip_u [fetish_porn]]}\n",
  "mao": "{} {return \"\u0003HELLO! My name is Mao Tse-Tung. \u0002\u00034I AM A COMMUNIST. I WANT TO KILL ALL AMERICANS!!\u0002\u0003  My father was on the plane that landed in Inchon! , and I am very proud of him, even though he was just some gook at the wrong place at the wrong time. \u00038Support Wen Jiabao NOW!! \u0002\u00034Help me KILL ALL AMERICANS!!!!!\"}\n",
  "nerds?": "{} {c [llength [names]] nerds}\n",
  "iraq": "{} {return \"Governer Adolph Bush did it only for the oil!\"}\n",
  "blackjack_get_player": "p { return [lindex [array get ::blackjack_player $p] 1];}\n",
  "STdevo": "{} { join [list {     _|__|_} {   _|______|_} { [____________]} {  (--[ .]-[ .]} {  (_______-__)}] \\n}\n",
  "master_set_stat": "{i l} { array set ::mastermind_stats [list $i $l]; return $l; }\n",
  "politicalcartoon": "args { pick 3 politicalcartoon1 1 politicalcartoon3 }\n",
  "islam": "args {if {$args eq \"\"} {set args [islam_word]}; . [upper [kill_verb] those who [insult_verb] [upper [join $args]]]}\n",
  "coffee?": "{} morecoffee?\n",
  "bikefags": "{} { ajoin \"\" [STbikefags] \"\\n  LOL\\n   @\\nBIKEFAGS\" }\n",
  "testbrackets": "a { . [$a] }\n",
  "STfullcubegoon": "{} {embed [fullgoonsay] [flip [cubegoon]] 3 1}\n",
  "fatgeordi": "{} { stampsay -s geordigoon \"Captain, we are being hailed by '[fatgoon_finale]'. [fatgoonmeal]\"}\n",
  "does": "args {return \"wtf no it doesn't\"}\n",
  "fatty": "{} {return \"I like to eat [food_word], [food_word], [food_word] and [food_word], all topped off with heaps of [topping].\"}\n",
  "butanfm_color": "{} {next_in_list [list red orange green blue violet]}\n",
  "wget_encode_x": "str {\n  set chars [list]\n  set seenq 0\n  foreach char [split $str {}] {\n    if { $char == \"?\" && !$seenq } {\n      lappend chars $char\n      set seenq 1\n    } elseif [regexp -nocase {[ \\[\\]\\?]} $char] {\n      lappend chars %[format %02X [scan $char %c]]\n    } else {\n      lappend chars $char\n    }\n  }\n  join $chars {}\n}\n",
  "spoilhate": "{} {spoiler [hate]}\n",
  "yanks": "{} { set a [string repeat \" [COLOR 04 04] [COLOR 04 00]*[COLOR 04 04] [COLOR 04 00] \" 5] ; return \"$a Yanks ;P $a\" }\n",
  "gta": "{} { return \"ima shoot the cops and drive forever\"; }\n",
  "rainbarber": "{} {eval [concat [list ajoin {}] [mapx [seq 1 7] x {gaydient 4}]]}\n",
  "banlist": "{} {rain [set r [list];foreach {x t d j s b} [regexp -inline -all {<td align=\"left\"><b><.*?>(.*?)</a></b></td><td nowrap><.*?>(.*?)</font></td><td nowrap><b><.*?>(.*?)</a></b></td><td>(.*?)</td><td><.*?>(.*?)} [wget http://forums.somethingawful.com/banlist.php]] {lappend r [fixtabs \"$t\\t$d\\t$j\\t[html $s]\\t$b\"]};join $r \\n]}\n",
  "oontz": "{} {return \"\u0002\u00030,3Ja. Ich heisse Dr. Oontz, der teknonische doktor. Und Ich mochte etwas zu sagen. Diese junge heute, sie magen das \\\"oontz oontz musik\\\". Sie weissen nicht der schwierigkeit von den oontz oontz leben ist. ABER ICH WEISS DAMIT. KOMM ZU MIR. I like yr page. \\;)\u0003\u0002\"}\n",
  "fullfighterintro": "{} { . \"[mmafighter]. [articleize [martialartist]] with a record of [rand 0 40] wins and [rand 0 40] losses\"}\n",
  "lupus": "{} { houseback [choose {It's lupus.} {It's not lupus.}] }\n",
  "niggerboy": "{} {return \"get up late, [niggerboy_activity], [niggerboy_activity], [niggerboy_activity], [niggerboy_activity], [niggerboy_activity], [niggerboy_activity], [niggerboy_activity], [niggerboy_activity], [niggerboy_activity], [niggerboy_activity], [niggerboy_activity], [niggerboy_activity]... Who says they dont work hard?\"}\n",
  "bananas?": "{} {biggoldtext \"[llength [info procs hello*]] bananas\"}\n",
  "slander": "who {return \"[name $who] is [articleize [adjective]] [oneoff]\"}\n",
  "smoek2": "{{length 0}} {let {length {. sm[join [repeat $length {?? {o 0}}] {}]ek}} [if {$length == 0} {rand 15 40} {set length}]}\n",
  "poz": "{{who {}}} {return \"\u0002\u00031,1#\u00030,5X\u00034,5D\u0003\u0002 \u00030~\u00036G \u00030~\u00034R \u00030~\u00037I \u00030~\u00038D \u00030~\u00039S \u00030~\u000312+ \u000313,7(\u000311,7:\u00038,8#\u0003 \u001f/\\\\\u001f \u0002POZZING: \u00036\\[\u00033|||100%|||\u00036\\]\u0003 \u00034COMPLETE\u0003\u0002 \u001f/\\\\\u001f\u0002\u000310 [name $who] has poz!\"}\n",
  "lastfm:lasttracktime": "user { set out 0; catch {set out [cache get lastfmlasttime $user]}; return $out }\n",
  "randart:make_canvas": "{w h} {\n    split [string repeat \" \" [expr $w * $h] ] \"\"\n}\n",
  "cosinewave2": "{n word} { join [map [seq 1 $n] {{x} {. [string repeat \" \" [expr int(10 + 10 * cos(3.14 * 3 * $x/20))]] $word }}] \\n }\n",
  "zybl0re": "{} {return \"<@zybl0re> [lindex_random [list boneres prickes dongues buttes balles cockes]]\"}\n",
  "albertsons": "{} {return [dylan]}\n",
  "lunch": "{} crappy_restaurant_word\n",
  "center": "{str len} {return [string repeat \\  [expr {($len/2)-([string length $str]/2)}]]$str}\n",
  "empty_formatting?": "formatting {array set e [empty_formatting]; foreach {k v} $formatting {if ![info exists e($k)] {return 0}; if {$e($k) != $v} {return 0}}; return 1}\n",
  "whatisgnu": "{} {return \"Gnu's not [word {^[u].*?(?:ing|able|ed|ful)$}]\"}\n",
  "delicious_beverage": "{} {embed [embed [chinsamid] [STshake] 25 3] ï¿½\\\\ 26 3}\n",
  ".": "args {join $args}\n",
  "laugh": "{{size 0}} {let {size {join [repeat $size {join [repeat [rand 1 3] [list . [next_in_list {a h}]]] [??  {{} { }}]}] {}}} [if {$size == 0} {rand 10 30} {set size}]}\n",
  "chargen": "args {return \"!\\\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ\\[\\\\\\]^_`abcdefgh\\n\\\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ\\[\\\\\\]^_`abcdefghi\\n#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ\\[\\\\\\]^_`abcdefghij\\n$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ\\[\\\\\\]^_`abcdefghijk\\n%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ\\[\\\\\\]^_`abcdefghijkl\\n&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ\\[\\\\\\]^_`abcdefghijklm\\n'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ\\[\\\\\\]^_`abcdefghijklmn\\n()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ\\[\\\\\\]^_`abcdefghijklmno\\n)*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ\\[\\\\\\]^_`abcdefghijklmnop\\n*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ\\[\\\\\\]^_`abcdefghijklmnopq\\n+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ\\[\\\\\\]^_`abcdefghijklmnopqr\\n,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ\\[\\\\\\]^_`abcdefghijklmnopqrs\\n-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ\\[\\\\\\]^_`abcdefghijklmnopqrst\\n./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ\\[\\\\\\]^_`abcdefghijklmnopqrstu\\n/0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ\\[\\\\\\]^_`abcdefghijklmnopqrstuv\\n\\n\"}\n",
  "powered": "{} {. http://tcl.sourceforge.net/images/pwrdLogo200.gif}\n",
  "STfagosaurus": "{} { join { {                .  | \\   _                     } {            \\\"_| |-| |__/ |  RAAAARRRRRRRRRRRRR} {         /\\_-   _     __\\/                     } {  ____/\\-'     / \\   /  \\'-/\\_o-_              } { '-_           \\  \\ /   /      _-\"             } {    \"\"\"--------/  / |  /-_____<_               } {              /  /  |  \\      \"-\"              } {              '---' '---'                      }} \\n}\n",
  "saygermany": "{{propa {}}} {set wstring \"\"; for { set i 1 } { $i<=([string length $propa]+6) } { incr i } { append wstring \" \" } ;  return \"[color black on black]$wstring\\n[color black on yellow]   [name $propa]   \\n[color orange on orange]$wstring\"}\n",
  "braille": "str { string map { A â  B â  C â  D â  E â  F â  G â  H â  I â  J â  K â  L â  M â  N â  O â  P â  Q â  R â  S â  T â  U â ¥ V â § W â º X â ­ Y â ½ Z â µ # â ¼ . â ² , â  ? â ¦ ; â  ! â  \" â ¦ \" â ´ [ â ¶ - â ¤ ' â  1 â  2 â  3 â  4 â  5 â  6 â  7 â  8 â  9 â  0 â  } [string toupper $str] }\n",
  "prev": "x { - x 1 }\n",
  "jewword": "{} {lindex_random $::jewword_dict}\n",
  "sry": "{} {. \"IM SORRY [upper [name]]\"}\n",
  "STkanyegoon": "{} { return \"  __________\\n (--\\[\u001f==\u001f\\]-\\[\u001f==\u001f\\]\\n (_______O__)\"}\n",
  "STfish": "{} { return \" o  _/ (  /\\{ \\n . /o   \\\\/ | \\n   >| > _  < \\n    \\\\  / \\\\ | \\n     \\\\(   \\\\\\{ \";}\n",
  "haikuize_n": "{haimap n} {\n\tset syls 0\n\twhile {$syls < $n} {\n\t\tset hai [?? $haimap]\n\t\tset ifadd [expr $syls + [lindex $hai 1]] \n\t\tif {$ifadd <= $n} {\n\t\t\tforeach word [lindex $hai 0] {\n\t\t\t\tlappend rethai $word\n\t\t\t}\n\t\t\tset syls $ifadd\n\t\t}\n\t}\n\treturn [split $rethai]\n}\n",
  "lady-liberty": "image {magick_composite_bottom_left $image [img-lady-liberty]}\n",
  "STfullpuntme": "{} {embed [embed [STfullgoon] [STsmallkin] 7 1] U.S.A.F. 11 6}\n",
  "perl_module": "{} {lindex_random $::perl_module}\n",
  "mm": "str {eval \"mastermind [split $str \"\"]\"}\n",
  "fatbus": "{} {return \"[capitalize [catbus_word]]. [mmm]\"}\n",
  "rightomgchair": "{} { omgchair }\n",
  "lowtax": "{} {bigtext not\\ tech\\ guy}\n",
  "clickwasec": "{} { busy_wait 1; set t [busy_wait 1]; set e [clock clicks]; return [list [+ 1 $t] $e] }\n",
  "chicky": "{} {return \"\u00031,8-_-\u0003 \u0002wan u sum chicky fly lice?\u0002 \u00031,8-_-\u0003 \"}\n",
  "0x90": "{} {}\n",
  "napply": "{n cmd {input {}}} { set ret $input; for {set x 0} {$x < $n} {incr x} { set ret [$cmd $ret] }; return $ret; }\n",
  "flickrgroup": "{} {subst \"Hi, I'm an admin for a group called [random_word], and we'd love to have your photo added to the group.\"}\n",
  "radeon3": "{} {return \"<@radeon> yet since i was the one working on the machine, its my fault\\n<@radeon> whatever i still broke it\\n<@radeon> Insurance is paying for it\"}\n",
  "kiwigirl": "{} {gis [lindex_random {{sheep} {sheared sheep}}]}\n",
  "lolj": "{} {set html [unescape_html_entities [cwget http://fuzzysquid.com/LJ.php]]; ljpics [html [strip_html [lindex_random_ne [regexp -all -inline {<img src='(.*?)'} $html]]]]}\n",
  "arabnews": "{} {return \"[arabnews1] \\n[arabnews2] \\n[arabnews3] \\n[arabnews4] \\n[arabnews5]\"}\n",
  "moirasay": "args {stampsay -s moira* [join $args]}\n",
  "STsnowman": "{} { return \"    ,--,/,   \\n   J___L\\\\/,  \\n   ('.')/\\\\/  \\n  (  . /)    \\n  (  :/ ) \";}\n",
  "acronym": "args {set a [string tolower [lindex $args 0]];set c [lindex $args 1];if {$a eq \"add\"} {acro $c [acroadd $c [lrange $args 2 end]]} elseif {$a eq \"del\"} {acrodel $c [lindex $args 2]} elseif {$a eq \"clear\"} {acroclear $c} elseif {$a eq \"list\"} {acrolist $c} {acroret $a}}\n",
  "glowstick": "{} { return \"[col_char][choose 9 4 8][eval [choose slash backslash]][col_char]\" }\n",
  "split_every": "{n list} {set ret [list]; set accum [list]; set i 0; foreach element $list {incr i; lappend accum $element; if {$i % $n == 0} {lappend ret $accum; set accum [list]}}; if [llength $accum] {lappend ret $accum}; return $ret}\n",
  "steveburger": "{} {. Someone should make a burger filled with real shit instead of meat and feed it to STEVE JOBS. how can he let AAPL fall 96% in a single day and not release a new ipod shuffle or a imac this is redicilious!}\n",
  "heh": "{} {. [name] is a [pink [faglame]]}\n",
  "winprog": "{} {lindex_random $::winprog_dict}\n",
  "^gay": "{} {set line [^]; set tok [lindex_random $line]; string map [list $tok [choose [butte_word] [crw_word]]] $line}\n",
  "abez_word": "{} {lindex_random $::abez_word}\n",
  "youtube_comment": "{} {return [lindex_random $::stupid_dict]}\n",
  "buttesroomlist": "{} { set rooms [getnuniq 10 buttesroom]; join [mapx [seq 1 10] i {ajoin \"\" \"[format %2d $i] .. \" [wrap [lindex $rooms [- $i 1]] 30]}] \\n}\n",
  "poopstat": "{} {. \"Poopers: [wget http://poopstat.us/count.yaws]\\nRecord: $::max_poopers\"}\n",
  "niggoon": "{} {niggerize [fatgoon]}\n",
  "freedom_word": "{} {lindex_random $::freedom_words}\n",
  "lastfm_user_info": "html {regex -inline {.*?([\\w\\d]+).*?(Last track|Listening):\\s+(.+?)\\s\\s(.+)} [strip_html $html]}\n",
  "ls": "args { exec {*}[auto_execok ls] {*}$args }\n",
  "n_d": "args {newdrudge $args}\n",
  "aimterrorist2": "args {aim -n [aimname $args] [terrorist2]}\n",
  "microsoft": "{{set {}}} {if {$set eq \"\"} {set set [namegen]}; return \"$set, you dislike microsoft right?\"}\n",
  "firsttheycamefor": "{{who {}}} {set fags [getnuniq 4 faglame]; return \"[firsttheycame [lindex $fags 0] [lindex $fags 1] [lindex $fags 2]]Then they came for the [lindex $fags 3]s, but there was nobody left to speak for [name $who]\"}\n",
  "kill_sanchez": "{} {sanchez \"On [day] [daypart], I will kill myself with a [weapon], I have nothing else to live for, [choose \"[nicklist]\" \"[jewfullname]\"] has betrayed me, goodbye cruel world!\"}\n",
  "char-gudrize": "str {set ret \"\"; set color [rand_color]; foreach word [split $str \"\"] {while {[set next_color [rand_color]] eq $color} {}; set color $next_color; append ret \"$color$word\"}; return $ret}\n",
  "computer_language": "{{lang {}}} {if {$lang eq \"\"} {return [lindex_random $::computer_languages]} {return $lang}}\n",
  "magick-scale-gen": "{img percent} { . (let ((i (image [scheme_escape $img])) (w (width i)) (h (height i))) (resize i (/ (* w $percent) 100) (/ (* h $percent) 100))) }\n",
  "british": "str {string map -nocase {color colour favorite favourite truck lorry bathroom loo aluminum aluminium trunk boot} $str}\n",
  "geinpart": "{} {return \"[choose [sexpart] [body_part]]\"}\n",
  "sluice": "{{who {}}} {string map {slice sluice eyes box} [slice $who]}\n",
  "calc": "args {. [strip_space [html [strip_html [last [regexp -inline {<h2 class=r><font size=\\+1><b>(.*?)</b>} [cwget http://wolfgang.nonexiste.net/google.php?q=[urlescape [join $args ]]]]]]]]}\n",
  "_frewrite_forum_history": "{Mega64 implosion} {return \"[pantshitting goons] i just found my brother's uncle's cousin strangling young girls what should i do???? (56k combustion)\"; return $WTFUXnet}\n",
  "rbl_line": "{{quote {}}} {if {$quote eq \"\"} {set quote [rbl_quote]}; set lines [split $quote \\n]; lindex_random $lines}\n",
  "nigger_prions": "{} {moirasay [niggerize [prions] [mmm] [lastwords]]}\n",
  "interlaced_chile": "{} {set chile [split [chile] \\n]; each [split [interlace [chile]] \\n] {l {if { [string length \"$l\"] == 1 } { . [uplevel {next_in_list $chile}]; } else { . $l }}}}\n",
  "cockestory": "{} { subst [?? $::cocke_headlines] }\n",
  "STslap": "{} {join {{ \u0002\u0002 \u0002\u0002 \u0002\u0002 \u0002\u0002 \u0002\u0002 \u0002\u0002 _.-._ \u0002\u0002 \u0002\u0002 \u0002\u0002} { \u0002\u0002 \u0002\u0002 \u0002\u0002 \u0002\u0002 \u0002\u0002 | | | |_ \u0002\u0002 } { \u0002\u0002 \u0002\u0002 \u0002\u0002 \u0002\u0002 \u0002\u0002 | | | | | \u0002\u0002 \u0002\u0002 \u0002} { \u0002\u0002 \u0002\u0002 \u0002\u0002 \u0002\u0002 \u0002\u0002 | | | | | } { \u0002\u0002 \u0002\u0002 \u0002\u0002 _ | \u0002\u0002 '-._ | } { \u0002\u0002 \u0002\u0002 \u0002\u0002 \\`\\`-.'-._; } { \u0002\u0002 \u0002\u0002 \u0002\u0002 \u0002\u0002 \\ \u0002\u0002 \u0002\u0002 \u0002\u0002 ' \u0002\u0002 \u0002\u0002 |} { \u0002\u0002 \u0002\u0002 \u0002\u0002 \u0002\u0002 \u0002\u0002 \\ \u0002\u0002 .` \u0002\u0002 / \u0002\u0002 } {jgs \u0002\u0002 \u0002\u0002 \u0002\u0002 | \u0002\u0002 \u0002\u0002 \u0002\u0002 |}} {\n}}\n",
  "vogon": "{} {biggaytext \"wow just wow\"}\n",
  "namedfartcloud": "{} { embed [STfartcloud] FART 6 4 }\n",
  "cpan": "{} {string map {{ } {::}} \"[perl_module] [perl_module] [perl_module] [ucwords [crw_word]]\"}\n",
  "STcatbus": "{} {return \"   .--\\\"--.\\n  /       \\\\\\n /  o o    \\\\\\n(    ^     ,)\\n \\\\   __,   /\\n  `._____.'\"}\n",
  "moiracam6": "{} {return \"          ____\\n         |    ||\\n         | =- ||\\\\\\n         |    || \\\\\\n         |    ||\\\\ `////-----.\\n          \\\\___'|_////)/      \\\\\\n          |    `-----/  /     \\\\\\n          |    _____/  /|      \\\\\\n           \\\\  (_______/ |     /\\\\____\\n            \\\\__________/      \\\\_____\\\\\\n         ___/__________\\\\____________\\\\\"}\n",
  "aimf_onenight": "args {aimify onenight $args}\n",
  "audiotube": "url {. [http://manimal.prettybrd.com/~leedo/scripts/audioutil.pl?c=youtube&v=[urlencode $url]]}\n",
  "tolldb": "{} faggot\n",
  "red": "{} {string toupper \"[color red][bold](product)[bold] [crw_word]\"}\n",
  "kitty": "{} {return =^\u000313.\u0003^=}\n",
  "rand_ascii": "{} { format \"%c\" [+ 1 [rand 254]] }\n",
  "infid3l2": "{{_txt heyy}} {embed [rain [regsub \"\\x0f\" [ajoin \"\" [sinewave [infid3l]] \"\" [flip [sinewave [infid3l]]]] \"\"]] [bt $_txt] 17 8}\n",
  "annoyeveryone": "args {apply pisseveryoneoff $args}\n",
  "radeonforpresident": "{} {stampsay -s kkk \"Send those [niggerword]s back to [niggerplace]. That's where I stand on that issue.\"}\n",
  "dylan": "{} {return \"DYLAN, IT DOESN'T EXIST. IT IS NO LONGER IN EXISTENCE\"}\n",
  ">:(": "{} { return \"[bigtext \">:(\"]\" }\n",
  "finns?": "{} {c [llength [intersect [string tolower [names]] [string tolower $::finns]]] finns}\n",
  "ddosking": "{} {ta pump/ddosking.txt}\n",
  "zybl0re3": "{} {return \"<@zybl0re> i wouldn't be racist if niggers weren't so useless <@zybl0re> srry no niggers in my car <@zybl0re> lol tupac is a nigger <@zybl0re> NIGGERS = CHICKEN BANDITS <@zybl0re> well, the 100% niggers look like apes :( <@zybl0re> vogon: what's with the nigger pics <@zybl0re> I HATE NIGGER >:( <@zybl0re> cant we just kill all niggers? :(\"}\n",
  "vb3_fetch_threads": "{root forumid {pagenumber 1}} {set html [wget $root/forumdisplay.php?f=$forumid&page=$pagenumber];set ret [list];foreach {match threadid title} [regexp -all -inline {<a [^>]*?href=\"[^\">]*showthread[^\">]*?t=(\\d+)\"[^>]*>([^<]+)</a>} $html] {lappend ret [list $threadid [html $title]]};return $ret }\n",
  "forecat": "args {catback [forecast $args]}\n",
  "noop": "{} {goonsay \"ALLAH ACKBAR, PANCIA!\"}\n",
  "cornfed": "{} {. http://i.buttes.org/index.php/http://img530.imageshack.us/img530/3844/cornyga1.gif \u0002Color me kooky, but something very odd is going on around here.\u000f}\n",
  "laserroulette": "{} {pewpew [nick]}\n",
  "realrainshsc": "{} {set threads [threads 22]; join [map1 [map1 [lrange [knuth_shuffle_permute [llength $threads]] 0 9] {lindex $threads}] {strcat \u0003[gay]}] \\n}\n",
  "rand_char": "{} {format %c [expr {int(rand()*93+33)}]}\n",
  "add": "args {return \"You don't add things this way, perhaps you should learn how to use TCL first\"}\n",
  "jewfighter": "{{name {}}} { . \"[jewname] \\\"[or $name [currency]]-Hoarder\\\" [jewsurname], fighting out of [choose \"Tel Aviv, Israel\" \"New York, USA\"]\" }\n",
  "fightclub": "{{who {}}} {return \"I am [name $who]'s [word {^[a-z].*?(?:ic|ian|esque|an)$}] [body_part]\"}\n",
  "bye": "name {. \"bye $name!!!!!!\"}\n",
  "grapefruitize": "args {join [mapx [split $args] word {concat [color [next_in_list {orange fuchsia}]]$word}]}\n",
  "btroll": "{} {bpost [trolldb]}\n",
  "buttestrails": "{} {return \"\u0002                           _\\n\u0002      ______            /~~~,\\n\u0002  ___/`_____\\---------/____/  \u000313\\\"\\\"\\\"//\u000304[gay_word] ** [crw_word]** [gay_word]\\n\u0002~(___#buttes_ <======: (___]  \u000308====\u000304[crw_word] ** [gay_word] ** [crw_word]\\n\u0002             `-----------~`   \u000313,,,\\\\\\\\\u000304[gay_word] ** [crw_word]--.\\n\"}\n",
  "sierpenski": "{} {. ãããããããâ²\\nããããããâ²ãâ²\\nãããããâ²ãããâ²\\nããããâ²ãâ²ãâ²ãâ²\\nãããâ²ãããããããâ²\\nããâ²ãâ²ãããããâ²ãâ²\\nãâ²ãããâ²ãããâ²ãããâ²\\nâ²ãâ²ãâ²ãâ²ãâ²ãâ²ãâ²ãâ²}\n",
  "trippin": "{} {return \"http://what.h8r.net/hyperzone/aiight/\"}\n",
  "factor": "args {\n\tglobal factor;\n\tglobal factor_stats;\n\tset nick [nick];\n\tif {[lindex $args 0] eq \"stats\"} {\n\t\tif {[llength $args] > 1} {\n\t\t\tset n [lindex $args 1]\n\t\t\tif {[lsearch [array names factor_stats] $n] < 0} {\n\t\t\t\treturn \"$n is too busy licking dicks to factor polynomials\"\n\t\t\t} else {\n\t\t\t\tset f [lindex $factor_stats($n) 0]\n\t\t\t\tset e [format \"%.1f\" [expr 100.0*$f/[lindex $factor_stats($n) 1]]]\n\t\t\t\treturn \"$n has factored $f polynomials with $e% efficiency\";\n\t\t\t}\n\t\t} else {\n\t\t\tset topscores [lrange [lsort -decreasing -command cmp_factor_stats [array_to_list factor_stats]] 0 9]\n\t\t\tset i 1\n\t\t\tforeach s $topscores {\n\t\t\t\tset n [lindex $s 0];\n\t\t\t\tset f [lindex $s 1];\n\t\t\t\tset e [format \"%.1f\" [expr 100.0*$f/[lindex $s 2]]];\n\t\t\t\tlappend ret \"\u0002$i:\u0002 $n has factored $f polynomials with $e% efficiency\";\n\t\t\t\tincr i\n\t\t\t};\n\t\t\treturn [join $ret \\n];\n\t\t}\n\t};\n\tif {[lsearch [array names factor] $nick] < 0} {\n\t\tset a 0;set b 0;set c 0;set d 0;\n\t\twhile {!$a} {set a [expr int(12*rand())-6]};\n\t\twhile {!$b} {set b [expr int(12*rand())-6]};\n\t\twhile {!$c} {set c [expr int(12*rand())-6]};\n\t\twhile {!$d} {set d [expr int(12*rand())-6]};\n\t\tset factor($nick) [list [expr $a*$c] [expr $a*$d+$b*$c] [expr $b*$d]];\n\t\tset a \"[lindex $factor($nick) 0]x^2\";\n\t\tset b [lindex $factor($nick) 1];\n\t\tif {$b > 0} {set b \" + [expr $b]x\"} elseif {$b eq 0} {set b \"\"} else {set b \" - [expr abs($b)]x\"};\n\t\tset c [lindex $factor($nick) 2];\n\t\tif {$c > 0} {set c \" + $c\" } elseif {$c eq 0} {set c \"\"} else {set c \" - [expr abs($c)]\"};\n\t\treturn \"$nick: Your polynomial is $a$b$c\";\n\t};\n\tif {[join $args] eq \"\"} {\n\t\tset a \"[lindex $factor($nick) 0]x^2\";\n\t        set b [lindex $factor($nick) 1];\n\t\tif {$b > 0} {set b \" + [expr $b]x\"} elseif {$b eq 0} {set b \"\"} else {set b \" - [expr abs($b)]x\"};\n\t\tset c [lindex $factor($nick) 2];\n\t\tif {$c > 0} {set c \" + $c\" } elseif {$c eq 0} {set c \"\"} else {set c \" - [expr abs($c)]\"};\n\t\treturn \"$nick: Your polynomial is $a$b$c\";\n\t};\n\tif {[lsearch [array names factor_stats] $nick] < 0} {\n\t\tset factor_stats($nick) [list 0 0];\n\t};\n\tset p $factor($nick);\n\tset str [join $args \"\"];\n\tif {![regexp -- \"-?\\\\d*\\\\(-?\\\\d*x\\\\+?-?\\\\d*\\\\)\\\\*?\\\\(-?\\\\d*x\\\\+?-?\\\\d*\\\\)\" $str]} {\n\t\treturn \"wtf are you talking about\";\n\t};\n\tset guess [split [regsub \"(-?\\\\d*)\\\\((-?\\\\d*)x\\\\+?(-?\\\\d*)\\\\)\\\\*?\\\\((-?\\\\d*)x\\\\+?(-?\\\\d*)\\\\)\" $str \"\\\\1:\\\\2:\\\\3:\\\\4:\\\\5\"] :];\n\tset f [lindex $guess 0];\n\tif {$f eq \"\"} {set f 1};\n\tif {$f eq \"-\"} {set f -1};\n\tset a [lindex $guess 1];\n\tif {$a eq \"\"} {set a 1};\n\tif {$a eq \"-\"} {set a -1};\n\tset a [expr $f*$a];\n\tset b [expr $f*[lindex $guess 2]];\n\tset c [lindex $guess 3];\n\tif {$c eq \"\"} {set c 1};\n\tif {$c eq \"-\"} {set c -1};\n\tset d [lindex $guess 4];\n\tif {[expr $a*$c] eq [lindex $p 0] && [expr $a*$d+$b*$c] eq [lindex $p 1] && [expr $b*$d] eq [lindex $p 2]} {\n\t\tset a 0;set b 0;set c 0;set d 0;\n\t\twhile {!$a} {set a [expr int(12*rand())-6]};\n\t\twhile {!$b} {set b [expr int(12*rand())-6]};\n\t\twhile {!$c} {set c [expr int(12*rand())-6]};\n\t\twhile {!$d} {set d [expr int(12*rand())-6]};\n\t\tset factor($nick) [list [expr $a*$c] [expr $a*$d+$b*$c] [expr $b*$d]];\n\t\tset factor_stats($nick) [list [expr [lindex $factor_stats($nick) 0]+1] [expr [lindex $factor_stats($nick) 1]+1]];\n\t\treturn \"Congratulations $nick, the solution was $str.\";\n\t} else {\n\t\tset factor_stats($nick) [list [lindex $factor_stats($nick) 0] [expr [lindex $factor_stats($nick) 1]+1]];\n\t\tset u \"[expr $a*$c]x^2\";\n\t\tset v [expr $a*$d+$b*$c];\n\t\tif {$v > 0} {set v \" + [expr $v]x\"} elseif {$v eq 0} {set v \"\"} else {set v \" - [expr abs($v)]x\"};\n\t\tset w [expr $b*$d];\n\t\tif {$w > 0} {set w \" + $w\" } elseif {$w eq 0} {set w \"\"} else {set w \" - [expr abs($w)]\"};\n\t\tset a \"[lindex $factor($nick) 0]x^2\";\n\t\tset b [lindex $factor($nick) 1];\n\t\tif {$b > 0} {set b \" + [expr $b]x\"} elseif {$b eq 0} {set b \"\"} else {set b \" - [expr abs($b)]x\"};\n\t\tset c [lindex $factor($nick) 2];\n\t\tif {$c > 0} {set c \" + $c\" } elseif {$c eq 0} {set c \"\"} else {set c \" - [expr abs($c)]\"};\n\t\treturn \"$nick: WRONG, FAGGOT.\\n$nick: That expands to $u$v$w\\n$nick: Your polynomial is $a$b$c\";\n\t}\n}\n",
  "goonmeal": "{} {ajoin \"\" [STshake] [STburger] [STfries]}\n",
  "ryan": "str {gudrize [tinfoil [shittify \"$str SUCKS A BIG BLACK DICK\"]]}\n",
  "musicgoon": "{} { goonsay \"I don't know about you, but the only true music is [lindex_random $::subgenre]-[lindex_random $::genre]. I have a [expr 2+int(rand() * 5)]-watt [lindex_random $::opamp_dict] Headphone Op Amp just for this. [fatgoon_finale].\" }\n",
  "bj_stand": "{} { return [blackjack_stand [nick]]; }\n",
  "hiapril": "{} {. [spoiler \"attn: stopmakingsense \\007                                                                   \"]\\n[ajoin \" \" [cswas] \"\\n\\n[bt hi april]\" [cswas]]}\n",
  "web2down": "{} {return \"Why is [web2_name] down?  Is it because [fail_reason]?\"}\n",
  "wooster": "{} { lol \"wooster\"; }\n",
  "image-rel-border-gen": "{url {offset 10}} { \nreturn \"(let ((bg (image http://churchturing.org/x/white100x100.png))\n          (i [scheme_image_or_sexpr $url])\n          (iw (width i))\n          (ih (height i))\n          (offset (* (/ $offset 100) (if (> iw ih) iw ih))))\n         (composite (resize bg (+ iw offset offset) (+ ih offset offset)) i offset offset))\"}\n",
  "electrons": "who {return \"<$who> electrons, I gues?\"}\n",
  "ubuntu_release": "{} {return \"Thank you for your interest in Ubuntu [rand 20].0[rand 9] - the \u0002[ubuntu_version]\u0002.\"}\n",
  "orangedrink": "{} okey\n",
  "lastlog_qwantz": "{} {qwantz [lastlog_text 11]}\n",
  "tags_for": "url {\n  set tags [list]\n  foreach tag [tags] {\n    if [tagged? $url $tag] {\n      lappend tags $tag\n    }\n  }\n  return $tags\n}\n",
  "car": "l {lindex $l 0}\n",
  "kscope": "img {. \"[mirror_right [magick rotate [mirror_right [magick rotate [mirror_right [magick rotate [mirror_right $img] 45]] 45]] 45]]\" }\n",
  "edwards2": "{} {smega {join [smega {pick 50 {. \"[bold]MILLS \"} 1 {. \"[bold]TWO AMERICAS \"}}]}}\n",
  "talkfish": "{} {talk [notaimfish]}\n",
  "unless": "{expr body args} {uplevel 1 [concat [list if !$expr $body] $args]}\n",
  "swinglerdate": "{{who {}}} {. \"<swingler> [name $who]: i've had a long day dealing with [string map {\"his \" \"my \"} [swingler_word]], want to meet up at [crappy_restaurant] for some [crw_word] later?\"}\n",
  "mj": "{} {fedoragoonsay \"[lindex_random $::mj_dict]\"}\n",
  "okeyphrase": "{} {return \"[pick 1 nigger_ramblings 1 niggerphrase]\"}\n",
  "emigrate": "{{who {}}} {return \"[omg] hey, [name $who]! Take your [seinfeld_word] and go back to [country_name], you [unplural [ethnic_group]]!\"}\n",
  "buttesmotto": "{} {}\n",
  "drostegoon": "{} {embed [embed [embed [chinsamid] [ncock 3] 23 6] [omg] 26 5] {O8===:D - - - -} 29 7}\n",
  "slur_dit": "{} {return \"[rand_aim] told me you were a [unplural [ethnic_group]] [faglame]?\"}\n",
  "smega": "{block {n 10}} {set ret [list]; foreach i [seq 1 $n] {if {[catch {uplevel 1 $block} val] == 1} {set val \"error: $val\"}; lappend ret $val}; join $ret \\n}\n",
  "randart:randart": "{{w 70} {h 10} {a 20} {t 0}} {\n    set canvas [randart:make_canvas $w $h];\n    for {set ai 0} { $ai < $a} {incr ai} {\n        set randrow [expr int([rand [expr 1.1 * $h]] - $h * .1 /2.0)]\n        set randcol [expr int([rand [expr 1.1 * $w]] - $w * .1 /2.0)]\n        foreach {pw ph piece} [randart:towharray [randart:randompiece]] {\n            for {set row 0} { $row < $ph } {incr row} {\n                set pieces [lindex $piece $row]; #list\n                set ny [expr $randrow + $row];\n                for {set col 0} { $col < $pw } {incr col} {\n                    set nx [expr $randcol + $col];\n                    if [randart:inrange $nx $ny $w $h] {\n                        set c [lindex $pieces $col];\n                        set loc [expr $w * $ny + $nx];\n                        if [randart:istrans $c] {\n                            if $t { \n                                \n                            } else {\n                                lset canvas $loc  \" \" \n                            }\n                        } elseif {$c == \"\"} { \n                            lset canvas $loc  \" \" \n                        } else {\n                            lset canvas $loc $c\n                        };\n                    };\n                };\n            };\n        };\n    };\n    randart:serialize $canvas $w $h\n}\n",
  "unknown:nick/swingler/": "args {error \"cat-like typing detected\"}\n",
  "gaydrow": "{} {map1 [strip_color [gudrow]] {strcat \u0003[gay]}}\n",
  "singlerandomword": "{} {string map {{ } -} [random_word]}\n",
  "stallion": "{} {return \"A full grown stallion's cock, when fully erect, will measure some two to three feet long. It can be three to six inches thick at the base, to about two inches thick at the head.\"}\n",
  "df": "{{who {}}} {if {$who eq \"\"} {set who [lindex_random [names]]}; return \"<$who> Filesystem    Size   Used  Avail Capacity  Mounted on\\n<$who> /dev/ad4s1a    30G    5G     15G    16%    /[fetish_porn]\\n<$who> /dev/ad4s1b    30G    29G   566M    97%    /[fetish_porn]\\n<$who> /dev/ad4s1c    30G    27G   304M    91%    /[fetish_porn]\\n<$who> /dev/ad4s1d    30G    30G   123M    99%    /[fetish_porn]\"}\n",
  "image-akimbo": "url {image-pistol-left [image-pistol $url] }\n",
  "xbox": "args {is hueg}\n",
  "mroach7": "{} {. I really don't think it's unreasonalbe not to want to associate with people anymore based on who they vote for. Their vote affects your life.}\n",
  "snakebanner": "args {return \" __\\n/..\\\\____[string repeat _ [string length [join $args]]]____/\\\\\\n\\\\O\u001f      [join $args]     \u001f/\"}\n",
  "muslimfighter": "{{name {}}} { . [or $name \"[muslim_firstname] \\\"[choose [islam] [muslimtitle]]\\\" [muslim_firstname]\"], from [choose [?? $::mecountry] \"#arab on SandNET\"] }\n",
  "join_on_more": "args { if {[llength $args] > 1} { return [join $args] }; return [lindex $args 0] }\n",
  "new_rss_data": "rssfeed { set key feed:[sha1 $rssfeed]; set val [cache_get_default rss $key {}]; set rssdata [rss_data_get $rssfeed]; set results [difference $rssdata $val]; cache put rss $key $rssdata; return $results}\n",
  "randomvoice": "{} { subst \".sayvoice [lindex_random $::voices]\" }\n",
  "canvas": "{{width 72} {height 10}} { set ol [list]; foreach x [seq 1 $height] {lappend o [string repeat \" \" $width]}; join $o \\n}\n",
  "odinesque": "{} { subst [lindex_random $::odinesque] }\n",
  "cga": "args {set ret \"\"; foreach char [split [strip_all [join $args]] {}] {if {$char eq \" \" || $char eq \"\\n\"} {append ret $char} {if {$char eq \",\"} {set  char \",,\"}; append ret [color_n [cga_colours]]$char}}; return $ret}\n",
  "sfart": "{} {strings [join [lrange [lines [fart]] 1 end] \\n]}\n",
  "negative": "{} {lindex_random $::negative_dict}\n",
  "xzibit": "{{noun car} {verb drive}} {upper \"yo dawg i herd you like ${noun}s so i put a $noun in yo $noun so you can $verb while u $verb\"}\n",
  "soltex": "{} {return \"you tried [random_word], some [random_word] you can kick ass [random_word]... [string toupper [random_word]]\"}\n",
  "rndtcl_return": "{} {return \"return [rndtcl_expression 1]\"}\n",
  "religious": "{} {lindex_random $::religion_adherant}\n",
  "master_score": "{i a b c d} { master_match_print $i $a $b $c $d [master_match $i $a $b $c $d]; }\n",
  "transport": "{} {lindex_random $::transport_dict}\n",
  "hate": "{{hater {}} {hated {}}} {if {$hater eq \"\"}  {set hater [lindex_random [names]]}; if {$hated eq \"\"} {set hated [lindex_random [names]]}; return \"$hater: why do you hate $hated?\"}\n",
  "gis-comic": "args {force_image [urldecode [lindex_random_ne [regexp -all -inline {imgurl\\\\x3d(http://.*?)\\\\x26} [6~http://images.google.com/images?q=[urlencode [join $args \"+\"]&hl=en&imgtype=lineart&as_st=y]]]]]}\n",
  "jbake_2": "{} {set rand [rand 2]; if {$rand eq 0} {set stamp burger} else {set stamp shake}; stampsay -s $stamp \"J BAKE, NO TOMATE. NUGS. FROSTYS.\"}\n",
  "bmi2": "{w h} { expr 703 * $w / ($h*$h) }\n",
  "lkeycaps": "args {let {str {join [zip [split $str {}] [repeat [llength [split $str {}]] {. [U+20E3]}]] {}}} [join $args]}\n",
  "old-aud": "{matches cmd {index -1}} {lindex_random [lines [afetch [last $matches]]] $index}\n",
  "dukeku": "{} {string map {1460 2360} [old_dukeku]}\n",
  "html": "html {strip_blank_lines [unescape_html_entities [strip_tags $html]]}\n",
  "butteshack:allsyms": "{} {array names ::butteshacksymbols}\n",
  "pbvar": "var {paste set ::$var}\n",
  "radeon21": "{} {return {<@radeon> you know if you think about it hitler wasnt really a bad guy}}\n",
  "gudrow_sentence": "{} {set ret \"\"; for {set i 0} {$i < [rand 15]+3} {incr i} {append ret \"[gudrow_word][expr {[rand 7] ? \"\" : \",\"}] \"}; set ret [string trimr $ret {, }]; return [string toupper [string index $ret 0]][string range $ret 1 end][expr {[rand 3] ? \".\" : \"!\"}]}\n",
  "mnnegromg": "{{a {}}} {rainbow [mnomg $a]}\n",
  "mmmdennis": "{} {magick annotate [magick-scale-composite-bottom-left [img-dennis end-1] [img-sambtmleft] 0.5] 60 10 10 white [wrap [mmm] 20] }\n",
  "mexicow": "{} { join {{  ----------------------------------------- } {         \\ ___/-\\___} {          \\  (zz)\\._____.} {             (__)\\|@@@@@|)\\ } {                 ||,,,,,||} {                 ||     ||}} \\n }\n",
  "kanyefy": "url {. http://kanyelicio.us/$url}\n",
  "draw-blocks": "bitmap {join [map $bitmap {line {join [map [split $line {}] {char {if $char {. ??} {. \"  \"}}}] \"\"}}] \\n}\n",
  "safetyimage": "i {set start_mul [expr ($i-1)/50]; set start [expr $start_mul*50]; set end [expr ($start_mul+1)*50]; if { $start > 0 } {incr start}; set baseurl \"http://safetycenter.navy.mil/photo/images/images-$start-$end/photo$i\"; set response [lindex [http head \"$baseurl.jpg\"] 0]; if {$response == 200} {return \"$baseurl.jpg\"} elseif {$i > 150} {return \"$baseurl-1.jpg\\n$baseurl-2.jpg\"} else {return \"${baseurl}_1.jpg\\n${baseurl}_2.jpg\"}}\n",
  "latexte": "args {latext [latext_escape [join $args]]}\n",
  "suckit": "{} {string map {fuck suck} [fuckit]}\n",
  "vore": "{} {return \"[color black on black]oo[color cyan on cyan]oooooooo[color white on white]oooo[color cyan on cyan]oooooooo[color white on white]oooo[color cyan on cyan]oooo[color black on black]oo\\n[color black on black]oo[color cyan on cyan]oooooooooooooooooooooooooooo[color black on black]oo\\n[color black on black]oo[color cyan on cyan]oooooooooooooooooooooooooooo[color black on black]oo\\n\"}\n",
  "PHP": "{} {. \"Does it scale?\" [checkbox goons]}\n",
  "ourshit": "{} {lindex_random $::ourshit}\n",
  "blackjack_losing": "p { return  [expr [blackjack_get_bid $p]]; }\n",
  "STbikefags": "{} { join $::bikefags \\n }\n",
  "housepart": "{} {lindex_random $::housepart_dict}\n",
  "ulillillia": "{} {. http://i.buttes.org/index.php/http://www.ulillillia.us/images/mountainfun.gif\\nClimbing mountains and high speed movement are a thrill in my mind game.\\nhttp://www.ulillillia.us/features/mindgame/mindgamehome.shtml}\n",
  "uuencode": "str {set r {}; binary scan $str c* d; foreach {c1 c2 c3} $d { if {$c1 == {}} {set c1 0}; if {$c2 == {}} {set c2 0}; if {$c3 == {}} {set c3 0}; append r [uuencodec [expr {$c1 >> 2}]]; append r [uuencodec [expr {(($c1 << 4) & 060) | (($c2 >> 4) & 017)}]]; append r [uuencodec [expr {(($c2 << 2) & 074) | (($c3 >> 6) & 003)}]]; append r [uuencodec [expr {($c3 & 077)}]]; }; return $r; }\n",
  "zalgo": "{} {join [repeat 75 {. \"\\002\\003[gay],[gay][join [repeat [+ 5 [rand 10]] zalgochar] \"\"][rand_ascii]\"}] \"\"}\n",
  "aimtrawl": "{} { smega {aimfish} }\n",
  "mystery": "{} {while [catch * r] {};set r}\n",
  "wiz": "{} {rainbow \"The Wonderful Wizard of Poz (_)_)======D~~~~~\"}\n",
  "obfuscate": "str { return tcl\\ return\\ \\[gudrize\\ \\[q\\ \\[rot13\\ \\\"\\\\u0031\\\"]]]\\[q\\ \\[rot13\\ \\[q\\ 0]]]\\[eval\\ \\[rot13\\ \\\"[rot13 $str]\\\"]]\\[q\\ \\[rot13\\ \\\"\\\\x030\\\"]]\\[rainbow\\ \\[tinfoil\\ \\[q\\ \\[q\\ \\[shittify\\ two]]]]]\\[q\\ \\\\060]\\[gudrize\\ \\[q\\ \\\"\\\\x031\\\"]]\\[rainbow\\ \\[gudrize\\ \\[q\\ 0]]]\\[q\\ \\\\061]\\[gudrize\\ \\[q\\ \\\"1\\\"]]\\[q\\ \\[rot13\\ \\\\u0030]]\\[rainbow\\ \\[tinfoil\\ \\[q\\ \\\\x030]]] }\n",
  "obama_flag": "{} { string map {MILLS CHANGE! {TWO AMERICAS} {GOD DAMN AMERICA}} [edwards_flag]}\n",
  "tyrone": "{{answer {}}} {caption_raw [img-tyrone] \"\\\\large\\\\textbf{\\\\textasteriskcentered bzzt\\\\textasteriskcentered} What is ``[latext_escape [or $answer [niggerphrase]]]?''\"}\n",
  "drink": "{} {return \"[booze_container_word] of [pick 1 {booze_word} 1 {return \"[booze_word] and [booze_word]\"}]\"}\n",
  "rload": "url {eval [wget $url]}\n",
  "do_not_use": "{{args {}}} {. \\1DCC\\1}\n",
  "goons": "{{who {}}} {if {$who eq \"\"} {set who [lindex_random [names]]}; return \"<$who> I thought I saw a goon on the street, so I drew goatstairs on a sheet of paper from my notebook and taped it to my back.  Then I wandered real slow like in front of the guy and he didn't seem to notice.  So I did it again slower, giving him a wink and pointing my finger. Then a white truck pulled up and then I realized it was just a  mailbox.\" }\n",
  "unknown_match_glob_or_regexp": "{string pattern} {if [regexp {^/(.*)/(i)?} $pattern {} r i] {set r [string map {\\\\\\\\ \\\\ \\\\/ /} $r]; if {$i eq \"i\"} {regexp -nocase $r $string} {regexp $r $string}} else {string match $pattern* $string}}\n",
  "go:place_white": "{x y} { go:place_piece $x $y white }\n",
  "charliex": "{{who CharlieX}} {return \"$who came out of the closet to say:\\nIs there a program to test if you have any [shsc_word]s or are you just supposed to notice them?\\nI don't think I have any on my [shsc_word] but it would be nice to know for sure.\"}\n",
  "abeztest1": "{} { info level 1 }\n",
  "openbsd": "{} {return \"Software which OpenBSD uses and redistributes must be free to all (be they people or companies), for any purpose they wish to use it, including modification, use, peeing on, or even integration into baby mulching machines or atomic bombs to be dropped on Australia.\"}\n",
  "sad": "{} {cx :(}\n",
  "ohwow": "{} {head 8 [lmoot \\n[lmiot \\n]]}\n",
  "realwrappad": "{l n} { join [padlinesto [+ 1 $n] [lines [realwrap $l $n]]] \\n }\n",
  "raintrain": "{{name {}}} {smega  {. \"[bold][color [next_in_list {red orange yellow green blue violet}]][train $name]\"} 20 }\n",
  "saq7": "{} { return \"<saq> actually guys that old tired joke doesnt apply anymore because windows server 2008 is more secure than ever\"}\n",
  "days_since_iphone_update": "{} {curse_you_steve iPhone}\n",
  "randfighter": "{{name {}}} { . \"\\\"The [string totitle [string map {\"my \" \"\" \"my-\" \"\" \"-\" \" \"} [random_word]]]\\\" [or $name [fullname]], fighting out of [country_name]\" }\n",
  "paulamid": "{} {subst [string map {RON\\ PAUL {[. \"[ronpaul][color]\"]}} [pyramid \"RON PAUL \"]]}\n",
  "huggles": "name {set size [expr {[rand 20]+5}]; return \"[string repeat \"{\" $size] [strip_color [lindex $name 0]] [string repeat \"}\" $size]\"}\n",
  "parse_sa_thread": "a { lindex [wget \"http://abez.ca:8080/~abez/thread/getparsethread.pl?threadid=$a\"] 0 }\n",
  "aussie": "{} {fart 20061114.html}\n",
  "grbt": "{fg bg args} {join [map [split [strip_color [bgr 11 [join $args \" \"]]] \"\\n\"] {line {. [regsub -all {\\*} $line [color $fg $bg][uchar [next_in_list {20 20 2591 2592 2592}]][color]]}}] \"\\n\"}\n",
  "resolution": "{} { return \"\u0002[upper [name]]'S NEW YEARS RESOLUTION:\u0002 stop [sex_act] [sexpart] for [drug_word].\" }\n",
  "mac_cthulhu": "{} {cthulhu_say [choose \"[mac_feature]\" \"[iphone_feature]\"]}\n",
  "aimlastmeasure": "{{n {}}} {set n [aimname $n];aim -n $n http://$n.on.nimp.org <-- is that your site?}\n",
  "STcockjet": "{} {. \"           _ \\n          /\\\\)\\n         / /\\n     __-- /_\\n_--\\'\\'  / /  \\'\\'_\\n\\'\\'\\'\\'\\'\\'/ /\\'\\'\\'\\'\\'\\'\\n  ___/ /\\n  \\'-( Y)\\n     \\\"\\\" \\n    \"}\n",
  "reshxed": "{} { bgbt pizazz!!!}\n",
  "cga_colours": "{} {next_in_list {00 15 11 14 11 15}}\n",
  "strip_winkies": "{} {. {WINKIE FIX BOT}}\n",
  "lastfm:nameunmap": "name {set ret $name; foreach s [array names ::lastfmnamemap] { if {$::lastfmnamemap($s) == $name } { set ret $s } }; return $ret }\n",
  "mock": "{{who {}}} {let {name {. <$name> [last [log_text [log_grep_nick $name]]]}} [name $who]}\n",
  "helpwanted": "{} {return \"I need a good [job] in the [city] area...know any [ethnic_group] or anything?\"}\n",
  "lilnegro": "{} {return \"\u0002\u000317,1#\u00030,1:\u00034,1O\u0002\u0003\"}\n",
  "cseq": "{a b} {map [seq [chr $a] [chr $b]] {{x} {format %c $x}}}\n",
  "liberalagenda:time": "x { gayagenda:time $x }\n",
  "tv_static": "{{count 20}} {smega { cdraw [list [string map {nig black nog white} [nignog 50]]]} $count}\n",
  "shsc_thread": "{} {subst [lindex_random $::shsc_thread_dict]}\n",
  "master_print_stat": "i { set l [master_get_stat $i]; set o {}; foreach {k} [seq 0 5] { lappend o \"${i}'s Wins on turn [expr 1 + $k] [lindex $l $k]\"; }; return [join $o \"\\n\"];}\n",
  "STnegrodiamond": "{} { join [list \" /\\\\ \" \"/..\\\\\" \"\\\\ O/\" \" \\\\/ \" ] \\n  }\n",
  "n": "{} {columnize [names]}\n",
  "mdl": "{{who mdl}} {return \"<@$who> OH GOD ANOTHER [string toupper [butte_word]] CRAVING\"}\n",
  "STwoman": "{} { return \" //((.\\\".))   \\n \\\\\\\\_)\\\\-/(_.  \\n  `-(.)(.).\\\\ \\n    ) . (,// \\n   (  #  )'  \";}\n",
  "mugu": "{} { return \"http://www.imageput.com/hosted/191611234389823469.jpg\"; }\n",
  "naw": "args { regsub \"^.aim\" [eval $args] \".aim:not\" }\n",
  "rainshsc": "{} {smega {strcat \u0003[gay] [shsc_thread]}}\n",
  "buttesrules": "{} {}\n",
  "lsubtract": "{from items} {set ret [list]; foreach i $from {if {[lsearch -exact $items $i] == -1} {lappend ret $i}}; return $ret}\n",
  "hacker": "str {set ret \"\"; foreach c [split $str {}] {append ret [string [expr {int(rand()*2)? \"toupper\" : \"tolower\"}] $c]}; return $ret}\n",
  "tmf": "{} {bigtext \"2 MINUTES FUNK\"}\n",
  "cutbackon": "{{x funding}} {upper \"you can't cut back on $x! you will regret this!\"}\n",
  "drunks": "{} {smega {pick 1 moira 1 r1ch}}\n",
  "capital": "{} { return \"can i get a venture capital\" }\n",
  "swayzedance": "{} {ajoin \" \" [saqdance] [vflip [STsaq]]}\n",
  "perlop_sort": "{} {?? {cmp <=>}}\n",
  "plural": "word {regsub {ys$} [regsub {ixs$} [regsub {ss$} [strcat $word s] {ses}] {ices}] {ies}}\n",
  "arabwtc": "{{who {}}} {aflip [stampsay -s wtc [concat \"<[name $who]> I remember when I crashed WTC, way back in [regsub -all {(\\d\\d)0(\\d)} [rand 1900 2008] {\\1-aught-\\2}]\"]]}\n",
  "underline": "args {join [map [lines [join $args]] {x {^_ $x}}] \\n}\n",
  "STcsammisL": "{} { join {{  ___  } { /.. \\ } {()o(  )} { \\___/ }} \\n }\n",
  "lolqdb_line": "{{glob {}}} {lindex_random [lfilter *$glob* $::lolqdb_lines]}\n",
  "CKN": "{{who {}}} { return \"    ,==. \\n   /  66\\\\ \\n   \\\\c   o)   [name $who] Said\\n     `) (     What What\\n     /   \\\\   In The Butt\\n  __/   \\\\ \\\\ \\n ((   /\\\\ \\\\ \\\\ \\n  \\\\\\\\  \\\\ `------ \\n  / / /  |    | \\n (_(___)_|    | \" }\n",
  "zenwhens_password": "{} {return \"IT'S THE NAME OF HIS CRAPPY HOARDWARE\"}\n",
  "rot:arotate90map": "{} {return {\"_\" \"|\"  \"-\" \"|\"  \"~\" \"|\"  \"^\" \">\"  \"<\" \"^\"  \">\" \"v\"  \"v\" \"<\"  \"7\" \"\\\\\"  \"/\"     \"\\\\\" \"\\\\\" \"/\"  \"N\" \"Z\"  \"Z\" \"N\"  \"(\" \"n\"  \")\" \"u\"  \"n\" \")\"  \"u\" \"(\"  \":\" \\\"  \";\" \\\"  \\{ \"~\"  \\} \"_\"  \\\" \":\"  \\\" \";\"      \"'\" \".\"  \"`\" \"/\"  \",\" \"\\\\\"  \"H\" \"=\"  \"C\" \" n\"  \"U\" \"C\"  \"c\" \"n\"  \"=\" \"H\"  \"t\" \"+\"  \"r\" \"7\"  \"[\" \"_\"  \"]\" \"~\"  \"i\"     \"-\"  \"I\" \"-\"  \"l\" \"-\"  \"1\" \"-\"  \"!\" \"-\"  \"|\" \"-\"} }\n",
  "typical_mac_user": "{} { typical_mac_user_scheme }\n",
  "caller": "{} {if {[info level] < 2} return else {lrange [map [seq [uplevel {info level}] 1] [& info level]] 1 end}}\n",
  "grids": "{} {return \"\u00034G.\u0003\u00037R.\u0003\u00038I.\u0003\u00039D.\u0003\u000312S. \u0003\u000313\u001f/\\\\\u000f\"}\n",
  "relative": "{} {lindex_random $::relatives}\n",
  "pegasamsay": "args {urlsay http://sopercorp.com/dumb/pegasam.jpg [join $args]}\n",
  "buttesroom": "{} { upper [subst [lindex_random $::buttesrooms]] }\n",
  "saq_hobbies": "{} {. Hobbies: [saq_expert_topic], [saq_expert_topic], seducing cute [plural [cert]]... [oops]}\n",
  "humanjoke": "{} {return saq}\n",
  "string_first": "{command string} {. \"[string $command [string index $string 0]][string range $string 1 end]\"}\n",
  "newsstory": "{} {return \"[join [list [headline] [news_paragraph01] [news_paragraph02] [news_paragraph03]] \\n]\"}\n",
  "pubrand": "{} {publish [giga ??????]}\n",
  "contraband": "{} {return \"contraband ([random_word])\"}\n",
  "dennisgames": "{} {buttemnd [upper > is this a game, or is it real] [img-dennis 1] http://www.moviesoundscentral.com/sounds/playgames.wav}\n",
  "acroformat": "args {set words [join $args]; set word [join [mapx $words w {string index $w 0}] \"\"]; return \"[bold][string toupper $word][bold]: [regsub -all \"(^| )(.)\" [capitalize [join $words \" \"]] \"\\\\1[bold]\\\\2[bold]\"]\"}\n",
  "image-kidpix": "url {magick_overlay $url [?? $::kidpixoverlays]}\n",
  "largeokey": "{} { return \"[color blue]Large Okey[color] [color red]attacks[color]! You take [color red][lindex_random [seq 0 250]][color] damage!\"}\n",
  "myspace_url": "args { set a [first_true $args [aimname]]; return \"http://www.myspace.com/$a\"}\n",
  "Rome": "Rome {return $tcl_Rome_Rome; return $tcl_Rome_Rome; return [tcl_Rome_Rome]}\n",
  "beautypageant": "{{oi {}}} {return \"[name $oi] won the \\\"Ms. [string totitle [unplural [ethnic_group]]] International, [expr {[rand 41]+1960}]\\\" pageant wearing a daring \\\"off-the-[string map {\" \" \"-\"} [body_part]]\\\" number that years earlier would've resulted in a disqualification.\"}\n",
  "crw_lmiot": "{} {subst -nobackslashes [string map {{BUTTES CHAT} {[string toupper [crw_word]]}} [butteschat]]}\n",
  "decode": "str {set ret [list]; foreach line [split $str {}] {scan $line %c val; incr val -59; set line \"\"; for {set i 0} {$i < 5} {incr i} {append line [expr {[bitset val $i]? \"*\" : \" \"}]}; lappend ret $line}; join $ret \\n}\n",
  "asstory": "a { set b {picotux}; lappend b $a ; string map $b $::asstory }\n",
  "kurt": "{{FAGGOT {}}} {return \"KURT LIKES TO TOUCH DICKS WITH [string toupper [name $FAGGOT]]\"}\n",
  "version2": "{} {return \"\\001VERSION [channel]\\001\"}\n",
  "escher": "{} {rainbow [omgwall]}\n",
  "jewfullname2": "{} { choose {Sam Stephenson} {Jonnii Goldman} {Steven Bloch} {Eli Hodapp}}\n",
  "lastlinks": "{} {join [notlast [lfilter *http* [lastlog_text 1000]]] \\n}\n",
  "lolgorf2": "recon {aflip [lolgorf $recon]}\n",
  "psych1": "{} {lindex_random $::psych1}\n",
  "go:spacer": "{} {uchar 2501}\n",
  "dsp2": "args {return \"<@dsp> [repeat [rand 5 14] welshword]\"}\n",
  "bixnood": "{} {return \"mup da doo didda po mo gub bidda be dat tum muhfugen bix nood cof bin dub ho muhfugga\"}\n",
  "jewburn": "{} {return \"burn any who goes by the name of [jewfullname]\"}\n",
  "notification_type": "{} {choose PROBLEM RECOVERY FLAPPINGSTOP FROTTINGSTART FROTTINGSTOP WILLMERGENCY}\n",
  "pee_into_drab": "{{who {}}} {return \" (   ( .--.\\n  \\\\  \\\\/    .      I LIKE TO PEE\\n  /\\\\  \\\\     :   __     INTO [string toupper [name $who]]'S MOUTH\\n / / /_      : /..\\\\\\n (_(___\\\\       \\\\O_/              \\002by [nick]\\002\"}\n",
  "wheelchair": "{} { subst [lindex_random $::wheelchair] }\n",
  "qwantz-code": "words {set code [inject [szip $words {{11 7  } {249 3} {378 4} {513 52} {7 248 } {102 245 } {199 247} {345 249} {298 329 } {497 246} {635 315}}] \"(image http://churchturing.org/w/qwantzoverlay.png)\" {{i v} {. (annotate $i 14 [caadr $v] [cadadr $v] black \\\"[car $v] \\\")}}]; return $code}\n",
  "aimf_cdma": "args {aimify cdma $args}\n",
  "ccrw_word": "{} {set crwl [split [crw_word] \" \"]; if {[llength $crwl] == 1} {lappend crwl \"\"}; c [lindex $crwl 0] [lindex $crwl 1]}\n",
  "STshoe3": "{} {join  {{  ____       } {  )  =\\      } { /    =\\     } { \\      `-._ } {  )__(`\\____)}} \\n }\n",
  "STokey": "{} { return \"  ______     \\n /_\\\\/\\\\/_\\\\    \\n (  \\[.\\]_\\[.\\]__ \\n (_____o---,_)\"; }\n",
  "okey_defense_action": "{} {lindex_random $::okey_defense_dict}\n",
  "talk": "args {return \".say [regsub -all {[^a-z0-9()-,.? ]+} [string tolower [strip_all [join $args]]] {}]\"}\n",
  "encounter": "{{who {}}} {return \"[name $who] has encountered a [level] [pick 1 golem 1 elemental 2 dndcreature 1 dndname]!\"}\n",
  "ubuntu_verb2": "{} {. [string map {us use gam gaming} [string map {ing \"\"} [ubuntu_verb]]] on}\n",
  "dog": "{} {. This just in: [string toupper \"[?? $::buttes_dog_dict] is [bold][?? $::dog_dict][bold].\"]  More at [?? [seq 5 11]].}\n",
  "namerandacro": "{} { randacro [join [split [names] \" |1234567890_\"] \"\"]}\n",
  "dumbstate": "{} {lindex_random $::dumbstates}\n",
  "nam": "{} {subst [lindex_random $::nam]}\n",
  "list_vals": "l {set vals [list]; foreach {key val} $l { lappend vals $val; }; return $vals }\n",
  "STdavid": "{} david\n",
  "v%blog": "{m {c {}}} { putserv \"PRIVMSG $c :\\[\u0002[clock format [clock seconds] -format {%H:%M:%S}]\u0002\\] ${m}\"; }\n",
  "butteshack:randomobj": "{} {subst [butteshack:lookup [choose ! \\$ % ( * | \\} ? /]]}\n",
  "spaceyiff": "{} {ajoin \u000f [pyramid \"\u0003[gay]y\"] [pyramid \"\u0003[gay]i\"] [pyramid \"\u0003[gay]f\"] [pyramid \"\u0003[gay]f\"]}\n",
  "3unmorse": "str {unmorse [unmorse [unmorse $str]]}\n",
  "omgwebcam": "{} {join $::omgwebcam \\n}\n",
  "okeyloot": "{} {return \"The [color blue]Okeys[color] left a chest! You open the chest. Inside was [articleize [choose [blackitem] [mroach_item] [ww_item] [faglame] [rumored_apple_product] [cooking_appliance] [sexpart] [food_word] [drink] [weapon] [niggerword] [name] [al_man_word] [ethnic_group] [sex_fluid] [drug_word] [marginalize] [shsc_word] [animal_word] [furry_noun] [dndname] [undesirables]]]!\"}\n",
  "periodic_metal": "{} {lindex_random $::periodic_metals}\n",
  "hammertime": "{} { return \"hammer: Your polynomial is 6x^2 - 13x - [rand 16]\" }\n",
  "abeznini": "{} {return [ rainbow [repeatblock \"NINI \\nNiNi \\nGOON \\nNIGHT\\nGOONS\" 10] ] }\n",
  "zewb_quote": "{} {. <zewb> I once [random_word] so hard I [random_word]}\n",
  "buttesnet_ad": "{} {embed [tail [head 17 [macro tux]]] \"[color black][crw_word].\\n[color black][onebutan_word].\\n[color black][tranny_word].\\n[b][color black]BUTTESNET[b]\" 5 5}\n",
  "deity": "{} {lindex_random $::deity_dict}\n",
  "aimrand": "args {regsub \"^.aim\" [eval $args] \".aim:rand\"}\n",
  "pp4l": "{} {return \"   _______________\\n  /  /            \\\\\\n /  /              \\\\\\n|  |   |)  |  |)    |\\n|  |   |\\\\  |  |     |\\n|  |                |\\n|  |  |) |) |_| |   |\\n|  |  |  |    | |_  |\\n|  |                |\\n|  |                |\\n|__|________________|\"}\n",
  "aimf_tensegame": "args {aimify tensegame $args}\n",
  "colorize_stamp_pane": "args { ajoin \"[bold][eval [list color] [lrange $args 0 [- [llength $args] 2]]]\" \"\" \"[ST[lindex $args [- [llength $args] 1]]]\"}\n",
  "canadianize": "{{args {}}} {string map {\"?\" \", eh?\" \"!\" \", you hoser!\" \".\" \", eh?\" \"out\" \"oot\" \"oat\" \"oot\"} $args}\n",
  "whiteboy_activity": "{} {lindex_random $::whiteboy_activity_dict}\n",
  "pantshitting": "{_O20 dick2dick ZiRC} {return $rizon; return $pissing_on}\n",
  "rainlet": "args {rainbow [figlet $args]}\n",
  "buttesclique": "{{who {}}} {. \"[name $who]: dude okay I will only say this once. I was part of the buttes clique like, at least three years before you were. I mean no disrespect; I know you are powerful in SCAM. but seriously, I have WAAAAAYY more history than you. doesn't mean we can't be friends, i'm just saying: step off.\"}\n",
  "extend_smile": "smile { if {[rand 6] == 0} { return $smile } { set smile_sides [lindex_random $::smile_components]; set smile_side_times [rand 5]; return [extend_smile \"[string repeat [lindex $smile_sides 0] $smile_side_times]$smile[string repeat [lindex $smile_sides 1] $smile_side_times]\"] } }\n",
  "unknown:2:line/^\\((.*)\\)$/": "{matches args} {expr [last $matches]}\n",
  "randomruleofacquisition": "{} {lindex_random $::rule_of_acquisition}\n",
  "closest": "{x l} {set y [lindex $l 0]; foreach z $l { if {abs($z - $x) < abs($y - $x)} { set y $z } { }}; return $y}\n",
  "kallila": "{} { return \"<Kalle> [uliphrase]\"}\n",
  "ST_tard2": "{} {return \"||        `.   | ' O '/    \\\\ `-' /     |\\n|| (        \\\\   \\\\ `-'/      `-.__     / `.\\n \\\\`-'        )   .-'  --         )        `.\\n  `-'     _.'   (            _.-'    _/\\\\    \\\\\\n     `.       /\\\\_ `-.____..-'     .-' _/    /\\n\"}\n",
  "args": "w {set i -1;set j 0;foreach a [split $w] {incr i;if {$a eq \"--\"} {incr i;break};if {[regexp -- -(.) $a x v]} {if {$j} {array set r [list $q $x];set j 0;continue};set j 1;set q $v} {if {$j} {array set r [list $q $a];set j 0} {break}}};array set r [list args [lrange [split $w] $i end]];return [array get r]}\n",
  "emacs": "{} {return \"I was wondering if anyone had known of a version of Emacs, the redhat programming software. I fell in love with it when i was learning perl, and was hoping someone had a copy for XP.\"}\n",
  "lgrep": "{regex list} {set ret \"\";foreach a $list {if {[regexp $regex $a]} {lappend ret $a}};return $ret}\n",
  "war": "{} {. The war in [country] is a myth. It did not happen. It was made up by the [plural [nationality]] so they could take [random_word] from [country] and [country]. The [country]n people went along with this plan because they were given [food_word] and [sex_fluid] by the [plural [nationality]] who now have an airbase in the Old Town of [city].}\n",
  "if_you_like": "{{thing coffee}} {. If you like $thing, why not try:\\n- More $thing\\n- Harder $thing\\n- [capitalize $thing] every day\\n}\n",
  "definition": "{{who {}}} {return \"\u0002[name $who]\u0002 - noun: a serious disease of the [body_part] affecting [pervert]s, transmitted by [word {^[a-z].*?(?:ing)$}] [unplural [goon_word]]s, especially by [sex_act] [name] or [word {^[a-z].*?(?:ing)$}] [size_word] [food_word ]s. synonyms: [butte_word], [name], [political_word]s\"}\n",
  "q_d": "args {quiet_drudge $args}\n",
  "macsux": "{} {stampsay -s fullcsammis PCs are better than Macs. That is not something that can be debated.}\n",
  "twitter_suicide": "{} {heynot \"The [?? $::train_line_dict] system is temporarily closed following a rash of unexplained [faglame] suicides.\"}\n",
  "image-grids": "url {magick composite $url [magick_id http://churchturing.org/x/grids-overlay.png] 0 0}\n",
  "megadrive": "{} {. \"The Sega Mega Drive (Ã¡Â¬ÃÃ©Â¤Ã Mega Doraibu?) is a 16-bit video game console released by Sega in Japan in 1988, North America in 1989, and the PAL region in 1990. It was sold under the name Sega Genesis in North America as Sega was unable to secure legal rights to the Mega Drive name in that region. The Mega Drive was Sega's fifth home console and the successor to the\"}\n",
  "searchdict": "{dict what} {return \"[lsearch -glob [set ::$dict] *$what*]\"}\n",
  "STdoctor2": "{} {string map [list '--' [?? $::doctor_mouths]] [STdoctor]}\n",
  "end_of_world": "{} {clock format [expr {int(pow(2,31)-1)}]}\n",
  "rig": "{} {return \"You buy a kickass rig, and overclock the hell out of it, then you will get kickass graphics. Simple as that.\"}\n",
  "whatbot2": "{} {smega {subst \"![choose wiki google] [*word]\"}}\n",
  "zoom": "{{height 4}} { join [repeat $height {choose {     -    -  --} {               } {               }  {               }  {               }   {          -  --} {  - =  = --  --}}] \\n}\n",
  "faucet": "{} {return [http://pastebin.com/pastebin.php?dl=fbe7e034]}\n",
  "nethack:simpleroom": "{rx ry} {set x [- $rx 2]; set y [- $ry 2]; set hw [nethack:hwall]; set vw [nethack:vwall]; return [nethack:tlcorner][string repeat $hw $x][nethack:trcorner]\\n[string repeat $vw[string repeat [nethack:lit] $x]$vw\\n $y]\\n[nethack:blcorner][string repeat $hw $x][nethack:brcorner]}\n",
  "diagnosis": "{{who {}}} {if [string equal $who {}] {set who [name]}; stampsay -l -s doctor2 [. $who, [subst [?? $::diagnosis_dict]]]}\n",
  "ultradental": "{} {string map {\"(\" \"[\" \")\" \"]\"} [lisp dental plan]}\n",
  "kallefront": "{} {. \"<Kalle> [lindex_random $::kallefront_gems]\"}\n",
  "disgustabez": "{} {gis [choose \"bill gates\" microsoft \"intellectual property rights\"]}\n",
  "news_paragraph03": "{} {return \"Reaction was quick and swift.  [niggername] [waspsurname] of the [conspiracy_group] lambasted the statement, simply stating \\\"[niggerphrase]\\\"\"}\n",
  "cellphonenumber": "{} {set number [mobileprefix]; while {[string length $number] < 10} {set number \"$number[rand 9]\"}; return \"+1$number\"}\n",
  "blackjack_hit": "p { blackjack_add_card $p [blackjack_draw_card]; return [blackjack_print_player $p]; }\n",
  "nethack:brcorner": "{} { return \\342\\224\\230 }\n",
  "imapc": "{} {. I'm a PC and I [subst [?? $::pc_phrase]].}\n",
  "benchmark": "{} {format \"%.3f urmoms per second\" [expr 1000000./[lindex [time urmom 100] 0]]}\n",
  "fixchargen4real": "{} {eval [wget http://adhd.irule.net/~dukeku/chargen.tcl]; return \"chargen fixed 4 reals\"}\n",
  "lrain": "list {map1 $list {strcat \u0003[gay]}}\n",
  "jnz": "{} {gudrize \"im 5`5 108 lbs im sexy as hell an im single lookin fa da right guy ta holla, so if u liken wat u see holla at me\"}\n",
  "ateam": "{} {return \"\u0002In 1972, an IRC channel was juped by abusive opers for a troll they didn't commit. These men promptly reconnected from a maximum security ssl port to irc.buttes.org. Today, still g-lined from every other network, they survive as soldiers of fortune. If you have a problem, if no one else can help, and if you can find them, maybe you can hire... The [channel]-Team.\"}\n",
  "jewname": "{} {lindex_random $::jewnames}\n",
  "mcse": "{{who saq}} {concat $who: [lindex_random {{fix my} {help me install}}] [shsc_word]!}\n",
  "grouphug2": "{} {join [mapx [split [html [regsub -all \\t [lindex [regexp -inline {<div class=\"content\">\\n <p>(.*?)</p>\\n </div>} [wget http://grouphug.us/]] 1] {}]] \\n] line {concat \"$prefix$line\"}] \\n}\n",
  "lastfm:isListeningOrNew": "{x {now 2000000000}} {if [lastfm:isListening $x] { return 1 } {if {[channel] != \"#onebutan\" && [channel] != \"#fuqbutanz\" && [lastfm:isNewTrack $x $now]} { return 1 } { return 0 }}}\n",
  "clearchannel": "{} {. [capitalize \"[shakti_adjective] [?? $::music_genres]\"] [fm_station_name] [fm_station_mhz] - [subst [?? $::radio_slogans]]}\n",
  "last-twat": "user {lasttwat $user}\n",
  "drug_abuse_words": "{} {return \"Beware of the following language; it is often used by DRUG ABUSERS:\\n\\n â¢ [random_word]\\n â¢ [random_word]\\n â¢ [random_word]\\n â¢ [random_word]\\n â¢ [random_word]\\n â¢ [random_word]\"}\n",
  "STchink2": "{} {return \"\u000307  ________\u000f\\n\u000307 /________\\\\\u000f\\n\u000308 (  \\\\   / )\u000f\\n\u000308 (____o___)\u000f\"}\n",
  "muzemikesay": "args {catbussay <MuZemike> $args}\n",
  "mirror_both": "url {. \"[mirror_left $url]\\n[mirror_right $url]\"}\n",
  "morehits?": "{} {bongback [upper [?? $::affirmative_statements]]}\n",
  "all_straight": "{} { ajoin \"\" [ncock [rand 6]] [flip [ncock [rand 6]]] \"no no the balls have to touch\\nif it's just theheads \\nit's still all straight\" }\n",
  "darren3": "{} {return \"<@darren[choose \"\" _ 1]> [darren_word]\"}\n",
  "hotrod": "{} { return \"cryptomail sux\";}\n",
  "doublehate": "{a b} {return \"[hate $a $b]\\n[hate $b $a]\"}\n",
  "aimf_tabloid": "args {aimify tabloid $args}\n",
  "trannies": "{} { lindex_random $::trannies_dict }\n",
  "cocks": "{} {return \"balls\"}\n",
  "holyfuck": "{} {return \"            _____                   _____  \\n        ,-~\\\"     \\\"~-.  .  \\\"  .  ,-~\\\"     \\\"~-.\\n      ,^             ^. `. .' ,^             ^.\\n     /                 \\\\  ^  /                 \\\\\\n    Y___________________Y   Y___________________Y\\n    | |^~\\\"|^   _ ^|\\\"~^| |   | |\\\"~\\\"|^ _   ^|\\\"~\\\"| |\\n    | !   l   (_) !   ! l   | !   l (_)   !   ! |\\n    l  \\\\  `\\\\.___,/'  /  !   l  \\\\  `\\\\.___,/'  /  !\\n     \\\\  ^.         ,^  /!   !\\\\  ^.         ,^  /\\n      ^.  ~-------~  ,^\\\\`v-v'/^.  ~-------~  ,^\\n      _)~-._______,-~   \\}---\\{   ~-._______,-~(_\\n .--\\\"~           ,-^7' /     \\\\ `Y^-,           ~\\\"--.\\n/               (_,/ ,/'     `\\\\. \\\\._)    ___        \\\\\\n\\\\_____.,--\\\"~~~\\\"--..,__        ___,..--<\\\"~   ~\\\"-.,___/\\n    / (    __,--~ _.._\\\"\\\"~~~~\\\"\\\" ,-\\\"  \\\"-.`\\\\     /~.-\\\"\\n    `._\\\"--~_,.--\\\"~    ~-------~        \\\\ `---' /\\n       \\\"~\\\"\\\"                             \\\"-.__,/\"}\n",
  "mirror_top": "url {set dims [get_image_size $url]; set x [lindex $dims 0]; set y [lindex $dims 1]; set half [magick_id [magick crop $url 0 0 $x [expr $y/2]]]; set flip [magick_id [magick flip $half]]; magick composite $url $flip 0 [expr $y/2]}\n",
  "rncockrow": "a { return [rainbow [ncockrow $a]]}\n",
  "rands": "{{oi 30}} {string map {\" \" \"\"} [lselect_random {\"H\" \"U\" \"L\" \"A\" \"G\"} $oi]}\n",
  "stockgetchr": "html {\n\tif {[llength [regexp -all -inline {<link rel=\"stylesheet\".*mutualfund_styles.css\">} $html]] > 0} {\n\t\tset chrt [regexp -all -line -inline {<span class.?=.?\"ch[rg]\">\\n(.*?)\\n(.*?)\\n} $html]\n\t\tlset chrt 1 [regsub -all {&nbsp;} [lindex $chrt 1] \"\"]\n\t\tlappend chr [lindex $chrt 1] [lindex $chrt 2]\n\t} else {\n\t\tset chrt [regexp -all -inline {<span class=\"ch[rg]\".*?>(.*?)<} $html]\n\t\tlappend chr [lindex $chrt 1] [lindex $chrt 3]\n\t}\n\treturn $chr\n}\n",
  "fetish_porn": "{} {lindex_random $::fetish_dict}\n",
  "sloth": "{} {return \"[lindex_random $::sloth_dict]\"}\n",
  "nanny": "{{who {}}} {return \"\\00304\\x1f/\\00308!\\0034\\\\\\003\\x1f [name $who]: The preceding lines have been flagged by \\x1fIRC NANNY\\x1f as \\\"\\x02[lindex_random $::adjectives]\\x02\\\". Please consult [name] first and have him check the content before opening. \\[\\002This channel protected by \\x1fIrCNaNNY by ArabSoft v14.88\\x1f\\002\\]\";}\n",
  "oh": "{{yeah {}}} {if {$yeah eq \"yeah\"} {return CRAZY\\ BEAT} {error \"lick from the shaft to the dome of the dick\"}}\n",
  "card_heart": "a { return \"$a\\n  _  _\\n ( \\\\/ )\\n  \\\\  /\\n   \\\\/\\n       $a\"; }\n",
  "favouritejb": "{} {return \"http://www.jailbaitgallery.com/index.php?id=[lindex_random $::favouritejb]\"}\n",
  "alternate": "args {join [split $args {}] \\026}\n",
  "ulfheim.net": "img {i.buttes.org \"http://ulfheim.net/pics/onebutan/$img\"}\n",
  "randmacro": "{} {macro [?? [macros]]}\n",
  "suggest": "args {drawtable2 [google_suggest_results_for [join $args]] {default green} {} {left right}}\n",
  "bikecat": "{} { join [list \" /\\\\**/\\\\       |\" {( o_o  )_     |} { (u--u   \\_)  |} {  (||___   )==\\ } {,dP\"/b/=( /P\"/b\\ } {|8 || 8\\=== || 8} {`b,  ,P  `b,  ,P} {  \"\"\"`     \"\"\"`} ] \\n }\n",
  "ur\u0003mom": "{} {bt urmom}\n",
  "web2_name": "{} {lindex_random $::web2_list}\n",
  "sex_fluid": "{} {lindex_random $::sex_fluid_dict}\n",
  "cdr": "l {lrange $l 1 end}\n",
  "trace:tree": "{proc {maxl 3}} {apply {set ttree} [. \"\\$::ttree_${proc}\"]; each $ttree {{cmd l} {if {$l < [uplevel {. $maxl}]} {. \"[string repeat {-} [expr $l - 2]]\\x1f>\\x1f \\002$cmd\\002\"}}}}\n",
  "twp": "{} {. http://threewordphrase.com/[?? [odds [regexp -all -inline {  <a href=\"/(.*?)\\.htm\">} [600~http://threewordphrase.com/archive.htm]]]].jpg}\n",
  "?2": "args {query2 $args}\n",
  "raruler": "{{who {}}} {. \"[name $who]: god, don't you read Daring Fireball?\"}\n",
  "cosinewaveembeddedaflipheartiezscroll": "{} {embed [aflip [cosinewave2 15 <3\\~]] [aflip [omgbeedna]] 10 4}\n",
  "vpost": "{message {subject {}} {poster {}}} {if {[clock seconds] <= ([cache fetch vpost last {. 0}] + 10)} {error \"not so often ngr\"}; cache put vpost last [clock seconds]; set id [vthread]; http post http://zip.4chan.org/v/imgboard.html resto $id name $poster com $message pwd gapp mode regist sub $subject; . posted: http://zip.4chan.org/v/res/$id.html}\n",
  "politicallmiot": "{} {pick 1 {lmoot [thosefuckers]} 1 {lmiot [ourshit]}}\n",
  "rot:iscoloroff": "c {\n    set C $::rotC; \n    if {$c==$C} { return 1; } else { return 0;}\n}\n",
  "blackjack_add_card": "{p card} { set hand [blackjack_get_player $p]; lappend hand $card; blackjack_set_player $p $hand; return $card; }\n",
  "lesscoffee?": "{} {. error: invalid command name \\\"lesscoffee?\\\" - did you mean \\\"morecoffee\\\"?}\n",
  "snake": "{} {return \"  __         \\n <_~\\\\   __   \\n_/ \\\\ \\\\_/  \\\\/|\\n '  \\\\___/\\\\_/\";}\n",
  "darrentube": "{} {return \"\u0002from darren_'s youtube fav list: [lindex_random $::darrenlist]\"}\n",
  "photoshop_pirate": "{} { return \"ATTN We have detected your are running an illegal copy of Adobe Photoshop (TM). [rand 1000] Visit http://adobe.apologies.on.nimp.org/?u=adobe&id=[rand 1000]\" }\n",
  "gc_distance": "{pos1 pos2} {\n\tset pi 3.1415926535\n\tset lat1 [deg2rad [lindex $pos1 0]]\n\tset lon1 [deg2rad [lindex $pos1 1]]\n\tset lat2 [deg2rad [lindex $pos2 0]]\n\tset lon2 [deg2rad [lindex $pos2 1]]\n\tset theta [expr $lon2 - $lon1]\n\tset dist [expr acos((sin($lat1) * sin($lat2)) + (cos($lat1) * cos($lat2) * cos($theta)))]\n\tif {$dist < 0} {\n\t\tset dist [expr $dist + $pi]\n\t}\n\texpr $dist * 3958.9\n}\n",
  "cooking_appliance": "{} {lindex_random $::cooking_appliance_word}\n",
  "img-incog": "{} {image-dicksuck [pick 1 {gis toddler girl} 1 {gis  child beauty pageant}]}\n",
  "notaimfish": "{} { join [lrange [split [aimfish] \" \"] 2 1000] \" \" }\n",
  "phobia": "{} {return \"[lindex_random $::pervprefix]phobia\"}\n",
  "cwget": "{url args} {\n  if {$url eq \"-nocache\"} {\n    return [wget [lindex $args 0]]\n  } elseif {$url eq \"\"} {\n    set url [lindex $args 0]\n  }\n  ceval [list wget $url]\n}\n",
  "goonjob": "{} { lindex_random $::goonjob_dict }\n",
  "all_dicts": "{} {set dict_list [info vars *dict]; set all_dict \"\"; for {set i 0} {$i<[llength $dict_list]} {incr i} {set n [lindex $dict_list $i]; set s \"concat $all_dict \\$::$n\"; set all_dict [eval $s]}; . \"$dict_list\"}\n",
  "spinynorman": "args {return \"[bt DINSDALE?]\"}\n",
  "stash": "args {if {[llength $args] == 0} {cache get stash value} elseif {[llength $args] == 1} {cache put stash value [lindex $args 0];.}}\n",
  "pick": "args { set options [list]; foreach {value block} $args { do_times $value { lappend options $block } }; return [uplevel 1 [lindex_random $options]] }\n",
  "stoolchart": "{} {return \"[stool1]\\n[stool2]\"}\n",
  "gigagaybar": "{} {giga gaybar}\n",
  "erupt2": "{} {return \"\u0002\u00031,5 \u00037,5W\u00031,5 \u00031,14             \\n\u0002\u001f\u00031,5/\u00037,5W\u00031,5\\\\\u001f\u00031,14V O L C A N O\u000f\"}\n",
  "aimsentient": "args {  aim -n [aimname $args] [sentient] }\n",
  "hangman": "{} {return \"   |------| BLRQJPX\\n   |      |\\n  \\\\0/     |\\n   |      |\\n  / \\\\     |\\n          |\\n------------\\n I TRI_D TO F_CK\\n A WHIT_ WOMAN\"}\n",
  "colour": "args {error \"please see a dentist for further assistance\"}\n",
  "aimterrogate": "{{name {}}} {set name [aimname $name];aim -n $name [interrogate $name]}\n",
  "aimf_photoshop_pirate": "args {aimify photoshop_pirate $args}\n",
  "furry_noun": "{} {lindex_random $::furry_noun_dict}\n",
  "pizzahuttacobell": "{} {. http://downloads.pitchforkmedia.com/Das%20Racist%20%26%20Wallpaper%20-%20Combination%20Pizza%20Hut%20And%20Taco%20Bell%20(Wallpaper.%20RMX).mp3}\n",
  "blue": "args {return \"\u000312[regsub \\n [strip_color [join $args]] \\n\u000312]\u000f\"}\n",
  "STmonkey": "{} {return \"\\\"\\\"\\\"::MM::===:::===\\\"\\\"\\\"==///===\\\"\\n     ::        ,-,       ::\\n     ::       :o~o:      ::  \\n      ::.___.-:(O):--..-::;\\n       \\\"=___   '='   ,..-\\\"\\n            :-,    ' :__\\n            \\\\  \\\\     /  :\\n             \\\\  :. .:,__:\\n==ltb:::::===\\\"MM\\\"===::MM==\\n\"}\n",
  "OUR": "args {if {$args eq \"STREETS\"} {return \"WHOSE STREETS\"}}\n",
  "nc_al": "{} {. Albot: [subst [lindex_random $::al_nig]]}\n",
  "flaps": "{} {bgbt \"[llength [names]] FLAPS\"}\n",
  "advice": "{} {return \"If you're a girl playing a pick up [game] game at a party, Do Not Be Skins! This may entice someone not ordinarily accustomed to a woman's half nakedness to start [sex_act] you on the spot.\"}\n",
  "audioconcat": "args { . [http://manimal.prettybrd.com/~leedo/scripts/audioutil.pl?c=concat&a=[join [map $args {url {urlencode [url_stripanchor $url]}}] ,]]}\n",
  "without_first_word": "str { return [string range $str [expr 1 + [string first \" \" $str]] end]}\n",
  "bj_deal": "{} { if {[llength [blackjack_get_player dealer]]>0} { return \"Already dealt!\"; } else { return \"[blackjack_deal] [ajoin \" \" [bj_hand] [bj_dhand]]\";};}\n",
  "anormalize_tag_name": "tag { normalize_tag_name $tag }\n",
  "catagenda": "{{cat {}} {n 5}} { set cat [buttes_cat_or_other $cat]; set starttime [+ [rand 6] 9]; return \"[upper $cat] AGENDA:\\n[join [mapx [szip [seq $starttime [+ [- $n 1] $starttime]] [getnuniq $n catagenda:event]] x {ajoin \" \" \"  \" [gayagenda:time [car $x]] \":\" [wrap [upper [cadr $x]] 30]}] \\n]\"}\n",
  "crwllary": "{} {. \"HILLARY CLINTON LIKES ENGAGING IN [color red][string toupper [crw_word]]\"}\n",
  "troll": "{} {center2 [regsub -all -line {<strong style=\".+?\">(.+?)</strong>} [last [regexp -inline {<p style=\".+?>(.+?)</p>} [wget http://rolloffle.churchburning.org/troll_me.php]]] {\\1}]}\n",
  "unknown:1:cmd/^U\\+([0-9a-fA-F]+)$/": "{matches args} {uchar [last $matches]}\n",
  "date": "{} {choose [swinglerdate] [kmdate]}\n",
  "abuse": "{{name {}}} {act \"[string toupper [regsub {ing} [sex_act] {s}]] [name $name]\"}\n",
  "alphabet": "{} {return \"AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZZ\"}\n",
  "chews": "{} {act \"CHEWS :]~\"}\n",
  "swineflu": "{} { string map {\"pig iron\" \"swine flu\" } [pigiron]}\n",
  "jabon": "{{who Sarah}} {regsub -all Sarah [join $::jabon_lines \\n] $who}\n",
  "shakti_adjective": "args {lindex_random $::shakti_adj_dict}\n",
  "install": "{package {base http://weasel.localghost.us/}} {eval [wget $base$package.tcl]}\n",
  "stewie": "{} {return [ajoin \"\" [STgoon] [STheart] [flip [regsub {]-\\[} [STgoon] {]m[}]]]\\n[center \"OH MY GOD\" 38]\\n[center \"STEWIE IS MY FAVOURITE CHARACTER TOO\" 38]}\n",
  "utf_is": "char {~http://givingin.org/unicode/id/[urlencode $char]}\n",
  "ping": "{} {return \"pong\"}\n",
  "smallcaps": "args {string map [smallcap_map] [string tolower [join $args]]}\n",
  "nicechair": "{} {. [img-nicechair]  [arcade \"nice chair!\" pabom 6]}\n",
  "saq4": "{} {saqsay \"Excuse me sir but can you tell me please which way to [indian_city].\"}\n",
  "sux": "args {return \"K combinator in my anus\"}\n",
  "month": "{} {return [lindex_random $::month]}\n",
  "ultraseinfeld": "{{who {}}} {if {$who eq \"\"} {set who [lindex_random [names]]}; return \"<$who> and what's the deal with [mood_word] [goon_word] [strip_u [fetish_porn]]?\"}\n",
  "unsort_next": "lname {\nset key [sha1 $lname]\nif ![cache exists unsort_next $key] {\ncache put unsort_next $key $lname\n}\nset list [cache get unsort_next $key]\nset sel [next_in_list $list]\nset last [expr [llength $list] - 1]\nif {$sel == [lindex $list $last]} {\nset unsorted [unsort $list]\ncache put unsort_next $key $unsorted\n}\nreturn $sel\n}\n",
  "aimname": "{{name {}}} {if {$name eq \"\"} {return [rand_aim]} {return [stripcolon $name]}}\n",
  "InsaneGame": "{} {return \"\u000308A\u000304B\u000313S\u000312O\u000311L\u000309U\u000308T\u000304E \u000313F\u000312A\u000311G\u000309G\u000308O\u000304T\u000f\"}\n",
  "catbus_pedo_review": "{} {}\n",
  "irix": "{} { mega say \"NO ONE CARES\" }\n",
  "neccomid": "{} {return [pyramid yiff\\ ]}\n",
  "cockrow": "{} {return \"   _     _     _     _     _\\n  /\\\\)   /\\\\)   /\\\\)   /\\\\)   /\\\\)\\n / /   / /   / /   / /   / /\\n( Y)  ( Y)  ( Y)  ( Y)  ( Y)\\n \\\"\\\"    \\\"\\\"COCK\\\"\\\"ROW \\\"\\\"    \\\"\\\"\"}\n",
  "blogger": "url {regsub {(http.*/)(s\\d+)(/.*)} $url {\\1\\2-h\\3}}\n",
  "randomdcc": "{} { [choose randomdccsend randomdccchat] }\n",
  "image-cumon": "img {magick_overlay [~magick flip $img] http://churchturing.org/x/cum-on-overlay.png}\n",
  "porkrocket": "{} { return \"http://vampire.houseofdestruction.com/players_TEST.JPG\" }\n",
  "nospoon": "{{bend bend} {spoon spoon}} {return \"Do not try to $bend the $spoon. That's impossible. Instead, only try to realize the truth: there is no $spoon. Then you'll see that it is not the $spoon you $bend, it is only yourself.\"}\n",
  "urbanquote": "{args} {. [join $args]: [strip_spaces [html [strip_html [last [regexp -inline {&lt;div class=.example.&gt;(.*?)&lt;/div&gt;} [core::curl http://www.urbandictionary.com/define.php?term=[join $args +]]]]]]]}",
  "bfucker": "{} {return \"   .@@@@@.\\n  /       \\\\\\n /  6 6    \\\\   stop eyeing me,\\n(    ^     ,)   Baby Fucker!\\n \\\\   c     /-._\\n  `._____.'    `--.__\\n         \\\\ /         `/``''''-.\\n           Y    7     /         :\\n          |   /     |  .--.     :\\n          /  /__     \\\\/    `.__.:.____.-.\\n        /  / / `'''`/    .-'..____.-.   \\\\\\nB jgs _.-'  /_/      (                 \\\\-. \\\\\"}\n",
  "drudgeremake": "{} {string toupper [subst [join [lindex $::drudge_headlines 4]]]}\n",
  "aimdeon": "{{who {}}} {set line [regsub {^<@?[^>]+> } [strip_all [lindex_random [split [randeon] \\n]]] \"\"]; if {$who eq \"\"} {aim $line} {aim -n $who $line}}\n",
  "chatzilla": "{} {return \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ O\\ \\ \\ \\ \\ \\ \\ \\ _.-_\\n\\ \\ PUNTME\\ RIDES\\ \\ \\ \\ \\ \\ \\ \\ <|\\\\\\ \\ \\ __.'\\ \\ o\\ \\\"-.\\n\\ CHATZILLA\\ INTO\\ \\ \\ \\ ___/---\\\"\\\"\\ \\ \\ \\ \\ \\ \\ ,,,'\\ \\ Grrr\\n\\ \\ \\ \\ BATTLE\\ \\ \\ \\ __--\\\"\\ \\ \\ L\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ __\\ ^^\\;\\n\\ \\ \\ \\ \\ \\ ____--\\\"\\\"\\ \\ ___\\ \\ \\ \\ \\ \\ \\ \\ \\ _-\\\\\\\"\\ \\ \\ `\\\"\\\"\\n\\ \\ -===-------\\\"\\\"\\\"\\ \\ \\ \\\"(\\ \\ \\ __-\\\"\\ \\ ,\\}\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ .'_/\\\"\\\\\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ .'/\\\"\\ \\ `\\\\`._\\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\\"-_c\\ \\ \\ \\ \\\"\\ \\ '}\n",
  "rainboner": "{size who} {return [rainbow \"[angryboner $size] for $who\"]}\n",
  "jakk": "args {. dicks}\n",
  "litany": "{{a fear}} {return \"I must not fear the [subst $a]. Fear of [subst $a] is the mind-killer. Fear of [subst $a] is the little-death that brings total obliteration. I will face my fear.  I will permit it to pass over me and through me. And when it has gone past, I will turn the inner eye to see its path. Where the fear has gone there will be nothing, only [subst $a]. Only I, the [subst $a], will remain.\"}\n",
  "dec2bin": "int {binary scan [binary format I $int] B* res; return [string range $res [expr ([string length $res] - 1) - int(log10($int)/log10(2))] end]}\n",
  "image-in-space": "url {magick_overlay $url http://churchturing.org/w/spaceoverlay.png}\n",
  "irssi": "{} {join {A [A [[A [[[A {FUCK YOU IRSSI}} \\n}\n",
  "use_flag": "{} {pick 1 {return \"\u0002\u000312-[lindex_random $::use_flags]\u000f\"} 1 {return \"\u0002\u00034+[lindex_random $::use_flags]\u000f\"}}\n",
  "maplines": "{string arg block} {join [mapx [split $string \\n] $arg $block] \\n}\n",
  "test2": "a { if {$a == [upper \"what\"]} { return 1 } { return 0 }}\n",
  "jnzvid": "{} {return \"I have a [goon_word] video of jnz [sex_act] [random_word] with some [ethnic_group]. I'm willing to [act_word] it for only five bucks\"}\n",
  "sum_up_to": "n {. \"The sum of the numbers 1 up to $n is\" [expr ($n*($n + 1))/2] }\n",
  "blackname": "{} {lindex_random $::blackname_dict}\n",
  "mojave": "{} {. \"On [future_date], Microsoft will take [expr \"round(1000*rand())\"] [os] users and introduce them to our new [city] OS. Imagine their surprise when they find out it's [os].\"}\n",
  "atotem": "a { return [ajoin \" \" \\n\\n$a\\n\\n\\n$a \"\" [totem] \\n\\n\\n\\n$a\\n\\n\\n$a] }\n",
  "menards": "{} {menardsback [upper save big money at menards]}\n",
  "swede_city": "{} {?? $::swede_city}\n",
  "pad_and_crop": "{str length} {string range [pad_line $str $length] 0 [- $length 1]}\n",
  "seq": "{a b {inc 1}} {\r\n\tif {$a > $b} { set a [K $b [set b $a]]; set rev 1 }\r\n\tset rev 0; set ret [list]\r\n\tfor {set i $a} {$i <= $b} {set i [next $i $inc]} { lappend ret $i }\r\n\tif $rev {return [lreverse $ret]}; return $ret\r\n}\n",
  "laser2": "{} {return \"   ___________\\n~Y/ =====-__|~  -  - = [rainbow 8=======D]\\n  / |L)~~~\\n  |_|             nigga where my bazooka be at\"}\n",
  "aimmao": "args {aim -n [aimname $args] [mao]}\n",
  "alexjoneskryptonite": "{} {return [aflip [fluoride]]}\n",
  "quid": "{} {set rate [convert 1 gbp usd]; set gbp [lindex $rate 0]; set usd [lindex $rate 3]; if {$usd < ($gbp*2)} {set color red} {set color green}; return \"[color $color]${rate}[color]\"}\n",
  "dshate": "{} {?? $::dshate_dict}\n",
  "aah": "{} {. \"tcl aah\"}\n",
  "buttesmenusolo": "{} {box [box \"\u0002\u001f        ~~ Restaurant LÃ¨ Butte ~~        \u0002\u001f\\n\u001fEntrees\u001f:\\n  [menu_food_item]\\n  [menu_food_item]\\n  [menu_food_item]\\n  [menu_food_item]\\n\u001fBeverages\u001f:\\n  [menu_drink]\\n  [menu_drink]\\n  [menu_drink]\"]}\n",
  "bj_finish": "{} { return [bj_done]; }\n",
  "jewplaque": "{} {rain [strip_all [box [embed [hardwrap [subst [string repeat {[jewfullname] } 100]] 80 8] [join [lrange [split [box [jews]] \\n] 1 end-1] \\n] 13 3]]]}\n",
  "choose_uniq": "{n f {o {}}} { getnuniq $n $f $o }\n",
  "betray": "{} {lindex_random $::betray_word}\n",
  "unknown:2:cmd/^(.)(_+)\\1/": "{matches args} {expand {} a b $matches; return $a${b}_$a}\n",
  "aimjohnson": "args {aim -n [aimname $args] \"I spend \\$24 a month on tube socks because I pound my Johnson into them daily\"}\n",
  "blackberry": "{{who {}}} {rocketcocksay [wrap \"[bb_phrase] [choose \"THINK ABOUT IT\" \"Check MATE\"], [name $who]\" 40]}\n",
  "fatnigger": "{{glob {}}} {stampsay -s goonigger [niggerize [join [lindex_random [lfilter *${glob}* [eval [wget http://www.fatgoon.com/blog/all.tcl]]]]]]}\n",
  "tawt": "args {lindex [twitter_submit [reverse [strip_color [join $args]]]] 2}\n",
  "blackjack_initialized": "{} { return [blackjack_get_bid dealer]; }\n",
  "care": "{} {nerdsay \"[randcare]\"}\n",
  "hypnotrain": "{} {return [ajoin \" \" [. [bold] [hypnotic]] [rainbow [hypnotic]] [. [warhol_colorize hypnotic]]]}\n",
  "sexpartade": "{{who {}}} {set part [sexpart]; return \"[name $who] is a real \\\"[plural $part] into ${part}onade\\\" sort of feller\"}\n",
  "livejournal": "{{who {}}} {if {$who eq \"\"} {set who [lindex_random [names]]}; return \"topic: [seinfeld_word]\\nlast night my boyfriend tried to get me to do [strip_u [fetish_porn]] with him, [face] but I didn't want to because I was [mood_word] [face] and i was totally [mood_word] when he broke up with me for my friend $who [face]\"}\n",
  "gay_todo_item": "{} {. \"[todo_box] [gayagenda:event]\"}\n",
  "sperm": "a {return [repeatblock \"     _     o88888o \\n _.-\\\"\\\"8o_o88888888D\\n       \\\"'\\\"\\\"\\\"88888\\\" \" $a]}\n",
  "slot_pull_stamps": "{} { set stamps [info procs ST*]; list [?? $stamps] [?? $stamps] [?? $stamps] }\n",
  "gruberize": "words {magick annotate http://farm4.static.flickr.com/3657/3632243047_7d16b5fa57_o.jpg 32 330 305 black [wrap $words 19] ComicSans.ttf}\n",
  "nmap": "{} {return \"Starting nmap 4.11 ( http://insecure.on.nimp.org/nmap/ ) at [clock format [clock seconds] -format \"%Y-%m-%d %H:%M\"] CDT\\nInteresting ports on [join [random_word].[random_word][tld] {}] ([rand 255].[rand 255].[rand 255].[rand 255]):\\nPORT      STATE    SERVICE\\n[smega {format \"%s %s %s\" [concat [eval rand 65535]/tcp] [lindex_random {{open    } {closed  } {filtered}}] [random_word]}]\"}\n",
  "evenlist": "l {set o [list]; foreach {e odd} $l {lappend o $e;}; return $o}\n",
  "ncock_test": "{{size 7}} {if {$size < 0 || $size > 7} {error \"COCK SIZE OFF THE CHARTS\"}; set s [string repeat \" \" [expr {$size+1}]]; set glans \"$s _ \\n$s/\\\\)\"; set balls \"( Y)\\n \\\"\\\" \"; set shaft {}; for {set i 0} {$i < $size} {incr i} {lappend shaft \"[string repeat \" \" [expr {$size-$i}]]/ /\"}; return $glans\\n[join $shaft \\n]\\n$balls}\n",
  "catbusname": "{} {set cc [concat $::disease_dict $::penis_dict $::drug_dict $::niggerwords $::jewnames $::jewsurnames $::::muslim_firstname]; set w [lindex_random [lsearch -inline -regexp -all $cc \"\\[aeiou\\]t$\"]]; set w [string map {{ } \"-\" \"it\" \"at\" \"et\" \"at\" \"ot\" \"at\" \"ut\" \"at\" } $w]; return \"\u0002$w\u0002bus\"; }\n",
  "crw_phrase": "{{who {}}} {. \"[name $who], [?? $::crw_phrase]\"}\n",
  "jmax": "{} {. [air Jmax GAYmax]}\n",
  "pebkac_hey": "{} {. \"<pebkac> hey guys i just got [choose engaged divorced \"a craving for [crw_word]\" \"my new backpack\"]\"}\n",
  "hcroom": "{} { upper [subst [lindex_random $::hcroomlist]] }\n",
  "rorschach": "{} {aflip [gaydient 15]}\n",
  "c4block": "v { return \"[ajoin \"\" [arotate270 $v] $v]\\n[ajoin \"\" [arotate180 $v] [arotate90 $v]]\"}\n",
  "cgobble": "{{idiot {}}} {return \"           .-.\\n   .;;;;. ( ^_>  @=====8   *Gobble Gobble*\\n <;<;  \\\\;>\\\\        S T O P\\n<;<;   '-.>) \\\\     being such a\\n<;<; <'=.    |     COCK GOBBLER\\n <;<; '-     /     [name $idiot]\\n  <;,\\\\.\\\\--'`\\n     `==`==\"}\n",
  "cellinsulting": "{} {smega {aiminsulting [cellphonenumber]}}\n",
  "go:type": "gb {lindex $gb 0 }\n",
  "black_figure": "{} {lindex_random $::black_figures}\n",
  "noconsonants": "args {regsub -all -nocase {[bcdfghjklmnpqrstvwxyz]} [join $args] \"\"}\n",
  "random_word2": "{} {set dict [?? [concat [info procs *_word] [info vars ::*_dict]]]; set proc [regsub {dict$} $dict {word}]; return [$proc]}\n",
  "bigbuttes": "{} {return \"[bgt [butte_word]s]\"}\n",
  "youtube_comic_frame": "{} {let {art {box [embed [canvas 35 12] $art 2 [- 12 [llength [lines $art]]]]}} [ajoin \" \" [wrap [youtube_comment] 19] \\n\\\\ \\n[[lindex_random $::small_stamp_dict]]]}\n",
  "sportsteam": "{} {return \"The [city] [string totitle [choose [plural [marginalize]] [ethnic_group]]]\"}\n",
  "abez2": "{} {fart 20070214.html}\n",
  "puntme7": "{} {each [lines [puntme6]] {l {. \"\\003[next_in_list $::mexico_colours]$l\"}}}\n",
  "ignore": "{} {return \"I have put you on a permanent ignore, public and private. I have found you disturbing, rude and generally not worth talking to. According to the channels you hang on, it strengtens the effect of wanting to put you on ignore because of my lack of interest in you as a person. This message is not meant to be rude to you, just to inform you that i won't see anything of what you type from now on.\"}\n",
  "imacop": "{} {set who [lindex_random [names]]; return \"$who: no im a cop and u just tired to cyber my forteen year old kidno im going to call the cops on u\";}\n",
  "barjoke": "{{n {[niggerword]s}}} {subst \"So this [unplural $n] walks into a bar and says to the bartender \\\"Gimme a bottle of [booze_word].\\\"  The bartender says \\\"Hey, we don't serve $n in here!\\\"  So the [unplural $n] says \\\"Don't serve $n? [string toupper [niggerphrase]]!\\\"\"}\n",
  "overheard_people": "{} {lindex_random $::overheard_people}\n",
  "map": "{list block} { set result [list]; foreach i $list { lappend result [apply $block $i] }; return $result }",
  "mega": "{cmd args} {smega [concat $cmd $args] 5}\n",
  "moira_marine": "{} {embed [ajoin \" \" [marine_comic_frame] [marine_comic_frame2]] jgs 85 14}\n",
  "okeyline": "{} {return \"  _____\\n /(.)  \\\\ \\n(  ,|,(.) \\n \\\\_[color red]<->[color]_/   ï¿½_o   ï¿½_.\"}\n",
  "dolphin": "{} {. [lindex_random $::dolphinlol] [dsmile] [kill_verb] all [ops] [dsmile] [lindex_random $::dolphinlol] [dsmile]}\n",
  "pledge": "args {set a [first [join $args \" \"] [upper [disease_word]]];return \" ARE YOU READY TO TAKE THE $a PLEDGE?   I PROMISE IF I GET $a TO VISIT AS MANY MALLS AS I CAN. IN THE EVENT OF MY POSSIBLE DEATH I WILL TRY TO COVER UNSUSPECTING PEOPLE IN MY GERMS AND HUMAN GOO\";}\n",
  "al2": "{} {return \"[join [mapx [lines [overheard]] x {concat <Al> $x}] \\n]\\n[lolqdb_line Al]\"}\n",
  "aodfijasdlfaksnb": "{{num 32}} {randomRangeString $num}\n",
  "LOL": "args {return \"LOL ---> $args <--- LOL\"}\n",
  "cockestories": "{} {string toupper [subst [join [lselect_random $::cocke_headlines 10] \\n]]}\n",
  "chinkernews": "{} {chinkerize [singanews]}\n",
  "kallebooner": "{} kalleboner\n",
  "hyphenate": "str {string map {_ - { } -} $str}\n",
  "buttesfort": "{} { ajoin \" \" [buttesfort:fort] \"BUTTES COMPOUND LEVEL [+ 1 [rand 9]]\\n-----------------------\\n\\n[buttesroomlist]\" }\n",
  "trinity_news": "{} {return  \"[fundamentalist_christian] was arrested today under allegations that he was involved in [sex_act] with underage girls\"}\n",
  "STfrog": "{} { join {{  oO)-.   } { /__  _\\  } { \\  \\(  | } \"  \\\\__|\\\\ \\{ \" {  '  '--' }} \\n}\n",
  "cutbackify": "url {set sized [magick resize_to_fit [magick grayscale $url] 63 79]; set dims [get_image_size $sized]; set x [lindex $dims 0]; set y [lindex $dims 1]; set xoff 0; set yoff 0; if [expr $x < 63] {set xoff [expr (63-$x)/2]}; if [expr $y < 79] {set yoff [expr (79-$y)/2]}; magick composite http://cryptosystem.org/images/sa/cutback_blank.png [magick_id $sized] [expr 11 + $xoff] [expr 11 + $yoff]}\n",
  "aim_nimplink": "{name link} { aim -n $name \"<a href=\\\"[nimpify $link]\\\">$link</a>\" }\n",
  "randmeasure5": "{} {return \"http://[singlerandomword].on.nimp.org/download/[virusfile]/?u=[butte_word]\"}\n",
  "sudo": "args {. [name] is not in the sudoers file. This incident will be reported.}\n",
  "procon": "{} {pick 1 {return \"pro\"} 1 {return \"anti\"}}\n",
  "ddb": "{} {regsub \"^(.-{25})(-{25})\" [box [embed [canvas 75 16] [wrap [arabnews] 75] 2 2]] \"\\\\1\\[\\x1f \\002D\\002AILY \\002D\\002ARREN \\002B\\002ULLETIN \\x1f\\]\"}\n",
  "cutbackify2": "url {magick_scheme (let ((cbimg (image http://i.buttes.org/http://cryptosystem.org/images/sa/cutback_blank.png)) (sized (resize_to_fit (grayscale (image $url )) 63 79)) (x (width sized)) (y (height sized)) (xoff (if (< x 63) (/ (- 63 x) 2) 0)) (yoff (if (< y 79) (/ (- 79 y) 2) 0))) (composite  cbimg sized (+ 11 xoff) (+ 11 yoff)))}\n",
  "track_urmom": "args { return {{{ULF'S HOUSE}    {1:34 AM}    DELIVERED}}}\n",
  "flip": "str {set str [addspaces [llength [split $str \\n]] $str]; set ret [list]; foreach line [split $str \\n] {set l \"\"; set v [set u [empty_formatting]]; foreach {s x} [lreverse [split_on_formatting $line]] {set s [string map $::flip_pairs [string_reverse $s]]; set v $u; set u [parse_formatting $x $u]; append l [unparse_formatting $u $v]$s}; lappend ret $l}; join $ret \\n}\n",
  "alert1": "{} {return \"\u00034,8\u0002/!\\\\\u000f\u00038,4\u0002/!\\\\\u000f \u00034\u0002octalc0de computer adventures\u000f \u00038,4\u0002/!\\\\\u000f\u00034,8\u0002/!\\\\\u000f\"; proc alert {} {alert2}}\n",
  "refart": "n {re $n [sfart]}\n",
  "rot:max": "{a b} { if {$a > $b} { return $a; } { return $b;}}\n",
  "frot": "{{name {}} {giver {}} {receiver {}}} {return \"[name $name] is willing to pay good money to watch [name $giver] [crw_verb] with [name $receiver]\"}\n",
  "bfg": "{} {tcl return \"(\\\\__/)   1F U U|\\\\|D3R574|\\\\|D \\n(='.'      7|-|15 7|-|3|\\\\| U R F4G\\n(\\\")_(\\\")\"}\n",
  "knowhim": "{{word {}}} {if {$word == \"\"} {set word [word \"im$\"]}; string map {her him} [knowher $word]}\n",
  "entendre": "{{noun {}}} {if {$noun eq \"\"} {set noun [random_word]}; . I [regsub {(es|s|ing|e)$} [verb] {}]ed her $noun ifyouknowwhatimean!}\n",
  "mouth": "{} {return \"to tcl ass\"}\n",
  "weed": "{} {lindex_random $::weed_dict}\n",
  "<3": "args {ajoin \" \" [bt [nick]] [STheart] [bt [join $args]]}\n",
  "chr": "c {scan $c %c x; set x}\n",
  "dune4christ": "{} { smega {aimf_dune [raim christian]} }\n",
  "friendzone": "{} { . Rape is the only option off of this ladder. This message proudly brought to you by [choose roofies GHB tequila] }\n",
  "scheissemid": "{} {pyramid \"jew \"}\n",
  "randact": "str {[pick 1 \"inefficientact $str\" 1 \"act $str\"]}\n",
  "upperjoin": "args { join [upper [join [join $args]]] }\n",
  "set_myweather": "airport { if {[nick] == \"kalleboo\"} {set ::myweather([nick]) esms} else {set ::myweather([nick]) $airport}}\n",
  "C++": "{} { . \"[CamelCase [string tolower [random_word]]]()[choose . ->][camelCase [string tolower [random_word]]]()[choose . -> \" << \"][camelCase [string tolower [random_word]]][choose ++ () .c_str()];\" }\n",
  "fullname": "{} {eval [lindex_random [info procs ?*fullname]]}\n",
  "mohammedattack": "{} { return \"[color blue]Mohammed[color] used [color red]PLACEHOLDER attack![color]\\nYou take [color yellow]X[color] damage!\"}\n",
  "master_clear": "i { array unset ::mastermind $i }\n",
  "onnotice:push": "what {set ::onnotice_list [lreplace [linsert $::onnotice_list 0 $what] end end]}\n",
  "twinkture": "{} {pt twink}\n",
  "Noah": "{} { . \"I'm a gay little boy\"; }\n",
  "eurasia": "{} {return \"The War on [string totitle [word {^[a-z].*?(?:or)$}]] is about bringing [word  {^[a-z].*?(?:dom)$}] to [country_name] and has nothing to do with [element_word].\"}\n",
  "jenk": "{} {embed [embed [embed [canvas 5 12] [STass] 4 1] [STmoira] 1 6] \"/[color black on green]_ `[color]\\n[color black on green]  `[color]\" 2 10}\n",
  "overheardintoronto": "{} {set one [canadian_object]; set two [canadian_object]; if {$one eq $two} {append one \" #1\"; append two \" #2\"}; return \"$one: [choose [canada] [welcometocanada]]\\n$two: [string map {\".\" \", eh?\" \"?\" \" eh?\" \"out\" \"oot\"} [[choose albot niggerphrase cached_onehug mystic]]]\\n$one: [string map {\".\" \", eh?\" \"?\" \" eh?\" \"out\" \"oot\"} [overheardline]]\"}\n",
  "thanksgiving": "{} {join [mapx [lines [stampsay -s turkey \"Today we give thanks for [fatcookingword]ed [choose [food_word] [disease_word] [penis_word] [dnd_word]], [choose [food_word] [disease_word] [penis_word] [dnd_word]] ala [jewname] con [jewsurname], [80sreference_word], '[act_word]' [drug_word] and [fatcookingword]ed [choose [food_word] [disease_word] [penis_word] [dnd_word]]. Gobble Gobble.\"]] x {concat [color yellow on black]$x}] \\n}\n",
  "polish_food": "{} {choose \"kotlet schabowy\" \"kasza gryczana ze skwarkami\" \"golonka\" \"gulasz\" \"nalesniki\" \"kaszanka\" \"makowiec\" \"krowki\" \"pqczek\" \"cepeliny\" \"okon smazony, w zalewie octowej\" \"flaczki z pulpetami\" \"kawior po zydowsku\" \"zupa grzybowa po kurpiowsku (z gqsek)\"}\n",
  "thinkaboutit2": "who {return \"[lindex_random $::fundie_phrases] [albot] [choose \"THINK ABOUT IT\" \"Check MATE\"], [name $who]\"}\n",
  "chathard": "{} {wt2 \"CHAT HARD\"}\n",
  "sgu": "{} {bigtext \"SGERN UPDATE:\"}\n",
  "penguin": "{{fart {}}} {if {$fart eq \"\"} {set fart \"I LIKE LINUX AND GETTING KICKED IN THE BALLS AND FACE\"}; stampsay -s penguin $fart}\n",
  "czirc": "{} {return \"\u000314,11         |     \u00031,11)                           \\n\u000311,11       \u000315,15   \u000314,14 \u000311,11 \u000315,15  \u00031,15(\u000314,14 \u00032,11    THX FOR FLYING ZIRC!   \\n\u000311,11       \u000315,15   \u000314,14 \u000311,11 \u000315,15  \u00034,15*\u00037,14<\u00031,11-'   \u00032,119/11 NEVER CONNECT    \\n\u00031,11 '->-  \u000315,15   \u000314,14 \u000311,11 \u000315,15   \u000314,14 \u00031,11`                 \u000311,11by egg   \"}\n",
  "lindex_random_ne": "list {lindex $list [expr [expr [rand [llength $list]]/2]*2+1]}\n",
  "p_a": "{{glob {}}} {return [pua_anecdote $glob]}\n",
  "trickorgoon": "{} {return \"[color orange on black]You knocked on the door and got some [choose \"gummy crunch\" \"ramen\" \"GAME FUEL\" \"ranch dressing\" \"Fucking Delicious.\" \"baconators\" \"bacon\" \"tacos\" \"Chipotle\" \"Big Macs\" \"footlong Subway\" \"mayo sandwiches\" \"Trader Joe's peanut butter cups\" \"bacon salt\" \"sugarbutter\" \"Arby's\" \"Krispy Kreme\" \"type-2 diabetes\" \"choco (that's what I call chocolate)\" \"Doritos\" \"twinkies\"]\"}\n",
  "bis": "args {force_image [urldecode [lindex_random_ne [regexp -all -inline  {imgurl\\\\x3d(http://.*?)\\\\x26} [6~http://www.bing.com/images/search?q=[urlencode [join $args \"+\"]]]]]]}\n",
  "about": "{} {return [bgt SHANIQUA v4.20]}\n",
  "crashmac": "{} {. http://[underscoreize [random_word]]?Ã°Â©Â§Â¢}\n",
  "tootify": "args {set args [join $args]; regsub -all -expanded { \\w{6} } $args \"toot\"}\n",
  "hijack": "{} {return \" _______\\n/   /   \\\\------------------+--.\\n|   |       HI JACK THIS   |  |~~~~~~~\\n\\\\___\\\\___/------------------'--'\"}\n",
  "load_racistmap": "{} { foreach {a b} $::racism_tuples { array_lappend racistmap $a $b } }\n",
  "incog5": "{} {return \"< incog> guys please stop picking on the \\\"[niggerword]s\\\"\"}\n",
  "spew": "{{n 63}} {return [subst [regsub -all {\\s+} [gudrize [split [string repeat \\  $n] {}]] {[rand_char]}]]}\n",
  "buttesrpg": "{} {return \"\u0002\u001fWelcome to ButtesRPG v1.0\u001f\u0002\\n Please choose a race: [string toupper [checkbox [niggerword] [niggerword] [niggerword] [niggerword]]]\\n Please choose a name for your character: [string toupper [checkbox [zulu_word] [zulu_word] [zulu_word]]]\\n Your character's occupation? [string toupper [checkbox [job] [job] [job]]]\\n----------\\n[rpg_adventure]\"}\n",
  "nwotube": "{} {return [lindex_random $::nwoyoutube]}\n",
  "whoisthecoolest": "{} {return \"not bewn\"}\n",
  "tracer%tree": "{proc args} {set call [first [join $args]]; lappend ::ttree_${proc} $call [apply incr [. \"::ttpos_${proc}\"]]}\n",
  "circle_word_swastika": "str { join [map1 [split [word_swastika $str] \\n] circle_letters] \\n }\n",
  "STshoe1": "{} {join {{ _    _         } {(_\\__/(,_       } {| \\ `_////-._   } {J_/___\"=> __/`\\ } {|=====;__/___./ } {'-'-'-\"\"\"\"\"\"\"`  }} \\n}\n",
  "jre.jpg": "{} { return \"http://www.jailbaitgallery.com/index.php?id=[rand 7417]\"}\n",
  "aimjrelol": "args {  aim -n [aimname $args] [jrelol] }\n",
  "submit_lolqdb": "{comment network channel text} {strip_tabs [last [regexp -inline {<p>([^<]+?)</p>.*?<div class=\"foot} [http post http://lolqdb.buttes.org/submit.php comment=[urlescape $comment]&network=[urlescape $network]&channel=[urlescape $channel]&nrep=+&s=Submit&text=[urlescape $text]]]]}\n",
  "stfuamid": "{} {pyramid \u00034stfu\u0003}\n",
  "zulufighter": "{{name {}}} { . [or $name \"[zulufullname] \\\"[zuluname]\\\" [zuluname]\"], fresh off the boat from [zuluname], South Africa}\n",
  "mroach_word": "{} {pick 1 {lindex_random $::mroach_word} 1 {return \"[name]'s [choose sister girlfriend aunt fiancee wife {attractive friend}]\"}}\n",
  "STsun": "{} { return \"   \\\\ _|_ /   \\n ~  /_ _\\\\  ~ \\n _ | o.o | _ \\n  , \\\\_=_/ ,  \\n   /  .  \\\\   \";}\n",
  "morecoffee?": "{} {pick 4 {coffeeback [upper [?? $::affirmative_statements]]} 1 {wet [upper [?? $::affirmative_statements]]} 1 {. http://magick.buttes.org/temp/9f51b7895b955445d91f1f0c8d54378f.jpeg} }\n",
  "blobhorror": "{} {return \"     _______ \\n    /(.) (.)\\\\ \\n   (___{^}___) --[horror]\"}\n",
  "jabberwock": "{} {return \"'Twas [literati], and the [literati] [literati] did [literati] and [literati] in the [literati];\\n All [literati] were the [literati] and the [literati] [literati] [literati].\\n Beware the [niggerword], my son! The [plural [body_part]] that bite, the [plural [body_part]] that catch!\\n Beware the [literati] [animal_word], and shun the [literati] [literati]!\"}\n",
  "nowplaying": "{{who {}}} {. And now, [capitalize [name $who]]'s latest hit single, [capitalize [strip_u [fetish_porn]][maybe_in_the_usa]]. Only on [clearchannel].}\n",
  "savagenord": "{} {savagesay I DIDNT EVEN [string toupper [swede_act_word]] [string toupper [swede_word]]}\n",
  "threaten": "{} {choose \"I'm gonna cut u up & leave u in buckets\" \"1 of these days im gonna cut u into little pieces\" \"If I ever meet you, I will KICK YOUR ASS!!\" \"\u0002im going to cut ur fucking throat open u slut\u0002\" \"Before you know it, I'm going to rape the everliving shit out of you\"}\n",
  "sayall": "txt {set buf \"\"; foreach name [names] {append buf \"$name: $txt\\n\"; }; return $buf}\n",
  "blacks?": "{} {  set i 0;foreach black $::blacks {  set i [expr $i + [llength [lfilter $black  [string tolower [names]]]]] };c $i blacks}\n",
  "rot:rotatematrix90:test": "{} {\n    set i1 [list \"[rot:C]1,1  1  2  3  4\" \"[rot:C]2,2  5  6  7  8\" \"[rot:C]3,3  9 10 11 12\" \"[rot:C]4,4 13 14 15 16\"];\n    set o1 [join [list           \"[rot:C]1,1 [rot:C]2,2 [rot:C]3,3 [rot:C]4,4 \"            \"[rot:C]1,1 [rot:C]2,2 [rot:C]3,3 [rot:C]4,41\"            \"[rot:C]1,11[rot:C]2,25[rot:C]3,39[rot:C]4,43\"            \"[rot:C]1,1 [rot:C]2,2 [rot:C]3,3 [rot:C]4,4 \"            \"[rot:C]1,1 [rot:C]2,2 [rot:C]3,31[rot:C]4,41\"            \"[rot:C]1,12[rot:C]2,26[rot:C]3,30[rot:C]4,44\"            \"[rot:C]1,1 [rot:C]2,2 [rot:C]3,3 [rot:C]4,4 \"            \"[rot:C]1,1 [rot:C]2,2 [rot:C]3,31[rot:C]4,41\"            \"[rot:C]1,13[rot:C]2,27[rot:C]3,31[rot:C]4,45\"            \"[rot:C]1,1 [rot:C]2,2 [rot:C]3,3 [rot:C]4,4 \"            \"[rot:C]1,1 [rot:C]2,2 [rot:C]3,31[rot:C]4,41\"            \"[rot:C]1,14[rot:C]2,28[rot:C]3,32[rot:C]4,46\"] \\n];\n\n    set oo1 [rot:serializemat [rot:rotatematrix90 $i1]];\n    if {$oo1 == $o1} { return \"SUCCESS\"; } else { return \"FAILURE {$oo1} {$o1}\"; }\n\n}\n",
  "jnzsay": "args {set text [join $args]; if {[rand 25] < 5} {set alternate [string map {\"  \" \" \"} [strip_color [jnz]]]} else {set alternate [youtube_comment]}; if {$text eq \"\"} {set text $alternate}; stampsay -s skull $text}\n",
  "netsplit": "{server1 server2} {. \u000312-\u00030!\u000312-\u0003 \u00034Netsplit\u0003 \u00030$server1\u0003 <-> \u00030$server2\u0003}\n",
  "blackman": "{} {return [giga bt Hello Black man here.]}\n",
  "kmdate": "{} {[if {[rand 2] == 1} {set nick1 \"mroach\"; set nick2 \"kalleboo\"} else {set nick1 \"kalleboo\"; set nick2 \"mroach\"}]; . \"<$nick1> $nick2: oh boy I can't wait until we're both in [?? $::km_place] then we can talk about [?? $::kalleboo_mroach_dict] and engage in some [crw_word] or a little [crw_word] [randor {while victor watches} {}]\"}\n",
  "goonsuck": "{} { goonsay \"i suck on dongs\" }\n",
  "blackmarket": "{{who {}}} {if {$who eq \"\"} {set who [lindex_random [names]]}; set ret \"opens her coat and asks $who if he wants to buy some \"; append ret [strip_u [fetish_porn]]; return \"\\001ACTION $ret\\001\"}\n",
  "STrabbit": "{} {return \"         ,\\n        /|      __\\n       / |   ,-~ /\\n      Y :|  //  /\\n      | jj /( .^\\n      >-\\\"~\\\"-v\\\"\\n     /        Y\\n    jo  o    |\\n   ( ~T~     j\\n    >._-' _./\\n   /   \\\"~\\\"  |\\n  Y     _,  |\\n /| ;-\\\"~ _  l\\n/ l/ ,-\\\"~    \\\\\\n\\\\//\\\\/       .- \\\\\\n Y        /    Y\\n l       I     !\\n ]\\\\      _\\\\    /\\\"\\\\\\n(\\\" ~----( ~   Y.  )\\n\"}\n",
  "torrentz": "pattern {set buf \"\"; foreach {match url descr} [regexp -all -inline {<a href=\"(/[a-f0-9]+?)\">(.+?)</a>} [cwget http://www.torrentz.com/search?q=$pattern]] { set url [html [strip_html $url]]; set descr [html [strip_html $descr]]; append buf \"\u0002$descr\u0002 - \u001fhttp://www.torrentz.com$url\u001f\\n\" }; return $buf;}\n",
  "puarig": "{} {. You buy a kickass [pua_object], [pua_verb2] the hell out of it, then you will get [articleize [pua_adjective]] [pua_object]. Simple as that.}\n",
  "sine2": "{volume duration pitch} {. http://churchturing.org/x/sine2/sine2-[closest $duration $::sine2duration]-[closest $volume $::sine2volume]-[closest $pitch $::sine2pitch].wav}\n",
  "animal": "{} animal_word\n",
  "rip3": "args {string map [list \"Faggot\" [string toupper [join $args]]] [rip2]}\n",
  "swede_name": "{} {return \"[swede_first_name] [swede_last_name]\"}\n",
  "c4": "{str1 str2 str3 str4} {join [adjacent_join [list [nsplit [bgr [rrand_color] $str1]] [nsplit [bgr [rrand_color] $str2]] [nsplit [bgr [rrand_color] $str3]] [nsplit [bgr [rrand_color] $str4]]]] \\n}\n",
  "/": "{a b} {expr $a/$b}\n",
  "cached_lolqdb": "{} { set out [lindex_random $::cached_lolqdb]; if {[rand 6] == 0} { catch { set out [lolqdb]; lappend ::cached_lolqdb $out} }; return $out; }\n",
  "trace": "{} {catsay [concat [proofthatdarrenisarab] [darrens]]}\n",
  "rot:isoff": "c {\n    set O $::rotOff; \n    if {$c==$O} { return 1; } else { return 0;}\n}\n",
  "weird_fml": "{} {string map {boyfriend gynecologist girlfriend mom mom girlfriend dad gynecologist boy lesbian girl jew guy nigger grandmother girlfriend grandfather boyfriend grandma daughter grandpa gynecologist teacher \"child molester\" friend nigga kid \"lil shit\" parent \"parole officer\" woman felon college \"the toilet\" drink fuck drunk menstruating} [fml]}\n",
  "stresscomic": "{} anxiouscomic\n",
  "J": "{} {. DR. NIGGERR ON WATAMELON DUTY}\n",
  "bool": "{} { string map { nig false nog true } [nignog 1] }\n",
  "STpeeinto": "{} {return { (   ( \u00038.--.\u000f\n  \\  \\/    \u00038.\u000f \n  /\\  \\     \u00038:\u000f\n / / /_      \u00038:\n (_(___\\     }}\n",
  "movieseason": "{} {lindex_random $::movieseasons}\n",
  "motto": "{} {return \"[banner \"Welcome to #buttes, home of [strip_u [fetish_porn]]\"]\"}\n",
  "D": "{{who {}}} {if {$who eq \"\"} {set who [lindex_random [names]]}; return \"<$who> Ever since I started coding in D I've seen a noticable increase in the [shakti_word], [shakti_word], and [shakti_word] of my applications.\"}\n",
  "chimpout": "{} { ajoin \"  \" [STsavage] \" [bgr 5 chimpout!!]\" }\n",
  "computing_scam": "{} {. \"[shsc_word] is the biggest scam ever foisted on the computing public.  good fucking riddance.\"}\n",
  "big_white_mills": "{} {. \"[color red on white] MILLS  MILLS  MILLS MILLS MILLS \"}\n",
  "blinkenlights": "{} {act \"is nicht fur gefingerpoken und mittengrabben. Ist easy schnappen der springenwerk, blowenfusen und corkenpoppen mit spitzensparken. Ist nicht fur gewerken by das dummkopfen. Das rubbernecken sightseeren keepen hands in das pockets. Relaxen und vatch das blinkenlights!!!\"}\n",
  "islam3": "{} {return [stampsay [islam2 [name]]]}\n",
  "wisconsin": "{} {string map {shiteater cheesehead turd curd shit cheese asshole udder his her guy cow} [terds]}\n",
  "goonettepix": "{{method {}}} {[or $method [choose pt gis]] busty curvy}\n",
  "rahowa": "{} { set c [+ 1 [cache_get_default rahowa count 0]]; cache put rahowa count $c; . RaHoWas: $c}\n",
  "fake_italian": "{} { return \"you know [?? $::italian_first_name_m] and [?? $::italian_first_name_f] [?? $::italian_last_name]? their kid [choose [?? $::italian_first_name_m] [?? $::italian_first_name_f]] got married and is livin down in [?? $::fake_italian_place]\" }\n",
  "im_smart": "{} { return \"/mode #chatkrew +o paz_\"; }\n",
  "english": "{lang args} {lindex [regexp -inline {<div style=padding:10px;>(.*?)</div>} [http post http://babelfish.altavista.com/tr lp [append lang _en] trtext [join $args]]] 1}\n",
  "erectionnight": "{} crwnight\n",
  "buyers_guide_data": "{} {set ret [list]; foreach {{} product data} [regexp -all -inline {<table>\\n<tr>\\n<td class=\"title\">Product</td>\\n<td><b>(.*?)</b></td>\\n</tr>(.*?)</table>} [cwget http://buyersguide.macrumors.com/]] {set info [list]; foreach {{} key {} value} [regexp -all -inline {<td.*?>(.*?)</td>} $data] {lappend info [string trimright $key :] [strip_html $value]}; lappend ret $product $info}; return $ret}\n",
  "nighair": "{} {return \"[choose \"/\\\\/\\\\/\\\\/\\\\/\\\\\" \"@@@@@@@@@@\" \"_@_@_@_@_@\" \"@|@|@|@|@|\" \"..........\" \"##########\\n##############\\n ############\"]\"}\n",
  "funnyjoke": "{} {return \"Q: What's [colour], is a [faglame], and thinks about [seinfeld_word]? A: A [unplural [ethnic_group]] from [country]!\"}\n",
  "parse_sa_thread_posters": "a { set b [parse_sa_thread $a]; set o {}; foreach {p} $b {  lappend o   [lindex $p 1] }; return $o;}\n",
  "blackjack_over": "{a b} { if [expr $a > 21 ] { return $b; } else { return $a; }; }\n",
  "famous_gbs_names": "{} {lindex_random $::famous_gbs_dict}\n",
  "sucks": "args { choose \"it sure as fuck does\" \"stop the h8 :(\" \"[nick] sucks\" }\n",
  "randart": "{{width {}} {height {}} {amount {}} {trans {}}} { return \"[fit [wget http://churchturing.org/w/randart/?w=$width&h=$height&a=$amount&t=$trans]]\"}\n",
  "operation": "{} {return \"Operation [string totitle [random_word]]\"}\n",
  "cubegoon": "{} {return \"   ________________\\n  /               /|\\n /_______________/ |\\n|                |/|\\n|-\\[.\\]--\\[.\\]-------| |\\n|    O           | /\\n|________________|/\"}\n",
  "wigwog": "{{n 5}} {lselect_random {\"wig\" \"wog\"} $n}\n",
  "eurofag": "{} {set rate [convert 1 eur usd]; set eur [lindex $rate 0]; set usd [lindex $rate 3]; if {$eur < ($usd*1.30)} {set color red} {set color green}; return \"[color $color]${rate}[color]\"}\n",
  "art": "{} {set str \"ajoin \\\" \\\" \"; foreach i [seq 0 [expr {int(rand()*6)+1}]] {append str \"\\[[lindex_random [info procs ST*]]\\] \"}; eval $str}\n",
  "days_since_xserve_update": "{} {curse_you_steve Xserve}\n",
  "toilet_boner": "{} { string map {{_ /} {  /} { | /} {___/} { |/} {| /} { |'.} {|_o.} { `\\ |} {8=========================@} {OH WOW} {} {LET ME IN} {} {ON THIS} {} {__    __} {__    } {/| |'-.} { } {|| | |} { } {\\|_|_.-'} { } {=._) (_} { } {\"\"\"\"\"\"\"\"\"|} { } {         |} { } {|.-------.|} { } {\"         \"} { } }  [lmiot {}]] }\n",
  "mroach12": "{} {. \"#mw2 That Infinity Ward uses the inferior American date format which makes no sense to the rest of the world. You should be using dd.mm.yy\"}\n",
  "image-rel-border": "{url {offset 10}} { image-rel-border_scheme $url $offset }\n",
  "poo_colours": "{} {next_in_list {4,7 7,4 8,4 5,7 7,4 14,7}}\n",
  "adjacent_join": "{list {with { }}} {set ret [list]; set i [llength [lindex $list 0]]; for {set j 0} {$j < $i} {incr j} {set k [list]; foreach x $list {lappend k [lindex $x $j]}; lappend ret [join $k $with]}; return $ret}\n",
  "chinee?": "{} {  set i 0;foreach chinee $::chinees {  set i [expr $i + [llength [lfilter $chinee  [string tolower [names]]]]] };c $i chinees}\n",
  "image-ponder": "{{url {}}} {magick-scale-composite-bottom-left [or $url [gis hidden valley ranch dressing]] http\\://i.conio.net/fedoragoon.png 0.85}\n",
  "charity": "{} {return \"the Society [choose \"of\" \"for\"] [string totitle [adjective]] [string totitle [ethnic_group]]\"}\n",
  "balls": "{} {return \"delicious\"}\n",
  "flag": "{{reason {}}} {return \"[bold][color red]The preceding lines have been flagged as offensive chat due to [color orange][string totitle [or $reason [[?? {offensive_word dnd_word}]]]][color red]. The lines will be forwarded to network Opers for review.\"; set lines [collect_lines]; submit_oper $lines}\n",
  "ï£¿flag": "{} mac_flag\n",
  "moirastd": "{} {caption [+gis rash] {<moira__> it's all red and irritated like under the head}}\n",
  "theowhen": "{{who {}}} {return \"<@[name $who]> [pick 1 {return \"you shouldn't sacrifice your software freedoms, except maybe if... [theo]\"} 1 {return \"I'd rather use [crw_word] than ever resort to using [os] because [theo]\"} 1 {return \"i once used [os] it was pretty good although [theo]\"} 1 {return \"i love free software but [theo]\"}]\"}\n",
  "stripnick": "string {string trimleft [regsub \"^<.*?>\" $string \"\"]}\n",
  "alert_troll": "{{name {}}} {return \"[alert [name $name] [trolldb]]\"}\n",
  "kallecleanline": "{} {subst [lindex_random $::kallecleanlines]}\n",
  "fetch": "tag {\n  set tag [normalize_tag_name $tag]\n  if [info exists ::images_tagged($tag)] {\n    each $::images_tagged($tag) [& i.buttes.org]\n  } else {\n    error \"no images tagged \\\"$tag\\\"\"\n  }\n}\n",
  "winkie2": "{} {return \"My name is Winkie, and [lindex_random {{I'm a drug addict.} {OMG KITTIES!}}]\"}\n",
  "fastchinesesecret": "{} {return \"[smega { chinee [ fastmystery] }]\"}\n",
  "promiscuous_aim": "{{who {}}} {if {$who eq \"\"} {set who [rand_aim]}; aim -n $who [join [strip_all [sexy $who]]]}\n",
  "yotsperg": "{} {. \"Joshua Yotty: [shsc_word] can't replace true talent. Also, [grids] are not the alpha and omega of design; and [shsc_word] does not make you [zuluname] [zuluname].\"}\n",
  "phubuh2": "{{who phubuh}} {return \"<@$who> pls stop [swede_act_word]ing min [swede_word] !!!\"}\n",
  "stfu": "{{fag radeon}} {biggaybowtext stfu\\ $fag}\n",
  "strawman": "{strawman pinhead {fan shaniqua}} {tinyurl [. http://duriansoftware.com/toys/strawman.html?byline=[urlencode $fan]&strawman=[urlencode $strawman]&pinhead=[urlencode $pinhead]]}\n",
  "manbabies": "{} {mega thread_gen}\n",
  "atag": "{url args} {\n  if ![regexp :// $url] {\n    error \"usage: atag [color red]url[color] \\[tag tag...]\"\n  }\n  \n  set url [anormalize_tag_url $url]\n  foreach tag $args {\n    set tag [anormalize_tag_name $tag]\n    if ![atagged? $url $tag] {\n      lappend ::audio_tagged($tag) $url\n    }\n  }\n  \n  atags_for $url\n}\n",
  "warez": "{{who {}}} {nfo [join [name $who] .].[shakti_word].[join [shsc_word] .][virusextension]}\n",
  "speedline": "{{length 10}} {join [map [seq 1 $length] {speedline_segment}] \"\"}\n",
  "eugenics": "{} { . $::eugenics }\n",
  "sinewave_sm": "word { join [map [seq 1 10] {{x} {. [string repeat \" \" [expr int(10 + 10 * sin(3.14 * 3 * $x/20))]] $word }}] \\n }\n",
  "seinlump": "{} {lump [seinfeld]}\n",
  "whatis": "args {lindex [regexp -inline {<font color=#008000>(.*?)</font><br><font size=-1>} [wget http://localghost.us/cgi-bin/google.rb?q=[urlescape [join $args]]]] 1}\n",
  "reverse-goatse": "url { magick_scheme (let ((img (image $url)) (w (width img)) (h (height img)) (simg (resize img (/ w 2) (/ h 2))) (sh (height simg)) (sw (width simg))) (overlay (composite img simg (/ (- w sw) 2) (/ (- h sh) 2)) (image http://churchturing.org/x/reversegoatseoverlay.png))) }\n",
  "rand_char2": "{} {lindex_random [split [alphabet] {}]}\n",
  "mohammedencounter": "{} { return \"[upper [bold]Boss fight: [color blue]Mohammed[color]![bold]] \\n[STmohammed]\\n [color yellow]   9999HP[color]\\n \\n[mohammedattack]\"}\n",
  "njpeg": "args {set n [lindex $args 0];set s [join [lrange $args 1 end]];for {set i 0} {$i<$n} {incr i} {set s [jpeg $s]};return $s}\n",
  "buttes_totem2": "txt {ajoin \" \" \"     \" [aflip [randart 6]] \"\\n\\n\\n\\n $txt\" }\n",
  "STfulldukeku": "{} {embed [embed [embed [canvas 18 15] [STfullgoon] 1 4] [ncock 2] 15 1] [ncock 2] 10 1}\n",
  "arabian": "{} {mapx [seq 1 [+ 4 [rand 6]]] x {rands [+ 4 [rand 6]]}}\n",
  "blackjack_stand": "p { return \"$p stands. $p is a pussy\"; }\n",
  "mrx": "{} {wet \"mr_x is a fag\"}\n",
  "incog_word": "{} {lindex_random $::incog_word}\n",
  "viet_name": "{} {lindex_random $::viet_name_dict}\n",
  "hellogenerate": "{} {return \"^- See how much text I generated\"}\n",
  "krashed": "{} {return \"\u000308A\u000304B\u000313S\u000312O\u000311L\u000309U\u000308T\u000304E \u000313F\u000312A\u000311G\u000309G\u000308O\u000304T\u000f\"}\n",
  "STamerica2": "{} {return {    ,__                                                  _, \n \\~\\|  ~~---___                                         | \\ \n  |            ~~~~~~~-~~~~~--~~---,                 __/   >\n /                                  '\\~~/          /'    ,' \n |                                    / /~)     __-      \\, \n/                                     | | '~\\  |        ,-' \n|                                     | |   /_-'      ,~    \n|                                     `-'             /     \n|                                                    |`     \n',                                                   |      \n |                                                   \\      \n ',                                                  /      \n  '_                                               ,/       \n    \\                                            ,/         \n     ~~~-'                                       /          \n         '-,_                                    \\          \n             `~'~~~,                   ,~~~~-~~,  \\         \n                    \\/~\\      /~~~`---`         |  \\        \n                        \\    /                   \\  |       \n                         \\  |                     '\\'       \n                          `~'}}\n",
  "typical_mac_user-gen": "{} {. \"(composite (composite (resize (image \\\"[img-transparent-pixel]\\\") 1024 512) [macify-gen [typical_mac_user_image]] 0 0) [macify-gen [typical_mac_user_image]] 512 0)\"}\n",
  "racistname": "name { ?? [array_get_default racistmap $name {}] }\n",
  "scheissegern2": "{} {return \"<@ScheisseGern> lol [shsc_word] is a broken piece of shit\\n<@ScheisseGern> i hope [jewfullname] fixes it some day\"}\n",
  "lfilter": "{glob list args} {set nocase 0; if {$glob eq \"-nocase\"} {set nocase 1; set glob $list; set list [first $args]}; lsearch -inline -all -regexp $list [glob_to_regexp $glob $nocase]}\n",
  "stupidjones": "{} {return \"Who [act_word]s anymore? It's going to get to the point where having a little [random_word] on your computer is going to be a lot better than wasting your [random_word] trying to get rid of [random_word], or trying not to get [random_word] at all.\"}\n",
  "gaelic": "args {string map {a ae A AE} $args}\n",
  "please": "{} { subst [lindex_random $::please] }\n",
  "STomgComp": "{} { return [omgComp 1]; }\n",
  "false?": "value {string is false $value}\n",
  "interweave": "{warp weft} {set l [split $warp {}]; join [zip $l [lrepeat $weft [llength $l]]] {}}\n",
  "aimf_koran": "args {aimify koran $args}\n",
  "myfriends": "{} { set c [+ 1 [cache_get_default myfriends count 0]]; cache put myfriends count $c; . my friends: $c}\n",
  "juggalo": "{} {list Im a psychopathic \u0002faggot\u0002}\n",
  "mirror_right": "url {magick_scheme (let ((cbimg (image $url)) (x (width cbimg)) (y (height cbimg)) (half (crop cbimg (/ x 2) 0 (/ x 2) y)) (flop (flop half))) (composite cbimg flop 0 0))}\n",
  "biggaybowtext": "str {text gaybowchar $str}\n",
  "thread_gena": "{} {return \"http://archives.somethingawful.com/showthread.php?s=&threadid=[ran_threada]\"}\n",
  "deck": "{} { knuth_shuffle_permute 51 }\n",
  "triangle": "{} {return \"/_\\\\\"}\n",
  "hulk": "args {rage $args}\n",
  "fatcookingword": "{} cooking_term_word\n",
  "exotica": "{} {stampsay -s tranny [?? $::exotica_dict]}\n",
  "burgertime": "{} {. \"           _\\n          /\\\\)\\n      ___/ /\\n   .-\\'\\';:::.   \\n  / \\',\\'\\'.;;;\\\\  \\n |  \\',\\'\\',\\'.\\'\\'| \\n |\\\\  \\' ,\\',\\' /\\' \\n `.`-.___.-;\\'  \\n   / /._.-\\'\\n  ( Y)\\n   \\\"\\\"\\nIT\\'S BURGER TIME\"}\n",
  "athfboner": "{} {embed [ajoin \"          \" [STfullgoon] \"\\n\\n\\n\\n[goonmeal]\"] [ncock 2] 14 4}\n",
  "EHLO": "{} { return \"[bold]551 You're a faggot\" }\n",
  "mars_phoenix": "{} {. \"A [fluid]-containing sample made it into the [regsub :.*$ [acronym] \"\"] oven. I can now say I'm the first mission to [planet] to touch and then *[crw_word]* the [fluid]. [?? {FTW FTL}]!\"}\n",
  "mmm2": "{{who {}}} {set ret \"\"; if [string length $who] { append ret \"$who: \" }; . \"$ret[lindex_random $::mmm_phrases]\"}\n",
  "chernobyl": "{} {return \"\u00039 ___\u0003 \\n\u00039/...\\\\\u0003 \\n\u00039\\\\_O_/\u0003\"}\n",
  "fucking": "args {apply [car $args] [cdr $args]}\n",
  "nubamid": "{} {pyramid \"nub \"}\n",
  "saqdancemove": "{} {set saq [STsaq?]; pick 1 {flip $saq} 1 {set saq}}\n",
  "winamp2": "{} {winamp [string totitle [choose \"the [choose \"red \" \"white \" \"blue \" \"green \" \"black \" \"pink \" \"\"][unplural [word]]s\" \"[unplural [word]] [rand 200]\" [waspname] [band]]]}\n",
  "abad": "{} { return \" \\n\\2MY NAME IS ABAD, WHOAAA LOOK AT ME i LiKe TO P1zz ONTO FIRES\\2\\n\\n[embed [embed [embed [embed [canvas 30 10] [ncock 1] 1 5] [fire] 20 5] [flip [ystream 20 3]]\" 6 2] [ystream 20 3] 16 2]\\n IM HIGH AND WASTED\"}\n",
  "cialis": "str {subst [regsub -nocase -all {[IL]} [escape [string toupper $str]] {[lindex_random {i l 1 I}]}]}\n",
  "randwithfloor": "{floor max} {expr {int(rand()*($max-$floor)+$floor)}}\n",
  "colloquy": "{} {giga {. beep wolfman mano manophone}}\n",
  "aaronatomy": "{} {. <aaron> but to be fair my [sexpart] is like a tree trunk of muscle from years of [crw_word]}\n",
  "radeon32": "{} {return {<@radeon> Man why do i even keep on living\n<@radeon> all everyone ever does is make fun of me}}\n",
  "measurements": "{} {lindex_random $::measurement_units}\n",
  "nimspace": "args {nimplink [eval \"myspace_url $args\"]}\n",
  "neo": "{} {goonsay {I just got off the phone with the FBI}}\n",
  "channel": "{} {return $context::channel}",
  "STclippy": "{} {join $::clippy_lines \\n}\n",
  "infidel_word": "{} { lindex_random $::infidel_words }\n",
  "face": "{} {lindex $::face_dict [rand [llength $::face_dict]]}\n",
  "homosexuals?": "{} { return \"[llength [names]] homosexuals\" }\n",
  "STdukeku": "{} {ncock 2}\n",
  "pocketc0de": "{} {return \"/kick pocketc0de\"}\n",
  "lispquote": "{} { ?? $::lispquote }\n",
  "trevor": "{} {.  \"<swingler> i need to go get my [string map {\"his \" \"\" \"the \" \"\"} [swingler_word]] and [string map {\"his \" \"\" \"the \" \"\"} [swingler_word]] but Trevor is [?? $::cat_dict]\"}\n",
  "repeatblock2": "{block {count {}}} {set n \"\";set o \"\"; set lines [split $block \"\\n\"]; for {set i 0} {$i < [llength $lines]} {incr i} {append o \"$n[string repeat [lindex $lines $i] $count]\"; set n \"\\n\"; }; return $o;}\n",
  "politicalstance": "{} {lindex_random $::politicalstance}\n",
  "tsunami": "{} {ta pump/tsunami.txt}\n",
  "leedo": "{} {urfm leedo}\n",
  "rocketmeter": "{{boners {}}} {set bonerstring [join [times $boners {=}]]; return \"[color white on black]8[color red on black]$bonerstring > [color white on black] That scores $boners on the [color red on black] RED ROCKET SCALE\";}\n",
  "image-glamour": "url { magick composite http://i.buttes.org/$url [magick_id [eval \"magick resize http://churchturing.org/w/whitemask.png [get_image_size $url]\"]] 0 0}\n",
  "STcooliegoon": "{} { join [list {       _/\\_} {    _/      \\_} {  /____________\\ } {   (--[ ^]-[ ^]} {   (_______O__)}] \\n }\n",
  "dave_thomas": "{} baconator\n",
  "l0l": "{{length 0}} {let {length {. l[join [repeat $length {?? {o 0 .}}] {}]l}} [if {$length == 0} {rand 15 40} {set length}]}\n",
  "tweetml": "{} {set ret \"\"; set fm [split [fml] .] ; foreach sent $fm { if {[string length $ret]+[string length $sent] < 140} {set ret \"$ret $sent.\"} }; heynot [string map {\"FML.\" \"\"} $ret]}\n",
  "onmars": "args {concat have you ever [join $args]? have you ever [join $args]...[color red]ON MARS??[color]}\n",
  "aimproebaum": "args { aim -n [aimname $args] [proebaum] }\n",
  "random_qwantz_tube": "{} { qwantz_tube [?? [top_youtube_ids]] }\n",
  "karaboner": "{} {biggaybowtext \"god i <3 dicks\"}\n",
  "STn": "{} {return {  _   _     \n | \\ |\"|    \n<|  \\| |>   \nU| |\\  |u   \n |_| \\_|    \n ||   \\\\,-. \n (_\")  (_/  }}\n",
  "epicbattle": "{{who1 {}} {who2 {}}} { subst \" EPIC BATTLE ROYALE !!!!\\n[ajoin \" \" \"[fathead_chins 2]\\n[*word] [name $who1]\"  \"\\n\\nVS\" \"[flip [fathead_chins 2]]\\n[*word] [name $who2]\"]\\n                 WHO WILL WIN!\" }\n",
  "tran_nl": "{} {return \"[nicklist] is into [tranny_word]\"}\n",
  "aimfart": "{{name {}}} {aim -n [aimname $name] [strings [fart]]}\n",
  "BLACK_MAN": "{} {niggersay [niggerize [subst \"[lindex_random $::black_man_dict]\"]]}\n",
  "goony_goon": "{} {return \"[subst [string repeat {[lindex_random $::goony_dict]} [expr {int(rand()*10)+1}]]]\"}\n",
  "tranny_channel": "{} { subst { This channel is for [trannies] } }\n",
  "array_get_default": "{array pattern default} {if [uplevel #0 [list info exists ${array}(${pattern})]] {uplevel #0 [list set ${array}(${pattern})]}  {return $default}}\n",
  "creature": "{} {return [lindex_random $::creature]}\n",
  "rand_comic_frame": "{} {let {art {box [embed [canvas 35 12] $art 2 [- 12 [llength [lines $art]]]]}} [ajoin \" \" [wrap [comic_line] 20] \\n\\\\ \\n[ST*]]}\n",
  "mailto": "{{who {}} args} {return \"Dear $who,\\n$args\\nxoxo,\\n[nick]\"}\n",
  "demon": "{} {lindex_random $::demons}\n",
  "albible": "{} {return \"[string trim [randbible] \\\"]. [biblical [albot]]\\\"\"}\n",
  "submitdrudge": "args { http post http://drudgereport.com/cgi-bin/fastfeedback.cgi Send SUBMIT body [join $args]; return [rainbow \"[join $args \" \"]\\nMESSAGE RECEIVED... WILL CONSIDER AND INVESTIGATE...\"]; }\n",
  "youtube_comic": "{} {ajoin \" \" [youtube_comic_frame] [youtube_comic_frame]}\n",
  "ulf": "{} Ulf\n",
  "mtw": "{} MTW\n",
  "swinglerangst": "{} {. \"<swingler> I really thought [year] was going to be different, but I'm still knee deep in [string map {\"his \" \"my \"} [swingler_word]] and if I hear one more thing about [string map {\"his \" \"my \"} [swingler_word]] I am going to mow down everyone outside of [crappy_restaurant]\"}\n",
  "moremacs?": "{} {set aapl [stock aapl]; if {[regexp {\\+\\d} $aapl dummy]} {wet yes} else {wet of course}}\n",
  "bwo": "{{fag {}}} {return \"Today on the [name $fag] show: \u0002\u000313[apply [?? {gay_word crw_word}] {}]\u000f exposed!\"}\n",
  "chineechat": "{} {string map {.. -- BUTTES CHINEE L R R L} [butteschat]}\n",
  "gbs_finger": "aim {set h [http post http://localghost.us/cgi-bin/sacollege.pl?c=search aim $aim];set q [regexp {<tr class=\"row\">.*?<td>(.*?)\\n\\s+<td>(.*?)\\n\\s+<td>(.*?)\\n\\s+<td>(.*?)\\n} $h m n s a e t];if {$q==1} {return \"Name  : $n\\nSchool: $s\\nAIM   : [html $a]\\nE-mail: [html $e]\\nState : $t\"} {return \"Screenname not found: $aim\"}}\n",
  "twinks?": "{} {c [llength [intersect [string tolower [names]] [string tolower $::twink_count]]] twinks}\n",
  "git": "{{changecount 20} {word_picker random_word}} {\n  set adds [rand $changecount]\n  set subs [rand $changecount]\n  set total [expr $adds + $subs]\n  . [format \"%16.16s\" [$word_picker]].[format \"%-3s\" [fileext_word]] | [format \"%2d\" $total] [color green][join [repeat $adds {. +}] \"\"][color red][join [repeat $subs {. -}] \"\"]\n}\n",
  "image-cumshot": "url {magick-scale-composite-bottom-left $url [img-splurt] 1.0}\n",
  "STchile": "{} {return \"\\00312,12dspd\\00300,00s\\00312,12pdsp\\00304,04dspdspdspdspdspdsp\\n\\00312,12dsp\\00300,00dsp\\00312,12dsp\\00304,04dspdspdspdspdspdsp\\n\\00312,12dspd\\00300,00s\\00312,12pdsp\\00304,04dspdspdspdspdspdsp\\n\\00300,00dspdspdspdspdspdspdspdspdsp\\n\\00300,00dspdspdspdspdspdspdspdspdsp\\n\\00300,00dspdspdspdspdspdspdspdspdsp\"}\n",
  "randart:randompiece": "{} {\n    cstrip [ST*]\n}\n",
  "megagbs": "{} {subst [join [string repeat {[gbs] } 5] \\n]}\n",
  "darcs": "{} { . at least with darcs you get [shakti_word] }\n",
  "ljpics": "url {regsub ^http://pics.livejournal.com/.*$ $url &.jpg}\n",
  "failwhale": "{} {. \"Twitter is over capacity.\\nPlease wait and try again.\\n\\n  W     W      W\\n  W        W  W     W\\n                '.  W\\n    .-\\\"\\\"-._     \\\\ \\\\.--|\\n   /       \\\"-..__) .-'\\n  |     _         /\\n  \\\\'-.__,   .__.,'\\n   `'----'._\\\\--'\\n  VVVVVVVVVVVVVVVVVVVVV\"}\n",
  "aimlyguy": "{{who {}}} {aim -n [aimname $who] \"Daily Family Guy Contest for [clock format [clock seconds] -format \"%D\"]!  Can you name the character who made a reference to [80sreference]?  Respond within 1 hour to claim your prize.  If the correct answer is not received, the contest will advance to the next participant.  So far today ([rand 5]) people have been unable to answer!  Good luck.\"}\n",
  "bj_moneyshot": "{} { bj_hit; bj_hit; bj_hit; bj_hit; return [gold [bj_hand]]; }\n",
  "octalcock": "{} {ncock 0}\n",
  "sexmeal": "{} {return \"[capitalize [choose [sexpart] [sexfluid]]]. [fatgoon_finale].\"}\n",
  "rainhate": "{{hater {}} {hated {}}} {if {$hater eq \"\"}  {set hater [lindex_random [names]]}; if {$hated eq \"\"} {set hated [lindex_random [names]]};  rainbow [hate $hater $hated]}\n",
  "adventures_of_moira_comics": "{} {split_every 16 [lines [cwget http://i.conio.net/adventures_of_moira_.txt]]}\n",
  "fuss": "{{who {}}} {return \"\\<[name $who]\\> fuss with my [body_part]\"}\n",
  "aimf_gaychorus": "args {aimify gaychorus $args}\n",
  "my": "args {if {$args eq \"dad\"} {bt \"my dad\"} elseif {$args eq \"d\"} {bt \"s it\"} else {return \"fancy\"}}\n",
  "gudristotle": "args {. shaktonian metaphysics: [gudrize \"[capitalize  [shakti_word]] is the fulfillment of the [shakti_word] of the  [shakti_word].\"]}\n",
  "torchan": "{} {. http://hkfjbmo2rdjun56b.onion/}\n",
  "aimfunds": "args {aim -n [aimname $args] [funds]}\n",
  "arabnews4": "{} {return \"Religious leaders all over the country have voiced their support, proclaiming the sentencing to be in full accordance with Sharia law, instead landing accusations of the Jewish-born reporter carrying a Zionist agenda. [muslimtitle] [muslimname] was quoted as saying \\\"[prophet]\\\"\"}\n",
  "trolldb": "{} {lindex [core::curl http://rolloffle.churchburning.org/troll_me_text.php] 1}",
  "mlk": "{} { return [nigger] }\n",
  "blackjack_shuffle": "{} { set ::blackjack_deck [card_shuffle]; return $::blackjack_deck}\n",
  "presentation": "{} {return \"I am [title] [waspname] of [englishtown]\"}\n",
  "fit": "str {head 20 $str}\n",
  "vim": "{} {. \"With AIDS imported from Uganda\"}\n",
  "singleethnic": "{} {return [unplural [ethnic_group]]}\n",
  "testniggers": "{} {set o \"urmom\"; return $o}\n",
  "glib": "{} {return \"critical g_io_error_get_from_g_error: assertion `err != NULL' failed\"}\n",
  "jaunty": "{} {wt jaunty}\n",
  "image-blood": "url {magick_overlay $url [?? {http://i.buttes.org/index.php/http://www.zapistan.net/images/blood/blood1.jpg http://i.buttes.org/index.php/http://www.zapistan.net/images/blood/blood2.jpg http://i.buttes.org/index.php/http://www.zapistan.net/images/blood/blood3.jpg http://i.buttes.org/index.php/http://www.zapistan.net/images/blood/blood4.jpg}]}\n",
  "delgex:what": "huh {. lol}\n",
  "supertit": "{} {return [lol \"Britain's new teen supertit queen shakes her sensational love sacks \u0002just for you!\u0002\"]}\n",
  "monroe": "{} {return \"tcl transfer\"}\n",
  "dental": "plan {return \"lisa needs braces\"}\n",
  "oi": "{} {return [bt oi oi oi]}\n",
  "attackad": "{{pol {}}} {if {$pol == \"\"} {set pol [political_figure]}; return \"$pol's own words:\\n[hotbutton]: \\\"[niggerphrase]\\\"\\n[hotbutton]: \\\"[niggerphrase]\\\"\\n[hotbutton]: \\\"[niggerphrase]\\\"\\n[boger]\"}\n",
  "radeon31": "{} {return {<@radeon> Pin bending isnt funny anymore}}\n",
  "cached_obama": "{} {if [catch obama result] {set result [lindex_random $::cached_obama]}; cache_list cached_obama $result}\n",
  "headon": "{} {next_in_list {\"HeadOn\" \"Apply directly to the forehead\"}}\n",
  "octalj0ke": "{} {chinksay I chinese, I play joke, I put [sexpart] in your [food_word]}\n",
  "islapua": "{{what {}}} {if {$what eq \"\"} {set what [islam_word]}; . \"[upper [pua_verb2] those who [insult_verb] [upper $what]]\"}\n",
  "radeon14": "{} {return \"<@radeon> Ive worked at best buy for about a month. If theres one thing ive learned, its that i will personally buy the PSP/PRP/whatever as much as possible for the mere fact that i know how it feels to have to offer them, and if i can help em out i should because i wouldnt want to lose my job.\"}\n",
  "buddies": "{} {ajoin \" \" [string map {\"I \" \"WE \" \"I'M\" \"WE'RE\" \" AM \" \" ARE \" \"MINE\" \"OURS\" \" MY\" \"OUR\" \"I'VE\" \"WE'VE\" \"I'D\" \"WE'D\" \"WAS\" \"WERE\" \" ME\" \" US\"} [mohammed [fml]]] \"\\n\\n\\n\\n\\n\\n\\n\\n\\n[STpumpkin]\"}\n",
  "texture": "{} {lindex_random $::texture_dict }\n",
  "mikes?": "{} { c [mike_count] mikes }\n",
  "redundancy": "{} {return \"tcl redundancy\"}\n",
  "teapot": "{} {?? $::teapot_dict}\n",
  "zunewelcome2": "{{who {}}} {return \"\u0002\u00031,1#\u00030,1X\u00034,1D\u0002 \u0002\u0003\u00037~Z \u000313~U \u00037~N \u000313~E \u00037~+\u0002 \u0002\u00034,1(\u00030,1:\u00031,1#\u0003\u0002 \u0002\u001f\u00037/\u000313\\\\\u0002\u001f\u0003 [grapefruitize SQUIR][grapefruitize TING:] \u00037\\[\u000313|||[grapefruitize 100%]\u000313|||\u00037\\]\u0003 [grapefruitize COMPLETE] \u000313\u001f\u0002/\u00037\\\\\u0002\u001f\u0003 [grapefruitize Welcome to the social, [name $who]!]\"}\n",
  "butteshack:monster.h": "{} {return \"[lindex_random [list {} {master }]][body_part] flayer\"}\n",
  "wc": "str {set c [string length $str];set w [llength [regexp -all -inline {\\w+} $str]];set l [llength [split $str \\n]];fixtabs \"$l\\t$w\\t$c\"}\n",
  "hiimcatbus": "{{name Catbus}} {return \"<@$name> hi i'm catbus\\n<@$name> i can't even run a fucken irc bot correctly\\n<@$name> or a goddamn irc server\\n<@$name> i can't even fucken suck a dick correctly\"}\n",
  "overheard_in_austin": "{} {return \"Hunter S. Thompson: Don't stop here man, this is bat country!\"}\n",
  "strip_newlines2": "s {string map {\\n { }} $s}\n",
  "array_map": "{f a} {mapx [array names ::$a] x {$f $x [cdr [array get ::$a $x]]}}\n",
  "moiradegree": "{} {. <moira> i have an Information Systems Nipponese double major}\n",
  "andrzej_advice": "{} { stampsay -l -s andrzej {a protip for you guys in the future: last week of a relationship + sex + pulling out \"just in case\" = girlfriend in tears.} }\n",
  "randmeasure6": "{} {return \"http://[singlerandomword].on.nimp.org/download/[virusfile]\"}\n",
  "doublestuff": "{} {act \"stuffs herself into Alien's mouth\"; act \"DELICIOUS WHITE GOODNESS\"; act \"stuffs herself into Alien's mouth\"}\n",
  "random_date": "{} {clock format [expr {int(rand()*378691200)+852141600}]}\n",
  "remove_stop_words": "list { select $list {{x} {not [stopword? $x]}} }\n",
  "ihateyoubillgates": "args {return \"http://www.youtube.com/watch?v=Ve1WdcEsiqQ#t=8m14s\"}\n",
  "ultragay": "args {return \"\u0002[rainbow [string toupper [name $args]]] [pink \u0002IS] \u000f\u0002BLACK ULTRA GAY!\"}\n",
  "yeah-free": "{} {. http://manimal.prettybrd.com/~leedo/yeah.ogg#.mp3}\n",
  "rainbowname": "{} { rainbow [blackname] }\n",
  "niggerjim": "{} {return \"[string map {\" \" \"-\"} [string totitle [niggerword]]] [waspfirstname]\"}\n",
  "stevenote": "{} {return [lindex_random $::steveism]}\n",
  "bj_instructions": "{} { return [blackjack_instructions]; }\n",
  "feature": "{} next_mac_feature\n",
  "unknown:1:cmd/(.+)_word$/": "{matches cmd args} {eval [join [list \"??\" [join [list \"\\$::\" [last $matches] \"_dict\"] \"\"]]]}\n",
  "saq2": "{} {return {  _ \n /\\)\n( Y)\n \"\" }}\n",
  "rumored_apple_product": "{} {?? $::rumored_apple_products}\n",
  "k-hate": "args {return \"< k-hate > i got so wasted last night i decided to surprise myself with $args in my bed.\"}\n",
  "overheard_in_asia": "{} {set one [vietfullname]; set two [vietfullname]; if {$one eq $two} {append one \" #1\"; append two \" #2\"}; return \"$one: [chinkerize [overheardline]]\\n$two: [chinkerize [[choose albot niggerphrase cached_onehug mystic al_insult]]]\\n$one: [chinkerize [overheardline]]\\n-- [chinkplace]\"}\n",
  "fundiemac": "{{who {}} {post 0}} {return \"[macrumors:post $post] [choose \"THINK ABOUT IT\" \"Check MATE\"], [name $who]\"}\n",
  "STpua": "{} {return \"   ,########\\n   ###   _ _\\\\\\n   #C'     _\\\\\\n    \\\\(    ._ \\\\\\n     \\\\'--, ___)\\n      \\\\   \\\\\"}\n",
  "wale0": "{} {strip_color [stampsay -s omgComp \"i am a humpback wale. i live in the ocean. if you dont repost this comment to 10 other people on you tube, i'm going to dive in to your pool and displace all of the water\"]}\n",
  "megalump": "{{who {}}} {if {$who eq \"\"} {set who [lindex_random [names]]}; return \"[lump $who]\\n[lump $who]\\n[lump $who]\\n[lump $who]\\n[lump $who]\"}\n",
  "csi-comic-gen": "words { text-on-comic {{11 20} {190 92} {312 64} {53 350}} http://i.buttes.org/http://churchturing.org/x/csi-sunglasses-on-sunglasses.png $words}\n",
  "swingler_tag": "{} {set w [swingler_word]; subst \"$w\\n[mega pix_tag [string map {\"the \" \"\" \"his \" \"\" \" \" ,} $w]]\"}\n",
  "modlindex": "{l n} {set len [llength $l]; return [lindex $l [expr $n % $len]] }\n",
  "smd": "{} {uchar 2510 28 27 ff5e 60 ff1b 29 250c 20 73 20 6d 79 20 64}\n",
  "ulfditions": "args {ulfback \"[conditions] ... *sigh*\"}\n",
  "colorblind": "{} {return \"\u00034,3\u0002IF YOU CANNOT READ THIS, YOU'RE A DICK LICKING COLORBLIND HOMO\u000f\"}\n",
  "twitter": "args {. \"error: timeout\"}\n",
  "onehug2": "{} { lindex [split [grouphug2] \".\"] 0}\n",
  "track_pizza": "id {return [list [list [list [pick 1 niggerman 1 niggerwoman] began custom-making your order at] [?? [seq 1 12]]:[format \"%02d PM\" [?? [seq 0 59]]]]] }\n",
  "moirafit": "{} {moirasay [eval [string map {ww_item drink wearing drinking watchandweight  #cockes} [info body hypnofit]]]}\n",
  "cockedisorder": "{{oi {}}} {return \"[name $oi] has a clear-cut case of [disorder]\"}\n",
  "autotranslate": "args {translate auto en [join $args]}\n",
  "vulnerability": "{} {lindex_random $::vulnerability_dict}\n",
  "Lupert": "args {. <Lupert> I once spent [rand 100] [?? {days weeks months years}] not [join ${args}]\\n<Lupert> to demonstrate to my psychiatrist that [join ${args}] is a human invention}\n",
  "STjewstar": "{} { return \"   __/\\\\__    \\n   \\\\ oo /    \\n   /_--_\\\\    \\n     \\\\/      \";}\n",
  "fools?": "{} {set i 0;foreach fool $::fools { set i [expr $i + [llength [lfilter $fool [string tolower [names]]]]] };c $i fools}\n",
  "fukup": "{{who {}}} {if {$who eq \"\"} {set who [lindex_random [names]]}; return \"ALL OF YOU CUNTS R MY BROTHERS AND ALL OF YOU CUNTS R FUKEN SIK MOTHER FUKERS...YOU CUNTS HAVE MY RESPECT...WHOEVER WANTS OPS CAN HAVE EM...BUT IM SAYING FUKEN LETS FUKEN FUK [string toupper $who] UP\"}\n",
  "tiwyf": "{} {lindex_random_ne [regexp -all -inline {src=\"([a-zA-Z0-9./:]*?_500\\.jpg)\"} [~http://feeds2.feedburner.com/thisiswhyyourefat/?format=xml]]}\n",
  "shumagorath": "{{who {}}} {if {$who eq \"\"} {set who [lindex_random [names]]}; return \"<$who> I'm pretty safe with with my computing as it is: I have a massive password, Windows is always up to date, I'm probably going to move to Firefox soon and my wireless network is encrypted with 128-bit WEP with MAC filtering and will be upgraded to WPA in the near future.\"}\n",
  "heart": "args {gayflagify [string map {jgs { Â  }} [ajoin \" \" [STheart] [bt [. $args]] \" \"]]}\n",
  "chathard2": "{} {smega {string map {\"GAY\" \"CHAT\" \"BAR\" \"HARD\"} [gaybar]}}\n",
  "aud-lastmeasure": "{} { ?? $::lastmeasure }\n",
  "god_todo": "{} {checkbox \"split the sea\" \"raise the dead\" \"stop the sun\" \"KEEP A N-GGER FROM BECOMING PRESIDENT\"}\n",
  "pubmeasure2": "num {publish [. [subst [string repeat {[randmeasure10]\\n} [expr {int($num)}]]]]}\n",
  "hightax_dict": "{} {lindex_random $::hightax_dict}\n",
  "nb2": "{} {return [giga nb1]}\n",
  "STboger": "{} {return \"   OOOOOOOOOOO\\n OO(--\\[ .\\]-\\[ .\\]\\n OO(_______O__)\"}\n",
  "sinewavetrannies": "{} {sinewave [join [map [trannies] {word {. \"\\00300,[gridse_colour] $word \"}}] \"\"]}\n",
  "STpuntme2": "{} {string map {___/(__ ___Ã±___} [each [lines [STsmallkin]] {l {. \"\\003[next_in_list $::mexico_colours]$l\\x0f\"}}]}\n",
  "a/s/l": "{} {join [list [?? [seq 13 19]] [pick 10 {. m} 10 {. f} 1 {. t}] [string tolower [city]]] /}\n",
  "spoiler": "str {return \"\u000301,01$str\u000f\"}\n",
  "STsandworm": "{} { join $::sandworm \\n }\n",
  "du": "{} {bigtext DUKEKU\\ UPDATE:}\n",
  "bad1": "{} {return [bold][color [choosecolor]][hoiah]}\n",
  "scheme_image_or_sexpr": "sexpr { if [regexp {^( |\\n|\\r)*\\(} $sexpr] { return $sexpr } { return \"(image \\\"[scheme_escape $sexpr]\\\")\" } }\n",
  "get_image_size": "args {~apply get_image_size_uncached $args}\n",
  "fonemodel": "{} { . [subst [?? $::fone_models]] }\n",
  "image-stoner": "url {magick_overlay $url [?? {http://imgur.com/EBozx.png http://imgur.com/NJmhb.png}]}\n",
  "america": "{{hater {}}} {if {$hater eq \"\"} {set hater [lindex_random [names]]}; return [hate $hater America]}\n",
  "news_paragraph02": "{} {return \"\\\"[niggerphrase]\\\", began a brief press release to the media. \\\"[niggerphrase]\\\", it continued.\"}\n",
  "negruka": "{{who {}}} {return \"[negromg] [rainbow [duka $who]]\"}\n",
  "goldchar": "c {set c [string toupper $c]; if ![info exists ::alphabet($c)] {return [join [string repeat \"{   } \" 5] \\n]}; regsub -all {\\*($|\\n| )} [regsub -all {(^|\\n| )\\*} [decode $::alphabet($c)] \"\\\\1\u000308,08*\"] \"*\u000f\\\\1\"}\n",
  "oneoff": "{} {lindex_random $::oneoffs}\n",
  "master_cheat": "{} {set n [nick];mm [master_gete $n 0][master_gete $n 1][master_gete $n 2][master_gete $n 3]}\n",
  "seinisland": "{} {return \"If you were stranded on an island and could only take one thing, would it be a [strip_s [goon_word]] [strip_s [goon_word]] or a sack of [seinfeld_word] ?\"}\n",
  "rainfur": "{} {smega {strcat \u0003[gay] [furry_thread]}}\n",
  "debian_feature": "{} {lindex_random $::debian_stable_features}\n",
  "creplace": "{s b e r} {\n\tset c [csplit $s]\n\tset t [lindex $c 0]\n\tset d [csplit $r]\n\tset q [list]\n\tfor {set i $b} {$i <= $e} {incr i} {\n\t\tset t [lreplace $t $i $i [lindex [lindex $d 0] [expr $i-$b]]]\n\t}\n\tforeach f [lindex $c 1] { if {[lindex $f 0] < $b} { lappend q $f } }\n\tforeach f [lindex $d 1] { set f [list [expr [lindex $f 0]+$b] [lindex $f 1]];lappend q $f }\n\tlappend q [list $e [c_at_n $s $e]]\n\tforeach f [lindex $c 1] { if {[lindex $f 0] > $e} {lappend q $f } }\n\tcjoin [list $t $q]\n}\n",
  "csammis": "{{fart {}}} {if {$fart eq \"\"} {set fart \"darren\"}; . \"$fart. is. a. fucking. moron. End of story\" }\n",
  "rabrewer": "{{who {}}} {string map {read drink Fireball Firebrew} [raruler $who]}\n",
  "ppc": "{} {lindex_random $::ppc_dict}\n",
  "moiracam3": "{} {return \"                  *    \\\\_  \\\\          x  |\\n              /\\\\_,///   >   )         \\\\_  \\\\\\n             / ,/   +\\\\ /   /         _/ )_/\\n             \\\\__|+ O  )  \\\\/        _/ \\\\/\\n           *    /\\\\__D/    \\\\      _/    )\\n             *   /  _   o  \\\\   _/,   _/\\n         *      /   /       ,_/   __/\\n               /   / \\\\    o//    _/\"}\n",
  "second": "args {if {[llength $args]==1} { return [lindex [lindex $args 0] 1]} {return [lindex $args 1]}}\n",
  "scheme": "{} {set code \"#\\\\newline#t#f?????\"; foreach i [seq 1 5] {set code \"([furry_verb] $code)\"} ; return $code}\n",
  "randtag": "{} {set tag [?? [tags]]; . $tag: [img-$tag]}\n",
  "rippergoon": "{} {strip_color [stampsay -s omgComp \"I took [rand 100] [drug_word]s, [rand 100] [drug_word]s, [rand 100] [drug_word]s,  [rand 100] [drug_word]s, topped off with [rand 100] [drug_word]s. [fatgoon_finale]. [ripper_line]. I told you I was hardcore. ~~~~~~~~~~~~~~~~~~~shoa.\"]}\n",
  "catbusaddress": "{} {return \"catbus@[string tolower [string map {\" \" \"\" \"@\" \"\"} [pedo_word]]][tld]\"}\n",
  "acquaintance": "{} { if {[rand 2] == 0} { return \"[prefixed_simple_acquaintance]'s [acquaintance_chain]\" } { return [prefixed_simple_acquaintance] }}\n",
  "disability": "{} { subst [lindex_random $::disability]}\n",
  "@_@2": "{} {rain [embed [regsub -all \"\\x0f\" [aflip [join [map [. [seq 1 [rand 15]] [seq [rand 15] 1]] {n {. \"@[string repeat _ [expr int($n)]][string repeat { } [expr int($n * 2)]][string repeat _ [expr int($n)]]@\"}}] \\n]] \" \"] [bt @_@] 20 10]]}\n",
  "morelike": "args {. \"$args more like [acrochars [split $args {}]]\"}\n",
  "vmega": "{cmd args} {set ret [list]; foreach i [seq 1 5000] {if [catch [concat $cmd $args] val] {set val \"error: $val\"}; lappend ret $val}; join $ret \\n}\n",
  "love": "{{nigger {}}} {act \"loves [name $nigger]\"}\n",
  "cattragedy": "{} http://gist.github.com/135702.txt\n",
  "lastfm:setlasttime": "{user now} { cache put lastfmlasttime $user $now }\n",
  "de-buttes": "url {regsub -all {^http://i.buttes.org/(index.php/)?} $url {}}\n",
  "STcathead": "{} {join {{ /\\/\\  }     {/o.o \\ }     {\\_^__/ }} \\n}\n",
  "mywu": "{{who {[nick]}}} {wu $::wu([name [subst $who]])}\n",
  "STpenis": "{} {return \"   _ \\n  /\\\\)\\n / /  \\n( Y)   \\n \\\"\\\"    \"}\n",
  "kill-all-niggers": "{} {. done!}\n",
  "choosecolor": "{} {lindex_random $::color_names}\n",
  "aimwmf": "args {aim -n [aimname $args] [subst [lindex_random $::wmfprank]] }\n",
  "sic": "{} {info level 0}\n",
  "gypsies?": "{} {set i 0; foreach gypsy $::gypsies {set i [expr $i + [llength [lfilter $gypsy [string tolower [names]]]]] }; c $i gypsies}\n",
  "film_troll": "{{args {}}} {if {$args eq \"\"} {. I love [movie], I like the bit where [actor] [actor_action] best.} {. I love [join $args], I like the bit where [actor] [actor_action] best.}}\n",
  "nigger_beer_review": "{} {moirasay [niggerize [moira_beer_review]]}\n",
  "cats?": "{} {. \"[c2 0 cats]\\n     cats can't use irc\"}\n",
  "hitleron": "{} {return \"<@radeon> god sometimes i just wish someone would pull a hitler on the [word \"^\\[A-Z].*?(ians|ics|ese)$\"]\"}\n",
  "weiner": "{} {return \"B=======D O: <---[name]\"}\n",
  "onenight": "{} {return \"One night in [city] when me and my [lindex_random {friends mates buddies pals}] were getting ready to [lindex_random {\"go out\" fuck}] we decided to throw [food_word] off the apartment balcony\"}\n",
  "unprefixed_simple_acquaintance": "{} { unprefixed [prefixed_simple_acquaintance] }\n",
  "pix": "{who args} {flickrphoto $::flickrid($who) [join $args ,]}\n",
  "terror": "{{who terror}} {tellol terror [lindex_random $::terror_phrases]}\n",
  "tewt": "args {. \"suck a butt tute\"}\n",
  "go:bottomright": "{} { uchar 251b }\n",
  "image-bush": "url { magick-scale-composite-bottom-right $url http://assets.buttes.org/magick/2122bf0b355219321d714dab9f5dd4f8.png 0.4}\n",
  "dickfencing": "{} {. http://mjt.nysv.org/scratch/alizee_dick_fencing.gif}\n",
  "summonzybl0re": "{} {return \"zybl0re: I spot a [niggerword]!\"}\n",
  "count_boners": "{} {return \"[llength [names]] boners\"}\n",
  "wcc": "{} {return \"##==##\\n#/\u0002\u0002 \u0002\u0002 \\\\#\\n| <3 |\\n#\\\\\u0002\u0002 \u0002\u0002 /#\\n##==##\"}\n",
  "zybl0re2": "{} {return \"<@zybl0re> niggers <@zybl0re> tcl wt2 i hate niggers <@zybl0re> I FUCKING KILL NIGGERS LOL <@zybl0re> have you ever f'd a nigger < zybl0re> KILL NIGGERS < zybl0re> NIGGERS MUST DIE AAAAAAGGGGGHHHH <@zybl0re> tcl wt2 kill all niggers <@zybl0re> I DO IN FACT HATE ALL NIGGERS <@zybl0re> some texan nigger i suppose <@zybl0re> there's other songs he has where the niggers are right up front\"}\n",
  "someone2": "{} {set s {};foreach name [string tolower [names]] {set s [concat $s [info procs *$name*]]};eval [lindex_random $s]}\n",
  "unrune": "{{who {}}} {set who [name $who]; string toupper \"<3 $who; $who does not suck; $who is not dying; $who is not dead to me; $who did not hit wtc; $who <- ovens\"}\n",
  "STpenguin": "{} {return \"   __    \\n .'  `.  \\n |a_a  | \\n \\\\<_)__/ \\n /(   )\\\\ \\n|\\\\`> < /\\\\\\n\\\\_|=='|_/\"}\n",
  "buffalo": "{} {. Buffalo buffalo Buffalo buffalo buffalo buffalo Buffalo buffalo.}\n",
  "ppcs?": "{} {c [llength [intersect [string tolower [names]] [string tolower $::ppc_krew]]] PPCs}\n",
  "kindle_dx": "{} {ajoin \" \" [bgbt [days_since 2009-05-06]] \"\\n\\nDAYS OF KINDLE DX VAPORWARE\\nCUR\\$E YOU JEFFREY P. BEZO\\$!!!!!\"}\n",
  "wet_fullwidth": "args {if {[string length $args] > 8} {error \"too long, spic\"}; subst [string map {* {[rand_fullwidth]} \" \" {[uchar 3000]}} [wet $args]]}\n",
  "rss_example": "rssfeed { join [map [rss_get $rssfeed] {{x} {. [first $x] - [second $x]}}] \\n}\n",
  "uuidgen": "{} {join [mapx {4 2 2 2 6} l {subst [string repeat {[format %02X [rand 256]]} $l]}] -}\n",
  "burgersay": "{{fart {}}} {if {$fart eq \"\"} {set fart \"J BAKE, NO TOMATE. NUGS. FROSTYS.\"}; stampsay -s burger $fart}\n",
  "internetacro": "{} {lindex_random $::internetacro_dict}\n",
  "jihad": "args {mohammed [islam $args]}\n",
  "sa_harvest_threads": "{forumid {pagenumber 1}} {set new_threads [list]; foreach thread [sa_fetch_threads $forumid $pagenumber] {if [set threadid [sa_thread_add $forumid [lindex $thread 0] [lindex $thread 1]]] {lappend new_threads $threadid}}; set ret \"[llength $new_threads] new threads for forum $forumid harvested\"; if [llength $new_threads] {append ret \": [join $new_threads \", \"]\"}; return $ret}\n",
  "add_sn": "{dict sn} {set d ::${dict}_aim_dict; if [info exists $d] {if {[lsearch [string tolower [set $d]] [string tolower $sn]] != -1} {error \"$sn is already in the $dict dictionary\"}}; lappend $d $sn; return \"added $sn to the $dict dictionary\"}\n",
  "src": "proc {set args [list]; foreach arg [info args $proc] {if [info default $proc $arg default] {lappend args [list $arg $default]} {lappend args $arg}}; list proc $proc $args [info body $proc]}\n",
  "cut2": "{{buttes {}} {who {}}} {\"if {$buttes eq \"\"} {set buttes [lindex_random [names]]}; if {$who eq \"\"} {set who [lindex_random [names]]}; return \"<$buttes> dude $who if u dont fucken stop runnin ur mouth about my girlfriend im gonanf ucken slice your eyes\"}\n",
  "puafeld": "{{fart {}}} {if {$fart eq \"\"} {set fart [lindex_random [names]]}; set ret \"<$fart> and what's the deal with \"; append ret [pua_verb]; append ret \" \"; append ret [plural [pua_object]]; append ret \"?\"; return $ret}\n",
  "'`/": "{} {/^darren\\d*$/}\n",
  "ctrlv": "{} {return \"\u0016\"}\n",
  "arima": "{} {biggaybowtext lmao}\n",
  "leveldown": "{{who {}}} {string map {BRAVE FAIL WELL POORLY UP DOWN} [apply levelup $who]}\n",
  "poodletown": "{} {. http\\://17.media.tumblr.com/1WdcmICRRlqb8ihvrtXUoMI4o1_500.png [tacotownyeah]}\n",
  "kalleclean3": "{} {return \"<@Kalle> I then pour a VERY GOOD AMOUNT of [choose [sex_fluid] [matter] [booze_word]], Scrub, Flush...then I add a VERY GOOD AMOUNT of [choose [sex_fluid] [matter] [booze_word] [food_word]]. [string totitle [act_word]] then [act_word]. I pour [choose [sex_fluid] [matter] [booze_word] [food_word]] in the toilet and I [act_word] after a five minute sitting.\"}\n",
  "incogs": "{} { return \"[color green]1 incog = -100,000 gbp in welfare CHEQUES FROM THE DOLE QUEUE\"}\n",
  "hello3": "{{who {}}} {set who [name $who]; return \"<$who> check out this pic I found of my sis http://hello.frap.net/img/[underscore [sex_act]]_[underscore [food_word]].jpg\"}\n",
  "tinf0il": "str {foreach {i j} {s {\u000303\u0002$$$\u0002\u000f} k {\u0002\u000304KKK\u0002\u000f}} {set str [regsub -nocase -all $i $str $j]}; return $str}\n",
  "juggalie": "args {return \"\\< juggalie \\> you don't understand the dark carnival $args\"}\n",
  "boobies": "{} {return \"!figlet:bubble oo\"}\n",
  "unmorse": "str {string map {{ } {} {/} { }} [string map [join [map $::morsecodemap {{x y} {. \"{$y } $x \"}}]]  [string map {_ -} \"$str \"]]}\n",
  "urtemp": "nick {set w $::myweather($nick); . \"[upper $w]: [temperature $w]\"}\n",
  "gbser": "{} {return \"<@GBSER> [pick 1 {return \"Hey remember that one Family Guy Episode?\"} 1 {return \"I SHIT MY PANTS AT WORK TODAY!\"} 1 {return \"YOU OWE ME A NEW KEYBOARD SIR!\"} 1 {return \"wow, just wow\"} 1 {return \"Thank you, good sir!\"} 1 {return \"I think I just vomited in my mouth a little.\"} 1 {return \"Golden Manbabies all around, good sirs!\"} 1 {return \"PayPal Sent!\"}  6 {return \"[gold 55[string repeat 5 [rand 15]]!]\"}]\"}\n",
  "track_person": "args { return {{BEHIND YOU}} }\n",
  "japgirlname": "{} {. [subst [?? $::jgirlfirstnames]] [subst [?? $::jgirllastnames]]}\n",
  "boat?": "{} {. [wet [choose {I'm on a boat} {at kinko's}]]}\n",
  "track_fedex_html": "number {wget http://www.fedex.com/Tracking?action=track&language=english&cntry_code=us&initial=x&tracknumbers=$number}\n",
  "horror": "{} {return \"IÃ¤! IÃ¤! [capitalize [pick 1 adjective 1 fear_word]] [capitalize [pick 1 animal_word 1 name 1 infidel_word]] of [capitalize [pick 1 location_word 1 laxative_word 1 ircnet_word]] with a Thousand [capitalize [pick 1 butte_word 1 body_part]]s! Ph'nglui mglw'nafh [capitalize [name]] R'lyeh wgah'nagl fhtagn.\"}\n",
  "dancingfont": "str {apply ajoin [concat {{}} [map [split [dancingfontstrip $str]  \"\"] {{x} {dancingfontchar $x}}]]}\n",
  "ebayize": "url {string map {? W0QQ % Q & QQ = Z} $url}\n",
  "nigblog": "{{who {}}} {return [niggerize \"[political_word] pundits such as [name $who] imply that everyone from[country_name] are filthy [ethnic_group]. As someone who is of[blogentry:words1]  origin, I find this [size_word]-minded approach to be [blogentry:words2].\"]}\n",
  "darren8": "{{who {}}} {caption [img-:i 0] [crw_phrase [or $who [japgirlname]]]}\n",
  "chirpz_word": "{} { subst [lindex_random $::chirpz_word] }\n",
  "niggamid": "{} {pyramid nigga\\ }\n",
  "chatquote": "chatter {. \"< $chatter> [?? [subst \"\\$::${chatter}_dict\" ]]\"}\n",
  "radeon9": "{} {return \"<@radeon> I found a new trumpet in the alley last night.\\n<@radeon> still pretty shiny and not much corrosion.\\n<@radeon> i played it for hours\"}\n",
  "arotate270": "v {arotate [arotate180 $v]}\n",
  "sys6": "args {magick annotate b7df71ba 12 65 20 black [wrap [join $args] 50] Chicago.ttf --no_antialias}\n",
  "c_d": "{} celeb_drudge\n",
  "ran_thread": "{} { set num [expr {2710000+round(rand()*(2730000-2710000))}]; return \"$num\"}\n",
  "incog": "{} {return \"<@incog> xss in [hyphenate [random_word]][tld]\"}\n",
  "ethnic_olympics": "{{who {}}} {if {$who eq \"\"} {set who [lindex_random [names]]}; return \"[celebrity] from the [ethnic_group] of [country] takes the [choose gold silver bronze] medal in [choose \"500 meter\" \"100 meter\" Greco-Roman lightweight heavyweight freestyle] [crw_word]!\"}\n",
  "was": "args {set args [join $args]; return \"No, \u0002YOU\u0002 were $args\"}\n",
  "linux_ad": "{} {embed [tail [head 17 [macro tux]]] \"[color black][shakti_word].\\n[color black][shakti_word].\\n[color black][shakti_word].\\n[b][color black]LINUX.[b]\" 5 5}\n",
  "favimage": "{{who {}}} {if {$who eq \"\"} {set who [lindex_random [names]]}; return \"$who added to favorites on [month] [rand 28], 200[choose 6 7 8]: [gis [choose [strip_u [fetish_porn]] \"[shakti_word] porn\" \"[gayagenda:event]\" \"naked [singleethnic]\" \"[random_word] porn\" \"[singleethnic] porn\" \"[political_figure] nude\"]]\";}\n",
  "zicat2": "txt {ajoin \"\" [rain [STzubkatz]] [wrap [join $txt] 50] [flip [rain [STzubkatz]]]}\n",
  "spank": "{{fag {}}} {. \"[nick] bends [name $fag] over his knee, pulls down his pants, and spanks him!\"}\n",
  "unknown_find_command": "{pattern resultvar} {upvar $resultvar result; set commands [unknown_lfilter_glob_or_regexp [info commands] $pattern]; if [llength $commands] {set result [lindex_random $commands]; return 1}; return 0}\n",
  "heron2": "{} {strip_color [stampsay -s omgComp \"i am a heron. i ahev a long neck and i pick fish out of the water w/ my beak. if you dont repost this comment on 10 other pages i will fly into your kitchen tonight and make a mess of your pots and pans\"]}\n",
  "bj_dealer": "{} { return [blackjack_dealer_loop]; }\n",
  "odd_elm": "args {every_n_from 2 1 [join $args]}\n",
  "arotate": "v {arotate90 $v}\n",
  "abezlam": "{} {magick annotate e2c7b28ac 40 5 5 white [wrap [islam abez] 10]}\n",
  "thanks": "args { return \"No problem [nick]\" }\n",
  "careking": "{} {ta pump/careking.txt}\n",
  "urpix": "{{who {}} args} {set n [default $who [lindex_random [array names ::flickrid]]]; . \"$n: [pix $n [join $args ,]]\"}\n",
  "mroach_cat": "{} {. \"This just in: MINNIE IS [bold][string toupper [??  $::cat_dict]].[bold] More at [?? [seq 5 11]].\" }\n",
  "omgbeedna": "{} {ajoin \"\" [flip [rain [mega omgbeegeometry]]] [rain [mega omgbeegeometry]]}\n",
  "init": "{} {return \"[format \"% -50s\" \"[capitalize [act_word]]ing [random_word]...\"] \\[[pick 4 {. \"\\0039  OK  \\003\"} 2 {. \"\\0034FAILED\\003\"} 1 {. \"\\0037PASSED\\003\"}]\\]\"}\n",
  "reflectit": "v {set freq [rand 1 8]; return [ajoin \"\"  \" \" $v]\\n[join [map [enumlist [split [vflip $v] \\n]] {{i x} {. [string repeat \" \" [reflectfun $i]]$x}}] \\n]}\n",
  "jewish1": "{} {return [pink [chinkerize [octalemo]]]}\n",
  "lsummate": "l { foldxo x o 0  $l {expr $x + $o}  }\n",
  "abt": "args {apply {ajoin \" \"} [map [split [join $args] {}] {char {apply [next_in_list {bt {fw bt}}] $char}}]}\n",
  "nattyism": "{} {. http://youtube.com/watch?v=[?? $::nattyism_list]}\n",
  "gaychar": "c {set c [string toupper $c]; if ![info exists ::alphabet($c)] {return [join [string repeat \"{   } \" 5] \\n]}; set g [gay]; regsub -all {\\*($|\\n| )} [regsub -all {(^|\\n| )\\*} [decode $::alphabet($c)] \"\\\\1\u0003$g,$g*\"] \"*\u000f\\\\1\"}\n",
  "dev2": "{{who {}}} {return \"[string toupper [name $who]]: GUESS WHAT, ASSHOLE? I WAS ONE OF THE EARLIEST [string toupper [pedo_word]]S IN THE 1980S. I KNEW KEVIN MITNICK. PHONE PHREAKING IS AS SECONDARY TO ME AS [string toupper [crw_word]] WITH YOUR DAUGHTER. I'M GOING TO KEEP CALLING YOUR HOUSE, OVER AND OVER, AND THE PHONE COMPANY WILL NEVER BE ABLE TO TRACE THE CALL. YOU'RE GOING DOWN.\" }\n",
  "future_date": "{} {clock format [expr {int(rand()*378691200)+[clock seconds]}] -gmt true -format \"%A, %B %d, %Y\"}\n",
  "dikky_blog": "{} {smega {string map {LAUGHUING BLOGGUING LOL BLOG HY BLOG OMG BLOG LMAO BLOG WHAT????????????? BLOG?????????????} [dikkyize [choose [cached_onehug] [odinesque]]]}}\n",
  "fonetalk": "{} {set w [choose \"mroach\" \"kalleboo\"]; set f [lindex_random $::fone_names]; return \"<$w> [pick 1 {. \"i just took a picture with $f [flickrphoto $::flickrid($w)]\"} 1 {. \"my $f is dead ;_;\"} 1 {. \"i [choose love hate] my $f\"} 1 {. \"i just bought [lindex_random [seq 2 5]] $f\\s\"} 1 {. \"my $f's [lindex_random $::fone_function] is so fucked :(\"}]\"}\n",
  "girlword": "{} {lindex_random $::girlwords}\n",
  "nigify": "str {return \"[color black on black]$str\"}\n",
  "each": "{list block} {join [map $list $block] \\n}\n",
  "days_since": "time {expr ([clock seconds] - [clock scan $time]) / 60 / 60 / 24}\n",
  "paz": "{} { ncock 0 }\n",
  "randomdccchat": "{} { return \"\\1DCC CHAT CHAT [rand 2000000000] [rand 1024]\\1\"; }\n",
  "africa": "{} {. http://magick.buttes.org/temp/58c4e29d4f529093bc8211583e8798d2.jpeg}\n",
  "jpeg": "args {set r [list];set s [join $args];set c [csplit $s];foreach k [lindex $c 1] {set m [lindex $k 1];if {[regexp {^\u0003} $m]} {regexp {\u0003(\\d+)(?:,(\\d+))?} $m x a b;set q \"\u0003[expr abs([string trimleft $a 0]+[rand 2]-1)]\";if {$b!=\"\"} {append q \",[expr abs([string trimleft $b 0]+[rand 2]-1)]\"};lappend r [list [lindex $k 0] $q]} {lappend r $k}};cjoin [list [lindex $c 0] $r]}\n",
  "pedos?": "{} { incogs? }\n",
  "alternafag": "{} {return \"Of course I'm sarcastic. You'd have to be some Slashdot alternafag to sincerely suggest that.\"}\n",
  "japgirl": "{} {set girl [japgirlname];set salt [lindex_random {gravure ã¢ã¤ãã« ã°ã©ãã¢ ãã£ã±ã idol}]; . $girl ($salt): [gis $girl $salt]}\n",
  "push:box": "n { global lastpush if {[expr [rand 50] % 5] == 0} { set lp [lindex [array get {lastpush} ${n}] 1] if {![string length ${lp}] || [clock seconds] > [expr ${lp} + [rand 50 15]]} { putserv \"PRIVMSG ${c} :\\001ACTION puts ${n} in a box\\001\" array set {lastpush} [list ${n} [clock seconds]] }}; return 1}\n",
  "deathto": "{{who {}}} {return \"\\\"[upper [kill_verb] [name $who] in the name of allah]\\\" \\n -- [muslimtitle] [muslimname]\"}\n",
  "v%limit": "c {\r\n\tset lu [llength [chanlist ${c}]]\r\n\tif {[expr ${lu} % 6] == 0} {\r\n\t\tset limit [expr ${lu} + [v%rand 11 6]]\r\n\t\tchannel set ${c} chanmode\t\\\r\n\t\t\t\"[string map {+l +ll} [channel get ${c} chanmode]] ${limit}\"\r\n\t\tpushmode ${c} +l ${limit}\r\n\t}\r\n}\n",
  "nosuchproc": "{} {return \"error: invalid command name \\\"nosuchproc\\\"\"}\n",
  "gideon": "{} {talk \"my name is david h gideon\"}\n",
  "bff": "{} {biggaybowtext \"BFF\"}\n",
  "murr": "{} {return \"purr\"}\n",
  "aimpanties": "args {aim -n [aimname $args] What kind of panties are you wearing?}\n",
  "lastfm:suq": "args {lastfm:singleuserquery $args}\n",
  "collegeaim": "{} {lindex_random $::collegeaim}\n",
  "21st_century_poetry": "{} { stampsay -s  geordigoon \"Captain let me recite for you some early 21st century poetry: [mega kanyelyric]\" }\n",
  "!": "args {apply cnbc $args}\n",
  "gaytest": "{{n 5}} { . $n }\n",
  "torontoname": "{} {subst [join [lselect_random $::toronto_names_pool 1]]}\n",
  "sync": "pname {return \"tcl [inspect $pname]\"}\n",
  "progress": "{percentage {width 20}} {set fill [expr int([max [min $percentage 100] 0] * $width / 100.0)]; return [string repeat [U+2587] $fill][string repeat [U+2581] [expr $width - $fill]]}\n",
  "lmsrwia": "args {return \"                 __\\n      __       /| |'-.\\n     /..\\\\      || |   |     OH WOW\\n     \\\\_-/      \\\\|_|_.-'   [string toupper [join $args]]\\n    /`---`\\\\      _) (_\\n   {  |  | } |\\\"\\\"\\\"\\\"\\\"\\\"\\\"\\\"\\\"|    LET ME STAY\\n    ' .-.-.' |         |  RIGHT WHERE I AM\\n    \\\"|  |  | |         |\\n     |  |  | |.-------.|\\n     '`` ``' \\\"         \\\"\"}\n",
  "sleepy": "{} {ajoin \"[color]   \" [aflip [join [mapx [lines [randart 21]] line {join [mapx [split $line {}] char {. [color [gay] on [gay]]$char}] {}}] \\n]] \\n[bt YOU ARE]\\n\\n[bt GETTING]\\n\\n[bt SLEEPY]}\n",
  "murrpurr": "{} {subst \"[lindex_random {mu chi chu pu hu h {}}][string repeat r [expr int(rand()*5)+2]]\"}\n",
  "radeon22": "{} {return {<@radeon> I bought a new hard drive tonight\n<@radeon> to ensure that i dont run of of room for a long time to come\n<@radeon> still pretty shiny and not much corrosion.\n<@radeon> god this gay porn is taking forever to copy over\n<@radeon> >:\\\\}}\n",
  "emonorge": "{{who {}}} {if {$who eq \"\"} {set who \"reshxed\"}; return \"<@$who> [norway [strip_newlines [cached_onehug]]]\"}\n",
  "??": "arges {lindex_random $arges}\n",
  "bj_hand": "{} { return [blackjack_print_player [nick]]; }\n",
  "moretea?": "{} morecoffee?\n",
  "plot": "{} {choose [sam_plot] [willplot] [swinglerplot] [km_plot]}\n",
  "radeon6": "{} {return \"<@radeon> guys which is better, redhat or mandrake?\"}\n",
  "circle2": "txt {regsub -all \"\\x0f\" [aflip [join [map [seq 10 1] {l {. [string repeat \" \" [fibonacci [expr int($l / 1.2)]]] [subst $txt]}}] \\n]] \"\"}\n",
  "STsailingboat": "{} { return \"    _4 _4    \\n   _)_))_)   \\n  _)_)_)_)   \\n _)_))_))_)_ \\n \\\\_=__=__=_/ \";}\n",
  "pt": "args {pix_tag [join $args \",\"]}\n",
  "msnbc": "{} {. msnbc.com - BREAKING NEWS: [?? $::msnbc_subject]}\n",
  "cosinewavetrannies": "{} {cosinewave [join [map [trannies] {word {. \"\\00300,[gridse_colour] $word \"}}] \"\"]}\n",
  "mroach_item": "{} {lindex_random $::mroach_item}\n",
  "gaymail": "{} {gayf [spamemail]}\n",
  "strip_buf": "args {return [regsub -all buffelo [. $args] {} ]}\n",
  "negronics2": "{} {return \"The rationale for negronics is that blackness may be reversible in the future if performed soon enough, and that negropreserved people are not dead by the modern information-theoretic definition of death.\"}\n",
  "buttesfart": "{} { ajoin \" \" [buttesfort:fort] [fart] }\n",
  "blargh": "{} {. <@Blargh> [blargh_word]}\n",
  "array_random": "arr { uplevel [list set ${arr}([?? [uplevel [list array names  $arr]]])] }\n",
  "trumpet": "{} {join {{                                                               /|} {  NO ONE PLAYS ME   XYX XYX XYX  ,-.     LIKE RADEON         .' |} {,-.__________________H___H___H__(___)_____________________,-'   |} {| ||__________________________________________ ___ `._____      | toot toot} {`-\"   / /           | | | | | |               |   `.     `-.   |} {     | |            | | _ | | |   ,-.         |    | |       `. |} {     | |    ________| ,\"_)| | |__(___)________|_   | |         |} {     '   .' ________).`-.|-| |_______________|_\\_.' / |} {       `-`._________)|`-'|-| |____________________.'@/} {       `------------|_| |_| |_|-----------------'J `-'} {}} {\n}}\n",
  "STbox": "{} { return \" ,-------'--,\\n|\\\"\\\"\\\"\\\"|\\\"\\\"\\\"\\\"|'|\\n|____|____| |\\n|    |    | |\\n|____|____|,'\";}\n",
  "mullah": "{} { return \"[upper [kill_verb] those who [insult_verb] islam.] Thus says the prophet: [koran] ALLAHU AKBAR!\"; }\n",
  "ramsex": "{} {join [list {     __} {    /..\\ } {   .\\_O/ ROM Sex} {  /  \\  I'll RAM your ROM} { /  \\ \\  down to the BUS      } {/ ._/( )__________} {\\. 8==@          /|} { /_/ /----------/} {(__) ||||||||||||}] \\n}\n",
  "randmeasure": "{} {return \"http://[singlerandomword].on.nimp.org/?u=buttes\"}\n",
  "tcpip": "{} {return \"http://product.half.ebay.com/TCP-IP-for-Dummies_W0QQtgZinfoQQprZ2384586\"}\n",
  "gobragh": "{} {return \"I'll tell you a story of a [oneoff] in the town,\\nWhen the [colour] [clothing] went on and the [title]'s [clothing] came down\\n'Twas the most [adjective] and least [adjective] thing ever you saw,\\nAnd they played the best games played in [string totitle [name]] Go Bragh.\"}\n",
  "stock": "{symbol args} {\n  set stock_info [stock_info [concat [list $symbol] $args]]\n  set rows [list]\n\n  foreach info $stock_info {\n    array set i $info\n    if {$i(change) == 0} {\n      set dir \" \"\n      set color [color default]\n    } elseif {$i(change) < 0} {\n      set dir â\n      set color [color red]\n    } else {\n      set dir â\n      set color [color green]\n    }\n    \n    lappend rows [list          $i(name)                  [^B]$i(last_trade)        $color$dir                $color$i(change)          $color\\($i(change_rate))  $i(market_cap)            ]\n  }\n  \n  drawtable2 $rows {} {} {left right left right right right}\n}\n",
  "jewing": "{} {return \"[ups]\\n[downs]\\n[quid]\\n[eurofag]\\n[incogs]\"}\n",
  "reality": "{} {return \"\u00034\u0002HARK HARK! POOPY MARK! \\nWIGGER KING OF THE TRAILER PARK!\u0003\"}\n",
  "lmerge": "args {set max 0; foreach l $args {if {[set length [llength $l]] > $max} {set max [llength $l]}};set ret [list];for {set i 0} {$i < $max} {incr i} {foreach l $args {lappend ret [lindex $l $i]}};return $ret}\n",
  "clapclap": "{} {subst [next_in_list $::oolist]}\n",
  "mmbuster": "{{who {}}} {if {$who eq \"\"} {set who [lindex_random [names]]}; return \"$who [master_col [int [expr rand()*5+1]]] [master_col [int [expr rand()*5+1]]] [master_col [int [expr rand()*5+1]]] [master_col [int [expr rand()*5+1]]] Perfect Matches [rand 3] Not So Perfect Matches [rand 3] Misses [rand 2]\"}\n",
  "d_a": "{} {return \"<@darren> [subst [?? $::d_as]]\"}\n",
  "not_aim": "args { regsub \".aim\" [eval aim $args] \".aim:not\" }\n",
  "aimyiff": "{{dong {}}} {aim -n [aimname $dong] \"*[furry_verb] your [furry_noun]* [choose {} [murrpurr]]\"}\n",
  "test_3": "{} { catch { onehug } v; return $v }\n",
  "spacecowsucks": "args { apply {stampsay -s spacecow} {<BURK> im trying to fix it nigger} }\n",
  "niggerfart": "{} {niggerize [sfart]}\n",
  "smile": "args { set eye [format %c [expr [rand 93] + 33]]; if {[llength $args] != 0} { set eye [lindex $args 0] } {}; set smile_parts {}; lappend smile_parts $eye; lappend smile_parts [string repeat [lindex_random $::smile_mouth_parts] [rand 15]]; lappend smile_parts $eye; extend_smile [join $smile_parts \"\"] }\n",
  "halloweenjack": "{} {goonsay \"My only regret is that I cannot vote this thread a 6.\"}\n",
  "QuestionUrReality": "{} {. \"http://www.youtube.com/watch?v=NpFu_bYkomc#t=6m34s\"}\n",
  "busy_wait": "{{sec 1}} {set doc \"waits til the next second\"; set start [clock seconds]; while {[expr [clock seconds] - $start] < $sec} { }; return $start}\n",
  "evens": "list {every_n_from 2 0 $list}\n",
  "mccain_rwb": "{} {eval rwb [split [mccain_slogan]]}\n",
  "angryboner": "{{size nigger}} { if ![regexp {\\d+} $size] {set size [expr {int(rand() * 30) + 10}]} elseif {$size > 200} {set size 200}; return \"(_(_)[string repeat = $size]D:<\" }\n",
  "adventures_of_moira_": "{{n {}}} {if {$n eq \"\"} {?? [adventures_of_moira_comics]} {lindex [adventures_of_moira_comics] [+ $n 1]}}\n",
  "Sniper_Jesus": "{} { return [+c] }\n",
  "darren_date": "args {magick-concat_scheme [kiwigirl] [caption [img-darren 2] [join $args]]}\n",
  "theshitdevil": "{} {apply [?? {wet bt bgt bt2 rainbow pink stampsay savagesay pyramid rain pooify gudrize niggerize chinkerize figlet americanize chinkerize colorize lacist columnize corrinize csam_dikkyize csammize nimpify underscoreize gayflagify grapefruitize fullwidth unicode_abuse {image-say [gis [random_word]]} {image-say [pt [random_word]]} }] {\"the shit devil\"}}\n",
  "semen": "{pissing_on breakfast_cereals space} {set _finline_functions $_fcaller_saves; lappend sex_wrestlin [setnoradio [yiffs4furs] [radeon6 $Christ_killers]]; lappend peer_pressured [pisseveryoneoff [import_sn [addfetish] $garbage_can_with_a_bullet_hole]]; return $skinning}\n",
  "neccosnack": "{} {return \"THROBBING YIFFY FOXCOCK\"}\n",
  "khan": "{} {return \"WELL DONG COMMANDER\"}\n",
  "loves": "{{str {}}} {if {$str eq \"\"} {set str [name]}; return \"$str loves [strip_u [fetish_porn]]\"}\n",
  "seinfeld": "{{what {}}} {if {$what eq \"\"} {set what [seinfeld_word]}; set ret \"<[lindex_random [names]]> and what's the deal with $what?\" ; return $ret}\n",
  "FISHMECH": "{} {rain [german [norway [goonsay [catsay [rocketcatsay [nigqdb]]]]]]}\n",
  "drudgelegend": "{} {return \"[celebrity] doesn't \\\"buy the whole story\\\" of [political_figure] being [legendtitle]\"}\n",
  "aimlert": "{{who octalc0de}} {aim -n $who [alert]}\n",
  "uname": "{{str {}}} {if {$str eq \"\"} {uname_base} {return \"<$str> [uname_base]\"}}\n",
  "jrelol": "{} { subst [lindex_random $::jrelol] }\n",
  "blackjack_init": "{} { blackjack_shuffle; blackjack_unset; array set ::blackjack_bid [list dealer 1]; blackjack_bid dealer 1; }\n",
  "dumbest": "{} {subst [lindex_random $::dumbest_dict]}\n",
  "dongboy": "{} {return \"      |||\\n     O_O\\n    _/ /\\n   /( Y)\\\\\\n  ^  /\\\\  ^\\n    `  `\"}\n",
  "nethack:vwall": "{} { return \\342\\224\\202 }\n",
  "sum": "args {expr [join $args +]}\n",
  "eq": "{a b} { if {$a == $b} { return 1 } { return 0 }}\n",
  "MB9": "{} {. 100% maple spread with three pieces of strip bacon and six Canadian bacon. Sweet, salty SMOKEY and delicious. This is what is tastes like when pigs cry. [mmm]}\n",
  "burk2": "{} {return \"hi my name is burk; when im [booze_act_word] too much [drink] i have orgies on top of [tranny_word]\"}\n",
  "pewpew": "{{who {}}} {return \"  ___[color red]|[color]_[color blue]|[color]_       __\\n / __[color red]|[color]_[color blue]|[color]_\\\"  [color green]8==[color]/..\\\\[color green]===D[color] PEW PEW U DEAD, [string toupper [join [name $who]]]\\n/ (( [color red]|[color] [color blue]|[color]       \\\\_O/\\n`-'\"}\n",
  "whatisalice": "{} {. http://i.conio.net/what-is-alice.png}\n",
  "unsult": "{{who {}}} {if {$who eq \"\"} {set who [lindex_random [names]]}; return \"hey, [name $who]! you [faglame] [unplural [ethnic_group]]!\"}\n",
  "STpig": "{} { join $::pig \\n }\n",
  "swineflu_text": "{{name {}}} { . \\026[or $name [name]]\\026, \\002ARE YOU READY TO TAKE THE \\0034,0SWINEFLU  PLEDGE?\\003\\0039 I PROMISE IF I GET \\026SWINEFLU\\026 TO VISIT AS MANY MALLS AS I  CAN. IN THE EVENT OF MY POSSIBLE DEATH I WILL TRY TO COVER UNSUSPECTING PEOPLE  WITH MY GERMS AND HUMAN GOO.\\nhttp://magick.buttes.org/temp/0980d4e4d94c028248621dd2f7896098.png\\n}\n",
  "fw": "args {set block [list {} [join $args]]; fullwidth_with_formatting [yield]}\n",
  "jsilver": "{} zewb\n",
  "kanyevision": "img {magick composite $img fe0b2bc6e9d96d23b3e12eda8fce5bf1 0 0}\n",
  "sapasswd": "{} {set strlen 0; while {$strlen < 12} {set str [hacker [string map {{ } {}} \"[lindex_random [seq 1 9]][crw_word][faglame][lindex_random {\".\" \"#\" \"!\" \"?\"}]\"]]; set strlen [string length $str]}; return $str}\n",
  "odin": "{} { lindex_random $::odin }\n",
  "edwards": "{} {return \"Isn't it true that [random_word] caused [name]'s [disease_word]?\"}\n",
  "randlang": "{{who {}}} {return \"[name $who] is fluent in [language], [language], [language] and [language].\"}\n",
  "lambda": "{v f a} {set r [list];foreach q $v {upvar $q $q};foreach $v $a {lappend r [uplevel $f]};join $r}\n",
  "km_plot": "{} {. \"\\\"[ucwords [?? $::kalleboo_mroach_dict]][sequel]\\\" ([string totitle [genre]], [+ 1982 [rand 26]]) tells the story of [randor {Michael Roach} {Karl Baron}] ([celebrity]) growing up in a [era] [randor [state] Sweden], coping with [?? $::kalleboo_mroach_dict], [?? $::kalleboo_mroach_dict], and [?? $::kalleboo_mroach_dict]. [review]\"}\n",
  "caption_raw": "{image_url text} {image-rel-border [magick-stack-gen $image_url [latext $text] 30]}\n",
  "tinylatte": "{} {. \" _S_\\nc\\\\_/\"}\n",
  "gbsaim": "{{name {}}} {if {$name eq \"\"} {set name [lindex_random $::gbs_aim_dict]}; return \".a\\im $name [gbs]\"}\n",
  "chinkamond": "{} {diamond xia}\n",
  "waplugin": "args { return \"There's a winamp plugin that adds $args to all my music\"}\n",
  "find_in_globals": "args {set ret [list];foreach g [info globals] {if {[array exists ::$g]} {} {if {[string first [join $args] [set ::$g] ] != -1} {lappend ret $g}}};set ret}\n",
  "magick": "args {~apply magick_uncached $args}\n",
  "fileext": "t {set x [wget http://shell.windows.com/fileassoc/0409/xml/redir.asp?Ext=$t];set d [lindex [regexp -inline {<b>Description: </b>\\n(.*?)\\n<BR />} $x] 1];return \"File extension: .$t\\nDescription: $d\"}\n",
  "mixduptransistor": "{} {return [rainboner [rand 50] mixduptransistor]}\n",
  "gaypyramid": "{{who {}}} {if {$who eq \"\"} {set who [lindex_random [names]]}; return \"\u0002[gaybow [pyramid $who]]\u0002\"}\n",
  "stripe": "{} {return \"\u0016  \\n  \u0016\\n\u0016  \\n  \u0016\\n\u0016  \"}\n",
  "_count": "{} {set list {};set var \"\";foreach var {a b c d e f g h i j k l m n o p q r s t u v w x y z} {lappend list [info proc $var*];};return [llength [lindex list 0]];}\n",
  "nuremberg": "{} {return \"[german \"i never committed that [crime], it was the [ethnic_group] all along!\"]\"}\n",
  "omgwtf": "{} {exec echo \"lol\"}\n",
  "wetback": "{} {bgt puntme}\n",
  "randbm": "{base max} { return [expr $base + [rand [expr 1 + $max - $base]]] }\n",
  "perlop_grep": "{} {?? {< > <= >= lt gt le ge == != eq ne ~~}}\n",
  "babel": "{langs text} {lindex [regexp -inline {<div style=\"padding:\\s*0.6em;\">([^<]*?)</div>} [http post http://babelfish.yahoo.com/translate_txt lp $langs trtext $text]] 1}\n",
  "janitor": "{} {join [list [bt information] \"\\n \\n\" [bt technology] \"\\n \\n\" [bt janitor]] \"\"}\n",
  "hotbutton": "{} {lindex_random $::hotbuttons}\n",
  "year": "{} {clock format [clock seconds] -format %Y}\n",
  "web2_job": "{} {?? $::web2_jobs}\n",
  "skywishes": "{} catbus\n",
  "alert_base": "{} {pick 1 alert1 1 alert2}\n",
  "spoilspook": "{{count 6}} { spoiler [spook $count] }\n",
  "biggaytext": "{{str {}}} {text gaychar $str}\n",
  "SThorse1": "{} { return \"      _  _   \\n    _^>\\\\/<^  \\n  ^/  6 6)   \\n ^/  ,  (    \\n^/  /\\\\\\\\..)   \";}\n",
  "image-gunman": "img { image-gunman-face [image-akimbo $img] }\n",
  "foldxo": "{_x _y _dfl _list _code} {upvar $_x $_x; upvar $_y $_y; set _ret $_dfl; set $_y $_dfl; foreach $_x $_list { set _ret [uplevel 1 $_code]; set $_y $_ret}; return $_ret; }\n",
  "SToblique": "{} {ncock 0}\n",
  "root?": "{} {set rootusers 0; set userswhoareroot \"\"; foreach darren [string tolower [names]] { if [regexp {^root@.?} [hostmask $darren]] { append userswhoareroot \"$darren \"; incr rootusers; }; }; return [c \"$rootusers ROOT USERS:\" [join $userswhoareroot \",\"]];}\n",
  "gayholes": "{} {cache put lol lol [?? $::ass_verb_past_tense]; . [gis [cache get lol lol] gay holes]\\n[bold][color red][upper [cache get lol lol]] GAY HOLES}\n",
  "SThypnotic": "{} {return \",_________       __________ \\n\\\\   @    |    \\\\  |      @ /\\n \\\\______/      \\\\  \\\\______/\\n                \\\\    \\n                /      \\n  \\\\_____________________\\n\"}\n",
  "kkkchat": "{} {join {{                   __              _|} {            /(   /| |'-.          /XX\\\\} {           ('')  || |   |         \\_O/} {        _ /   \\_ \\|_|_.-'         _==_} {       | /   ___\"._) (_          /    \\\\} {       |/   (  |\"\"\"\"\"\"\"\"\"|    NO NIGGERS ON} {       |(    \\ |         |      KKK CHAT} {       ;\"\"\")  \\|         |} {        )/\"   /|.-------.|} {       ' \\___/ \"         \"}} \\n}\n",
  "troll_me": "{} { set out [lindex_random $::cached_troll_me_raw]; if {[rand 6] == 0} { catch { set out [troll_me_raw]; lappend ::cached_troll_me_raw $out} }; return $out; }\n",
  "nordsay": "{{args {}}} {goonsay [norway [join $args]]}\n",
  "STspade2": "{} { return \"     ,-.     \\n    \\[   ]    \\n  ,'\\\"\\`-'\\\"\\`.  \\n  \\`._.!._.'  \\n      A      \";}\n",
  "set_mypix": "flickrid {set ::flickrid([nick]) $flickrid}\n",
  "pisseveryoneoff": "{} {mapx [names] x {subst [HCOLOR [rand 12]]$x}}\n",
  "lolgorf": "lol { flip [gorf [lol $lol]] }\n",
  "political_flag": "{} {choose [mccain_flag] [obama_flag] [hillary_flag] [edwards_flag]}\n",
  "african_capital": "{} {lindex_random $::african_capitals}\n",
  "retrieve_poop": "{} { . \"You retrieved the poop! :]~\" }\n",
  "aimf_seinlords": "args {aimify seinlords $args}\n",
  "STfageordrzej": "{} {. \"  ______\\n |\\[[rainbow =====][color]]\\n/     >  \\\\\\n\\\\_____[color fuchsia]O[color]__/\"}\n",
  "chefspecial": "{} {. Chef's Special: [bold][string toupper [crw_word]]}\n",
  "faggotpride": "{} {return \"\u0002\u00034,4                   \\n\u0002\u00031,7   FAGGOT PRIDE    \\n\u0002\u00031,8    NETWORK WIDE   \\n\u0002\u00039,9                   \\n\u0002\u00030,12  irc.buttes.org   \\n\u0002\u00036,6                   \u0002\"}\n",
  "thismuch": "x { return \"/)[string repeat \" \" $x](\\\\\" }\n",
  "buttesmandala": "{} { aflip [randart] }\n",
  "CoryDoctorow": "{} {return \"<[name]> [hotbutton]\\n<CoryDoctorow> haha\"}\n",
  "count_nicks": "mask { set mask [string tolower [regsub {s?\\?$} $mask \"\"]]; set count [llength [intersect [eval . \\$::$mask] [lc [names]]]]; switch $count {0 {return [lol \"not a ${mask} in sight\"]} 1 {return [c ${count} ${mask}] } default {return [c ${count} ${mask}s]}}}\n",
  "pad_lines": "lines {drawtable [map [lines $lines] {line {. [list $line]}}]}\n",
  "repeatblock": "{block {count {}}} {if {$count eq \"\"} {set count [expr [rand 8]+2]}; set n \"\";set o \"\"; set lines [split $block \"\\n\"]; for {set i 0} {$i < [llength $lines]} {incr i} {append o \"$n[string repeat [lindex $lines $i] $count]\"; set n \"\\n\"; }; return $o;}\n",
  "saqs_password": "{} {return l34ts4q}\n",
  "hinecco": "{{who necco}} {smega {strcat \"<[name]> $who: [greeting] [animal_word] [sex_do]er!\"}}\n",
  "darren4": "{{who {}}} {return [concat \"<[name $who]>\" [lindex_random [concat [darren] $::darren_word]]]}\n",
  "hitler": "{} {return \"you mean bush\"}\n",
  "bush": "{} {return \"you mean hitler\"}\n",
  "STfullgoon": "{} {return \"      __________\\n     (--\\[ .\\]-\\[ .\\]\\n     (_______O__)\\n   ,\\\"`          \\\\\\n  /____/         \\\\\\n  |   |    _______\\\\\\n  \\\\    \\\\_-`_____.__)\\n   `-_ /          |\\n      |      ,`   |\\n      |      |    |\\n      |______|____|\\n      |______,_____,\"}\n",
  "whatcolors": "{} {for { set i 1 } { $i<=99 } { incr i } { return [color 01 on $i]$i };}\n",
  "lollercaust": "{} {return \"\u000308A\u000304B\u000313S\u000312O\u000311L\u000309U\u000308T\u000304E \u000313F\u000312A\u000311G\u000309G\u000308O\u000304T\u000f\"}\n",
  "go:height": "gb { lindex $gb 2 }\n",
  "STgnol": "{} { return \"     _--_--_\\n    / _____ \\\\\\n   / /     \\\\ \\\\\\n  / / ' _ ' \\\\ \\\\\\n | |. )---(  | |\\n | |    .   .| |\\n|  | .    .  |  |\\n|   \\\\  .   ./   |\\n \\\\   \\\\_____/   /\"; }\n",
  "while_not": "e {while 1 { set res [eval $e]; if {$res==\"\"||$res==0} {} { return $res; }; }}\n",
  "angstm": "{{user {}}} {return \"/\\\\ b /\\\\\\n\\\\ o-o /         The Angstmonster\\n |V-V|           Will get you\\n | # |           [name $user]\\n^^^^^^^\"}\n",
  "hidennis": "{} {ajoin \" \" [vflip [cswas]] \"\\n\\n[bt hi dennis]\" [vflip [cswas]]}\n",
  "cartoon_show": "{} {lindex_random $::cartoon_show_dict}\n",
  "spellout": "args {join [map [split [join $args] {}] {char {if [regexp {[a-z]} $char] {. $::spellphabet($char)} elseif [regexp {[A-Z]} $char] {string toupper $::spellphabet($char)} else {. $char}}}]}\n",
  "ffnot": "{{who {}}} {return \"[bt fags for every1]\\n \\n[bt except [name $who]]\\n \\n[bt cuz hes a fag]\"}\n",
  "aimanimaljoke": "args { aim -n [aimname $args] [animaljoke] }\n",
  "lomarf": "args {array set a [args $args];if {[lsearch [array names a] n] > -1} {set n $a(n)} {set n 50};join [mapx [seq 1 [rand $n]] x {lindex_random [concat $a(args)]}] {}}\n",
  "unknown:2:cmd/^\\^(\\^*)(..+)$/": "{matches cmd} {^ [string length [lindex $matches 1]] [lindex $matches 2]}\n",
  "ffya": "{} {. [bgt \"FAGS FOR YOU ALL\"]}\n",
  "permission_permute": "{triple {num 1}} {\n  ;# take a rwx and step it down one level for the next triple\n  ;# num denotes which triple we're operating on, to recognize last one for sticky\n  if {[rand 2]} { set triple [regsub {r} $triple \"-\"] }\n  if {[rand 2]} { set triple [regsub {w} $triple \"-\"] }\n  if {[rand 2]} { set triple [regsub {x} $triple \"-\"] }\n  set triple [regsub {[ST]} $triple \"-\"]\n  set triple [regsub {[st]} $triple \"x\"]\n  if {$num == 3} {\n    if {[rand 5] == 0} { set triple [regsub {x} $triple \"t\"] }\n  } else {\n    if {[rand 5] == 0} { set triple [regsub {x} $triple \"s\"] }\n    if {[rand 5] == 0} { set triple [regsub {x} $triple \"S\"] }\n  }\n  return $triple\n}\n",
  "lorfname": "{} {return \"[swede_first_name] [alshort]\"}\n",
  "fivepillars": "{} {return \"The New Five Pillars of the devout [religious]\\n1. Hate [country]\\n2. Hate [ethnic_group]\\n3. Hate [faglame]s. \\n4. Beat, maim, and kill women and daughters who dont wear their [clothing]\\n5. No [choose [sport] [food_word] [animal] [shakti_word] [crime] [sex_do]ing] on [day].\"}\n",
  "proc1": "{} {return [crw_word]; [proc2]}\n",
  "emoticon": "{} { subst [lindex_random $::emoticons] }\n",
  "phpize": "str {string map {' \\\\' \\\" \\\\\\\" \\\\ \\\\\\\\ ; \\\\; ` \\\\` / \\\\/} $str}\n",
  "omgidetect": "{{who {}}} {aflip [ajoin \"\" [wrap [join [idetect [name $who]]] 50] \"\\n\\\\\" [omgtotem]]}\n",
  "urfm": "name {lastfm:singleuserquery [lastfm:nameunmap $name]}\n",
  "hello": "{{who {}}} {if {$who eq \"\"} {set who [lindex_random [names]]}; set who [strip_color $who]; return \"\u00038,3 S\u00039ince \u00038,6 I\u00039'm \u00038,3 N\u00039ew \u00038,6 T\u00039o \u00038,3 L\u00039ist \u00038,6 I \u00038,3 C\u00039an't \u00038,6 S\u00039tart \u00038,3 B\u00039ut \u00038,6 S\u00039aying \u00038,3 H\u00039ello \u00038,6 [string index [string toupper $who] 0]\u00039[string range [string tolower $who] 1 end] \u000f\"}\n",
  "rot:transposematrix": "strl {\n    set mat [rot:convertstrlist $strl];\n    set dims [rot:maxdims $mat];\n    set w [lindex $dims 0];\n    set h [lindex $dims 1];\n    set newline [list];\n    set out [list];\n    for { set x 0 } { $x < $w} {incr x} {\n        for { set y 0 } { $y < $h} {incr y} {\n            lappend newline [rot:listxy $mat $x $y {\" \" {} 0 0}];\n        }\n        lappend out $newline;\n        set newline [list];\n    }\n    return $out;\n}\n",
  "title": "{} {return [lindex_random $::titles]}\n",
  "my_mom": "{foxcock Jungian_psychology} {set steak \"[winamp] Now Playing: Jnz - Tomorrow...Drunken Prom Queens Of Pleasure (1:18/4:45, 256k)\"; return [jewword $Trevor]; return $I_Can't_Believe_it's_Not_Butter}\n",
  "belikedan": "{} { . \"< dan> [name]\\n< dan> you should type tcl dan\\n< dan> for fun\"}\n",
  "fartingdude": "{} {ajoin \"\" [omgdude]  \"\\n\\n\\n\\n / \\n - \\n \\\\ \\n\" \\n\\n[STfartcloud]}\n",
  "dh": "{} { embed [fedoragoonsay [capital]] \"DH\" 15 7 }\n",
  "swingleboner": "{} {return [rainboner [rand 50] swingler]}\n",
  "tm": "{} {return text[bold]GREAT}\n",
  "direction": "{} {choose \"north\" \"east\" \"west\" \"south\" \"southeast\" \"southwest\" \"northwest\" \"northeast\"}\n",
  "decr": "n { expr $n - 1 }\n",
  "reichs?": "{} {c \"1\" \"REICH\"}\n",
  "will": "{{who {}}} { set who [name $who]; string map {Daring\\ Fireball Seth\\ Godin} [raruler $who] }\n",
  "mydistance": "airport {urdistance [nick] $airport}\n",
  "random_hi": "args {eval [lindex_random $::hello_procs] $args}\n",
  "go:current_game": "{} { return $::current_game }\n",
  "softchat": "{} {rainbow [strip_color [wt2 softchat]]}\n",
  "infected": "{} { . \"infected [format %c [rand 26] + 39]\" }\n",
  "randomgarfieldplusdicksplusdicks": "{} {image-dicksuck [randomgarfieldplusdicks]}\n",
  "Winkie": "{} {. tcl mega Winkie}\n",
  "mccaineyes": "{} {. http://img.waffleimages.com/0e2e154b783bbccc8efa4685a5874cbc18e5e383/McCain-FOX_NEWS.gif}\n",
  "troll_me_raw": "{} { wget \"http://rolloffle.churchburning.org/troll_me_text.php\" }\n",
  "xxxcocks": "{{n 6}} {ajoin \" \" [aflip [flip [ncock $n]]] [aflip [flip [ncock $n]]] [aflip [flip [ncock $n]]]}\n",
  "garfieldplusdicks": "{year month day} {magick composite \"http://picayune.uclick.com/comics/ga/${year}/ga[string range $year 2 3]${month}${day}.gif\" [magick_id [magick resize [img-dick2dick] 197 168]] 399 3}\n",
  "STbat": "{} { strip_all [vflip [STowl]]; }\n",
  "karamm_stats": "{} {upvar #0 karastats s;set o [list];foreach n [array names s] {set g [llength $s($n)];set t 0;mapx $s($n) x {set t [expr $t+$x]};lappend o \"$n: $g games played with average score of [format \"%.2f\" [expr $t./$g]]\"};join $o \\n}\n",
  "average": "{f u c k} {. \"The average of the values $f, $u, $c, and $k is\" [expr ( $f + $u + $c + $k )/4.0] }\n",
  "procpub": "{} {publish [. [string map {\" \" \"\\n\"} [info procs]]]}\n",
  "bogus": "{} {return \"this shit is bogus, [nick]\"}\n",
  "warning": "{} {return [pick 1 relax 1 juden]}\n",
  "STsnake": "{} { return \"  __         \\n <_~\\\\   __   \\n_/ \\\\ \\\\_/  \\\\/|\\n '  \\\\___/\\\\_/ \";}\n",
  "mythbusters": "{} {string map [list \"[channel] is a channel\" \"mythbusters is a show\"] [crw]}\n",
  "what_year_is_it": "{} {clock format [clock scan \"now\"] -format %Y}\n",
  "rain": "str {join [lrain [lines $str]] \\n}\n",
  "all?": "{list {block {x {return $x}}}} {\n  foreach value $list {\n    if [false? [yield $value]] {\n      return 0\n    }\n  }\n  return 1\n}\n",
  "nick": "{} {return $::context::nick}",
  "aimdeadprank": "args { aim -n [aimname $args] [deadprank] }\n",
  "ed_gein": "{} {hypnosay [eval [string map {ww_item geinpart watchandweight coppers} [info body hypnofit]]]}\n",
  "soly": "{} {return \"ghetto black girl haircut business at cc\"}\n",
  "laffed": "return {i laffed lol lmbo}\n",
  "go:render_markup_board": "mboard {join [mapx $mboard row {join [mapx $row elm {go:$elm}] [go:spacer]}] \\n}\n",
  "whatmonth": "args {return \"[color white on black]NOW, THEREFORE, I, BARACK OBAMA, President of the United States of America, do hereby proclaim September 15 through October 15, 2009, as[color red on black] National $args Month[color white on black]. I call upon public officials, educators, librarians, and all the people of the United States to observe this month with appropriate ceremonies, activities, and programs.\"}\n",
  "randart:trans": "{} { return $::randart_trans }\n",
  "gayforpay": "{} { set thecock [cock]; set themoney [dollarsign]; set result $thecock$themoney; return $result;}\n",
  "aimaway": "{{who {}}} {aim -n [aimname $who] [subst [lindex_random $::aimaway]]}\n",
  "relax?": "{} {wet no}\n",
  "sam_url": "{} {string map {{ } {-}} \"http://www.amazon.com/[ucwords [crw_word]] [choose Ruby Prototype Rails JavaScript] [ucwords [crw_word]]/dp/1555836291/ref=pd_bbs_sr_1?ie=UTF8&s=books&qid=1211841755&sr=1-1\"}\n",
  "apache": "{} { return \"It works!\" }\n",
  "smegaslots": "{} {smega {smega {smega {smega {smega {smega {smega {smega {smega {smega {smega {smega {smega {smega {smega {smega {smega {smega {smega {smega {smega {smega slots}}}}}}}}}}}}}}}}}}}}}}\n",
  "chucknorris": "{} {subst [lindex_random $::chucknorris_dict]}\n",
  "mentat": "{} {. It is by will alone I set my mind in motion. It is by the juice of sapho that thoughts acquire speed, the lips acquire stains, the stains become a warning. It is by will alone I set my mind in motion.}\n",
  "clength": "s {\n\tllength [lindex [csplit $s] 0]\n}\n",
  "speedline_segment": "{} {choose { }  {-} }\n",
  "wget_encode": "str {\n  ;# encode the characters that [http get] disallows\n  set chars [list]\n  set seenq 0\n  foreach char [split $str {}] {\n    if { $char == \"?\" && !$seenq } {\n      lappend chars $char\n      set seenq 1\n    } elseif [regexp -nocase {[ \\[\\]\\?]} $char] {\n      lappend chars %[format %02X [scan $char %c]]\n    } else {\n      lappend chars $char\n    }\n  }\n  join $chars {}\n}\n",
  "bhutangirl": "{} {return \"           __ ___\\n         .'. -- . '.\\n        /U)  __   (O|\\n       /.'  ()()   '.\\\\._\\n     .',/;,_.--._.;;) . '--..__\\n    /  ,///|.__.|.\\\\\\\\\\\\  \\\\ '.  '.''---..___\\n   /'._ '' ||  ||  '' _'\\\\  :   \\\\   '   . '.\\n  /        ||  ||        '.,    )   )   :  \\\\\\n :'-.__ _  ||  ||   _ __.' _\\\\_ .'  '   '   ,)\\n (          '  |'        ( __= ___..-._ ( (.\\\\\\\\\\n('\\\\      .___ ___.      /'.___=          \\\\.\\\\.\\\\\\n \\\\\\\\\\\\-..____________..-''\"}\n",
  "rectum": "{} {return \"Damn near killed 'um.\"}\n",
  "wikipedian": "{} {. \"CHECK OUT MY USER BOXES !!!!!1111\\n[smega {. \"[todo_box] THIS USER [upper [choose \"LOVES [choose [trannies] [crw_word] [shsc_word] [crappy_restaurant]]\" \"IS A [choose [faglame] [singleethnic]]\"]]\"} 6]\"}\n",
  "zip": "{l1 l2} {set o {}; foreach first $l1 second $l2 { lappend o $first $second; }; return $o}\n",
  "dontread": "{} {return \"\u000308,08                    \\n\u000308,08                    \\n\u000308,08                    \\n\u000308,08                    \\n\u000301,08\u0002  DONT TREAD ON ME  \"}\n",
  "billymays": "{} {. \"HI BILLY MAYS HERE FOR\" [upper [random_word] [random_word]]}\n",
  "odds": "list {every_n_from 2 1 $list}\n",
  "aimf_fandom": "args {aimify fandom $args}\n",
  "engimos?": "{} {. \"[count_nicks engimo] ...but it's 1 too many\"}\n",
  "lmoob": "{} {string map {. â¢} [lmoot âââââ â¢âÍÌ¬Ì­Ì°âââÌ¬â¢â¢ââÌ«Ì«ÌªÌ©ÌÌÌÌÌÌÌ¢Ì£Ì¤Ì£ÌÌÌÌÌÌ²Ì²Ì´Ì¶Ì¶ÌÌÌ­Ì­Ì«Ì«Ì¾ââââï¸¡ââââââ¡â¡Ì¥Ì»Ì¸Ì¢Ì¢Ì»Ì¥ÌÌ¦Ì¦ÌÌÌ²ÌÌÌ«ÌÌÌÌÌÌÌÌÌ°ÌÌ­Ì­ÌÌÌÌ¿Ì¾Ì©Ì©Ì®Ì¬ÌÌ°Ì±ÌÌÌ¢Ì¸Ì¤Ì¢ÌÌ°Ì­ÌÌªÌ¾Ì½ÌªÌ­Ì¯ÌÌ Ì Ì£ÌÌ¢Ì¢]}\n",
  "SThalf_pumoit_head": "{} {string map {___/(__ ___Ã±___} [embed [embed [canvas 15 8] [flip [STmoirahead]] 1 1] [each [lines [STsmallkin]] {l {. \"\\003[next_in_list $::mexico_colours]$l\\x0f\"}}] 2 1]}\n",
  "lgrepi": "{regex list} {set ret \"\";foreach a $list {if {[regexp -nocase $regex $a]} {lappend ret $a}};return $ret}\n",
  "gaybow": "str {set i 2; set ret \"\"; foreach j [split $str {}] {append ret \"\u0003[format \"01,%02d\" $i]$j\"; if {$i == 12} {set i 1}; incr i}; return \"\u0002$ret\u000f\"}\n",
  "service_state": "{} {choose OK UP DOWN UNREACHABLE UNREACHAROUND SLANTED}\n",
  "lispy": "{} { stampsay -s lispmonster [lispquote] }\n",
  "berp": "{{n 0}} {if {$n == 0} {set n [rand 1 10]}; . b[string repeat r [rand 1 $n]][string repeat a $n][string repeat p [rand 1 $n]]t}\n",
  "shsc_goon": "{} {goonsay [join [lrange [split [charliex] \\n] 1 end]]}\n",
  "problem": "{{lang {}}} {return \"Some people, when confronted with a problem, think \\\"I know, I'll use [computer_language $lang].\\\"  Now they have two problems.\"}\n",
  "mytemp": "{} {urtemp [nick]}\n",
  "homo": "{} {return [rainbow HO\\n\u0002MO\\n\u0002SE\\n\u0002XU\\n\u0002AL]}\n",
  "cspc": "{arga argb argc} {return \"[color $arga on $argb][join [times [expr $argc +1] {}]]\"}\n",
  "bmi_calc": "{lb in} {set bmi [expr $lb * 703 / pow($in, 2)]; return [expr floor([expr $bmi *  10])/10] }\n",
  "miniokey": "{} { return \"ï¿½_.\" }\n",
  "burk": "{} {?? $::burk_dict}\n",
  "kreesj": "return {17:46 < kreesj> I enjoy having sex with slaughtered christians}\n",
  "first_items": "l {map $l [& car]}\n",
  "assert_equal": "{expected actual {message {}}} {\n  set full_message [or $message \"$expected expected but was\\n$actual.\\n\"]\n  assert_block {expr {$expected eq $actual}} $full_message\n}\n",
  "walloffrot": "{} {ajoin {} [frotamid] [frotamid] [frotamid] [frotamid] [frotamid] [frotamid]}\n",
  "winkies": "{} {set ret \"\"; set n [rand 23]; foreach m [seq 1 $n] { append ret [name] \" \"; }; return \"\u0002$n WINKIES FOUND\u0002: $ret\";}\n",
  "lc": "args {string tolower [join $args]}\n",
  "sirenize": "args {apply {ajoin [siren]} [split [string toupper [join $args]]]}\n",
  "buttt": "{} {return \"!butt tcl buttt\"}\n",
  "dry": "args {flip [wet $args]}\n",
  "stairs": "{} { join [map [zip [seq 1 9] {{`_`} {,'/} {:O} {`,\\ } {,Â¯.} {/,'} {O:} {\\',} {`_`}}] {{a b} {. [string repeat \" \" [* 3 $a]] \\\\__ $b }}] \\n}\n",
  "pumpscii": "args { cwget http://wepump.in/ascii/$args.txt  }\n",
  "firsttheycame": "args {set ret \"\"; for {set i 0} {$i < [llength $args]} {incr i} {if {$i == 0} {append ret \"First\"} else {append ret \"Then\"}; append ret \" they came for the [lindex $args $i]s, and I didn't speak up because I wasn't a [lindex $args $i]\\n\"}; return $ret}\n",
  "waspname": "{} {return \"[waspfirstname] [waspsurname]\"}\n",
  "fmap": "{l args block} { set acc [list]; foreach $args $l { lappend acc [eval $block] }; return $acc; }\n",
  "pee": "{} {return \"o \u00038.--.\\n+\u00038/    .   \u000fI LIKE TO PEE\\n/\\ \u00038    :    \u000fINTO THE SEA\\n  |\u00038    :\\n\u000312/(_/(_/(_/(_/(_/(_/(_/(_/(_\u000314by egg\u000f\"}\n",
  "STdoczej": "{} {. \"     ______   \\n    ===(_)==  \\n    | o  o |  \\n   (    7   ) \\n  /   '--'   \\\\  \\n  \\\\____ .____/   \\n    __)  (__   \\n /\\\"`/`\\\\`V/`\\\\`\\\\ \\n/   \\\\  `Y _/_ \\\\\"}\n",
  "mohammed": "args {if {$args eq \"\"} {set args [/^islam(_\\\\d)?$/]}; ajoin \"    \" [STmohammed] \\n\\n\\n\\n\\n[wrap [string toupper [join $args]] 12]}\n",
  "!,": "{listname string} {\n  ;# remove string with value $string from list named $listname\n  set mylist [set ::$listname]\n  set index [lsearch -exact $mylist $string]\n  if { $index != -1 } {\n    lremove ::$listname $index\n    return \"Removed item $index from \\$::$listname\"\n  } else {\n    error \"Item \\\"$string\\\" not found in \\$::$listname\"\n  }\n}\n",
  "acroclear": "c {unset ::acronym($c)}\n",
  "loaf2": "{} {. l[join [repeat [rand 1 4] {. [?? {o a oa}][?? {r m f rf lf}]}] {}][?? {yl {}}]}\n",
  "cjoin": "c {\n\tset r \"\"\n\tset e [expr [llength [lindex $c 0]]-1]\n\tset o [lindex $c 0]\n\tset p 0\n\tforeach f [lindex $c 1] {\n\t\tappend r [join [lrange $o $p [expr [lindex $f 0]-1]] \"\"]\n\t\tappend r [lindex $f 1]\n\t\tset p [lindex $f 0]\n\t}\n\tappend r [join [lrange $o $p end] \"\"]\n\treturn $r\n}\n",
  "aimf_init": "args {aimify init $args}\n",
  "aom": "args {adventures_of_moira $args}\n",
  "STkitty": "{} { return \"   /\\\\/\\\\      \\n  /o.o \\\\     \\n  \\\\_^__/\\\\_   \\n   | ,    \\\\  \\n  (_(_,____| \";}\n",
  "obama_name": "{} {set left [string trimright [word o(?:b(?:a)?)?$] oba]; set right [string trimleft [word ^(?:a|ma|ama)] ama]; return \"${left}obama${right}\"}\n",
  "rumour": "{} {return \"learn to spell, faggot\"}\n",
  "magick_composite_top_right": "{urlbottom urltop} {magick_scheme (let ((img (image $urlbottom)) (ape (image $urltop ))) (composite img ape (- (width img)  (width ape)) 0))}\n",
  "stars": "score {. [times $score â®] [times [expr 5 - $score] â©]}\n",
  "hugbox": "{{name {}}} {ajoin \"\" [flip [ncock 2]] \\n\\n\\n[name $name] [ncock 2]}\n",
  "sa_all_threads": "{} {set ret [list]; foreach {forumid threads} [array get ::SA] {foreach thread $threads {lappend ret $thread}}; return $ret}\n",
  "strip_tags": "args {regsub -all {<[^>]*>} [regsub -all -nocase {<(script|head|style|span|br)[^>]*>} [string map $::html_preescape [join $args]] {}] {}}\n",
  "dndattribute": "{} {return [lindex_random $::dndattribute]}\n",
  "tacotown": "{} {. http://clintecker.com/taco-town.wav#.mp3}\n",
  "butteslitefm": "{} {drawtable [subst [wget http://localhost/cgi-bin/lastbutte.pl?u=[join $::lastfm_cockes_usermap ,]]] {default red green}}\n",
  "blakedead": "{} {string map {\"[ -]\" \"[ x]\"} [stampsay -s blake \"I was done in by Dr. [indianname] [?? {S K V}]. [indianname], M.D., [honourary]\"]}\n",
  "catbus": "{} {subst \"<Catbus> [lindex_random $::catbus]\" }\n",
  "brits?": "{} {  set i 0;foreach brit $::brits {  set i [expr $i + [llength [lfilter $brit  [string tolower [names]]]]] };c $i brits}\n",
  "glxgears": "{} {set frames [rand 100000]; set fps [expr {$frames/5.0}]; format \"%d frames in 5.0 seconds = %.3f FPS\" $frames $fps}\n",
  "eh": "{} {return [egghead]}\n",
  "hotproz": "{} {return [egghead]}\n",
  "tvpost": "{message {subject {}} {poster {}}} {if {[clock seconds] <= ([cache fetch bpost last {. 0}] + 10)} {error \"not so often jew\"}; cache put tvpost last [clock seconds]; set id [tvthread]; http post http://zip.4chan.org/tv/imgboard.php resto $id name $poster com $message pwd gapp mode regist sub $subject; . posted: http://zip.4chan.org/tv/res/$id.html}\n",
  "pbr": "{{crapbeer heineken} {greatbeer {PABST BLUE RIBBON}}} {string toupper \"$crapbeer??!! fuck that shit! $greatbeer!!\"}\n",
  "narcotic": "{} {lindex_random $::narcotics}\n",
  "smegma": "{cmd args} {smega \"$cmd $args\"}\n",
  "STgoonigger": "{} {return \"  [nighair]\\n [color white on black](--\\[ .\\]-\\[ .\\][color]\\n [color white on black](_______[color red on black]O[color white on black]__)[color]\"}\n",
  "sdraw": "bitmap {join [map $bitmap {line {join [map [split $line {}] {char {if $char {invert \" \"} {. \" \"}}}] \"\"}}] \\n}\n",
  "aimtattle": "args { aim -n [aimname $args] [tattle] }\n",
  "moiraspew": "{} {ajoin \"\" [crop [moiracam4] 1 1 24 8] [subst [regsub -all {\\S} [crop [moiracam4] 25 1 12 8] {[spew 1][color]}]]}\n",
  "pubmoiracam": "{} {publish [strip_color [moiracam]]}\n",
  "trace:dep_r": "{proc args} {set call [first [join $args]]; if ![string length [array names \"::trace_$proc\" $call]] { set \"::trace_${proc}($call)\" 0; }; incr ::trace_${proc}($call); }\n",
  "aimf_odinesque": "args {aimify odinesque $args}\n",
  "pigiron": "{{n 5}} {. [nignog $n \"I fooled you.\" \"I got pig iron.\"] I got all pig iron.}\n",
  "aimnorris": "{{args {}}} {aim -n [aimname $args] Check out this funny joke: [chucknorris]}\n",
  "incogw": "{} {return \"incog is currently watching: [lindex_random $::animulist]\"}\n",
  "virusfile": "{{who {}}} {return \"[underscore [expr {int(rand()*15)+5}]_year_old_[celebrity]_[fetish_porn]_[gudrow_word]_[sex_act]_[food_word]_with_[name $who]_[goon_word]_and_[faglame]_[ethnic_group][virusextension]]\"}\n",
  "fmr": "{} {cooliegoonsay [chinkerize [fml]]}\n",
  "soly2": "{{who {}}} {stampsay -s goonigger \"HAY [upper [name $who]] MAH [upper [body_part]] STANKS\"}\n",
  "unprefixed": "str { if {[expr [llength $str] > 1]} { return [without_first_word $str] } { return $str }}\n",
  "qqqqq": "{} {return [capitalize $::t]}\n",
  "electionprank": "{} { . [siren] [b][subst [?? $::electionpranks]][b] [siren]}\n",
  "8)))": "{} {mega rain \"8))\"}\n",
  "niggerplace": "{} {set ff  {{[capitalize [niggerword]sville]} {Mt. [capitalize [niggerword]]} {The [capitalize [niggerword]] Seas} {The [capitalize [fecal_shape]] [capitalize [niggerword]] Plains}}; return [subst [lindex_random $ff]];}\n",
  "darren2": "{} {return \"[biggaybowtext darren] OuR LiL KiWi\"}\n",
  "rot:rotatematrix90": "strl {\n    set mat [rot:convertstrlist $strl];\n    set dims [rot:maxdims $mat];\n    set w [lindex $dims 0];\n    set h [lindex $dims 1];\n    set newline [list];\n    set out [list];\n    for { set x 0 } { $x < $w} {incr x} {\n        for { set y 0 } { $y < $h} {incr y} {\n            lappend newline [rot:listxy $mat $x [expr $h - $y - 1] {\" \" {} 0 0}];\n        }\n        lappend out $newline;\n        set newline [list];\n    }\n    return $out;\n}\n",
  "google2": "pattern {set result [last [regexp -inline {HREF=\"([^\"]+?)\">here</} [last [http get \"http://www.google.com/search?hl=en&btnI=I%27m+Feeling+Lucky&q=$pattern\"]]]]; if ![string length $result] { . \"No results found\"; } else { . \"\\002$pattern\\002: \\x1f$result\\x1f\"; }; }\n",
  "cakedrink": "{} {string repeat x 2147483644}\n",
  "cat_mac": "{} {. [catsay [feature]]}\n",
  "crange": "{s b e} {\n\tset c [csplit $s]\n\tset r [c_at_n $s $b]\n\tset e [expr [regsub \"end\" $e \"[llength [lindex $c 0]]-1\"]]\n\tset o [lrange [lindex $c 0] $b $e]\n\tset p $b\n\tforeach f [lindex $c 1] {\n\t\tif {[lindex $f 0] > $b && [lindex $f 0] <= $e} {\n\t\t\tappend r [join [lrange $o [expr $p-$b] [expr [lindex $f 0]-$b-1]] \"\"]\n\t\t\tappend r [lindex $f 1]\n\t\t\tset p [lindex $f 0]\n\t\t}\n\t}\n\tappend r [join [lrange $o [expr $p-$b] [expr $e-$b]] \"\"]\n\treturn \"$r\"\n}\n",
  "keycaproulette": "{} {apply checkb [repeat 3 {. \"[keycap]   \"}]}\n",
  "aimsplain": "{{n {}}} {set n [aimname $n];aim -n $n [explain $n]}\n",
  "geil": "{} {say [say GEIL\\ RAM]}\n",
  "andy_adventure": "{} {return \"You begin your quest in a shitty IRC channel in [city]. In your inventory you have [winkz_word], [niggerword], [adjective] [winkz_word] and 2 [winkz_word]s. To the [direction] is some [winkz_word]. To the [direction] is a couch.\"}\n",
  "assert_block": "{block {message {assert_block failed.}}} {\n  if ![uplevel $block] {\n    error $message\n  }\n}\n",
  "unknown_fuzzy_find_command": "{pattern resultvar} {set query [unknown_fuzzy_normalize $pattern]; set matches [list]; foreach proc [info procs] {if {$query eq [unknown_fuzzy_normalize $proc]} {lappend matches $proc}}; if [llength $matches] {uplevel [list set $resultvar $matches]; return 1} {return 0}}\n",
  "jtwat": "name {set s \"@[twatname $name] [string tolower [jerkcity]]\"; if {[string length $s] >= 140} { jtwat $name } { heynot $s } }\n",
  "gaybowchar": "c {set c [string toupper $c]; if ![info exists ::alphabet($c)] {return [join [string repeat \"{   } \" 5] \\n]}; set ret [list]; foreach line [split [decode $::alphabet($c)] \\n] {set g [gay]; lappend ret [regsub -all {\\*($|\\n| )} [regsub -all {(^|\\n| )\\*} $line \"\\\\1\u0003$g,$g*\"] \"*\u000f\\\\1\"]}; join $ret \\n}\n",
  "wangboner": "{} karaboner\n",
  "dongbus": "{} {return \"dong-bus\"}\n",
  "lastfm:user": "html {lastfm:urlfilter [regsub {^/user/} [regexp -inline  {/user/[^\"\\/]+} $html] {}]}\n",
  "scalaagenda": "{{time 5}} {string map {GAY SCALA DICKS BYTECODE SEX CONCURRENCY COCK JVM BUTT \"STATIC TYPING\"} [gayagenda $time]}\n",
  "macs": "{} {return \"[bigtext one\\ butan]\"}\n",
  "puntme2": "{} {. \"[nick]: there are tears streaming from my eyes im laughing so hard\"}\n",
  "rot:B": "{} { return $::rotB; }\n",
  "shortmystery": "{} {set ret [mystery]; regexp -all \"([^\\n]+)\" $ret {} a; return $a}\n",
  "amoeba": "args {set ret \"\"; append ret [gudrize \"shut up amoeba\"];append ret \\n;append ret [gudrize \"shut up amoeba\"]; append ret \\n;append ret [gudrize \"shut up amoeba\"]; return $ret}\n",
  "kir2": "{} {goonsay Oh, aspie, that's a new one. I'll let you in on a little secret: Several years ago, I was clinically diagnosed with Asperger's Disorder. Yes, I said it. ASPERGER'S DISORDER.}\n",
  "Winkie3": "{{who Winkie}} {. \"<[name $who]> have you ever [lindex_random $::cookin_verb_word]ed [lindex_random $::drug_dict]? \\002ON WEED!?\";}\n",
  "diagnosis_zej": "{{who {}}} {stampsay -l -s doczej [subst [?? $::diagnosis_dict]]}\n",
  "exo": "{} {chatquote exotica}\n",
  "jewing2": "{} {join [ups] [downs]}\n",
  "conspire": "{} {. http://www.pocketsevens.net/sparkle/files/conspire-1.0b4.zip TO REGISTER COPY/PASTE INTO WEB BROWSER: net.pocketsevens.reg.conspire://UHJlcyBCdXRhbg==/GAWQE-FAJZV-3FXLG-XPH9K-D7JZV-5ZHF6-VZP5Z-PAGQC-CUAKB-QE828-JBFWA-5NVYK-BBDDY-EHMMV-82XJP-A}\n",
  "insult_everyone": "{} {return \"[omg] hey [nice_names]! you're all [faglame] [regsub -nocase {s$} [ethnic_group] {}] [regsub -nocase {s$} [goon_word] {}]s!\"}\n",
  "foo": "{string} {\n    foreach i {a b c} {set $i \" \"}\n    array set 7segment {\n    0 {{ _ } {| |} {|_|}}\n    1 {{   } {  |} {  |}}\n    2 {{ _ } { _|} {|_ }}\n    3 {{ _ } { _|} { _|}}\n    4 {{   } {|_|} {  |}}\n    5 {{ _ } {|_ } { _|}}\n    6 {{ _ } {|_ } {|_|}}\n    7 {{ _ } {  |} {  |}}\n    8 {{ _ } {|_|} {|_|}}\n    9 {{ _ } {|_|} { _|}}\n    - {{   } { _ } {   }}\n    E {{ _ } {|_ } {|_ }}\n    r {{   } { _ } {|  }}\n    o {{   } { _ } {|_|}}\n    A {{ _ } {|_|} {| |}}\n    B {{   } {|_ } {|_|}}    \n    C {{ _ } {|  } {|_ }}\n    D {{   } { _|} {|_|}}\n    F {{ _ } {|_ } {|  }}\n    }\n    foreach char [split $string \"\"] {\n        if {$char eq \".\"} {\n            set c [string replace $c end end .]\n        } else {\n            foreach i {a b c} row $7segment($char) {\n                append $i $row \" \"\n            }\n        }\n    }\n    return $a\\n$b\\n$c\n}",
  "blarghsay": "{{args {}}} {if {$args eq \"\"} {set args [string map {\"<@Blargh> \" \"\"} [blargh]]}; stampsay -s gerbil $args}\n",
  "menu_food_suffix": "{} {subst [lindex_random $::menu_food_suffix]}\n",
  "lolamid": "{} {return [pyramid lol\\ ]}\n",
  "reflect2": "args {let {text {join [list [ajoin \"\" \" \" [bgr 7 $text]] [let {lines {join [list \" [lindex $lines 0]\" [lindex $lines 1] \" [lindex $lines 2]\" \"  [lindex $lines 3]\" \" [lindex $lines 4]\"] \\n}} [split [vflip [grbt orange turquoise $text]] \\n]]] \\n}} [join $args]}\n",
  "lrand": "a { lindex_random $a }\n",
  "magick_composite_bottom_right": "{urlbottom urltop} {magick_scheme (let ((img (image $urlbottom)) (ape (image $urltop ))) (composite img ape (- (width img)  (width ape)) (- (height img)  (height ape)))) }\n",
  "sharkddos": "{} {string map [list SHARKS PACKETS HOUSTON [name] {NEW ORLEANS} {ARAB} HURRICANE DDOS RITA [name]] [sharks]}\n",
  "blackjack_bid": "{i a} { blackjack_if_init; array set ::blackjack_player [list $i { } ]; array set ::blackjack_bid [list $i $a]; return $a}\n",
  "whitepower": "{} {return \"SEIG o>\\nHEIL o/\\nSEIG o>\\nHEIL o/\\nSEIG o>\\nHEIL o/\" }\n",
  "rot:col": "{} {return \\002}\n",
  "blakesunglasses": "{} {sunglassify [string map {-] .]} [STblake]]}\n",
  "wolfman": "{} {?? $::wolfman_dict}\n",
  "STbug": "{} {return \"        /\\\\ .---._        \\n       /\\\\/.-. /\\\\ /\\\\/\\\\    \\n     //\\\\\\\\oo //\\\\\\\\/\\\\\\\\\\\\\\\\    \\n    //  /\\\"/`---\\\\\\\\ \\\\\\\\\\\"`-._\\n_.-'\\\"   \\\"`-.`-.\"}\n",
  "gaycast": "args {if {$args eq \"\"} {set city [lindex_random $::forecast_locs]} {set city [join $args _]};join [map1 [split [forecast $city] \\n] {strcat \u0003[gay]}] \\n}\n",
  "review_flags": "{} {return \"[color blue]All flags cleared.  Glines have been issued.  Thankyou for reviewing offensive chats.\"}\n",
  "sat": "{} {return \"[regsub -all { } [split [rand 1600] {}] {.}].\"}\n",
  "blakepat": "{} {. http://i.buttes.org/index.php/http:/photos-c.ak.facebook.com/photos-ak-sf2p/v323/65/21/20500620/n20500620_32323458_935.jpg}\n",
  "mac_flag": "{} {string map {MILLS {ï£¿ ï£¿ ï£¿} {TWO AMERICAS } {ï£¿ ï£¿ ï£¿ ï£¿ ï£¿ ï£¿} {  } { }} [edwards_flag]}\n",
  "overheard_in_als_head": "{} {return \"...\"}\n",
  ":(": "args {. [laugh] you [faglame] [unplural [ethnic_group]]}\n",
  "grapefruit": "{} {return [bold][color orange]grape[color fuchsia]fruit}\n",
  "globpub": "{} {publish [. [string map {\" \" \"\\n\"} [info globals]]]}\n",
  "STfaceman": "{} { return \"   ________\\n  /        \\\\ \\n |          |\\n |//////////|\\n |{(o)}-{(o)}\\n |     \\\\    | \\n |     _\\\\   | \\n |          | \\n  \\\\  ====  / \\n   \\\\______/\"; }\n",
  "randamid": "{} {while [catch {[lindex_random [info procs *amid]]} ret] {}; set ret}\n",
  "dsmile": "{} {. [lindex_random $::dsmileeyes][lindex_random $::dsmilenose][lindex_random $::dsmilemouth]}\n",
  "footlongs?": "{} { c 5 \"dollar footlongs\"}\n",
  "resumeline": "{} {subst [lindex_random $::resumelines]}\n",
  "unknown_lfilter_glob_or_regexp": "{list pattern} {set ret [list]; foreach i $list {if [unknown_match_glob_or_regexp $i $pattern] {lappend ret $i}}; return $ret}\n",
  "lmoot": "args {subst -nobackslashes [string map {{BUTTES CHAT} {[string toupper [join $args]]}} [join $::lmoot_ascii \\n]]}\n",
  "wntd_subject": "{} { lindex_random $::wntd_subject }\n",
  "device_dict": "{} {lindex_random $::device_dict}\n",
  "nigger_ramblings": "{} {return \"[niggername] said \\\"[niggerphrase]\\\" then\"}\n",
  "STnethack": "{} { return \"+---+\\n|>..|\\n|.@.|\\n|f..|\\n+---+\"; }\n",
  "moregpl": "{} {giga {. tcl more @gpl}}\n",
  "shittify": "str {string map -nocase {your ur you're ur you u are r two 2 too 2 to 2 cool kewl dicks dongs} $str}\n",
  "powell": "{{who {}} {what {}} {right {}}} {. \\\"In [choose [channel] \"this country\"] in 15 or 20 years time [or $who \"the [capitalize [marginalize]] man\"] will have the [weapon] hand over [or $what \"the [capitalize [unplural [ethnic_group]]] man\"].\\\" - [or $right [name]], in his famous \\\"Rivers of [capitalize [sex_fluid]]\\\" speech. HE WAS RIGHT!}\n",
  "sun": "args {return [rucas $args]}\n",
  "proclog": "proc {. http://shaniqua.buttes.org/git/shaniqua/log/?path=procs/[sha1 $proc]?showmsg=1}\n",
  "tcl": "{cmd args} {apply $cmd $args}\n",
  "kanyeupper": "{} {string toupper [kanyelyrics]}\n",
  "randproc": "args {while {[catch [lindex_random [find_in_procs [join $args]]] r]} {}; set r}\n",
  "basscadet": "{} {join [list \"MAIN MENU\" \"---------\" \"1) Calculator\" \"2) Vi\" \"3) E-Mail\" \"4) Log Off\"] \\n}\n",
  "moira_aim": "{{who {}}} {aim -n [aimname $who] brb [booze_act_word] a [drink]}\n",
  "COLOR": "{a b} { return \"\u0003$a,$b\" }\n",
  "giraffe": "heh {. Â Â Â Â /)/)\\nÂ Â Â ( ..\\\\\\nÂ Â Â /'-._)Â $heh\\nÂ Â /#/\\nÂ /#/}\n",
  "gaydar:placenick": "{canvas nick} { set xy [gaydar:randomlocation]; embed $canvas [gaydar:name $nick] [car $xy] [cadr $xy] }\n",
  "standarddor": "{} {. [bold][color black on yellow]SEULEMENT RON PAUL SOUTIENT LE STANDARD D'OR[color][bold]}\n",
  "gayagenda:event": "{} { subst [lindex_random $::gayagenda] }\n",
  "spiccy": "{} {string map {PuNtMe stabby} [macro puntme]}\n",
  "bans": "{} {return \"The following people are banned: [join [lrange [every_n_from 2 1 [regexp -all -inline {userid=\\d+\" target=\"_new\">([^<]+)} [wget http://forums.somethingawful.com/banlist.php?adminid=&actfilt=91&ban_month=&ban_year=&s=]]] 0 9] ,\\ ]\"}\n",
  "metra": "{} { swingler_train }\n",
  "p_s": "{} politics_suicide\n",
  "ww_item": "{} {?? $::ww_item}\n",
  "who_level": "{} {set html [http://www.who.int/csr/disease/avian_influenza/phase/en/index.html]; set level [html [strip_html [lindex [regexp -all -inline {pandemic alert is (.*?)</B>} $html] 1]]]; return \"\u0002The current WHO phase of pandemic alert is $level.\"}\n",
  "fancypornair": "{{who {}}} {if {$who eq \"\"} {set who [lindex_random [names]]}; return \"$who? Perhaps it would be more appropriate to say [strip_u [fetish_porn]], am I correct in this assertion?\"}\n",
  "sumtest2": "{a b} { . expr $a + $b }\n",
  "demoss": "{} {. [bgt WHAT ARE YOUR CRIMES]}\n",
  "image-cumupon": "args {apply image-cumon $args}\n",
  "omgcolumn": "{} {return \" __ \\n[string repeat \"/..\\\\\\n\\\\_O/\\n\" 4]\"}\n",
  "hellsoap": "{} {return \"for that sir i give you 5, 5 golden man babies of the goldest sort. you sir, are a god among men and i would like to have you man children ASAP. you also owe me a new keyboard becuase i was drinking milk and laughed SO hard that i spit it all over it and now it is ruined and my co-workers think i am insane for yelling out 555 GOLDEN ABBIES at work and i am now probably fired LOL\"}\n",
  "tcc": "{} {smega {strcat \u0002\u000309 [tcc_thread]}}\n",
  "pynchon": "{} {ajoin \" \" [cswas] [ncock 5] [cswas]}\n",
  "myshit": "{} {join [list [[nick]-twat] [myfm] [myt] [mypix] [myxbox]] \"\\n\"}\n",
  "lorem": "{{oi 10}} {return \"Lorem ipsum dolor sit amet [lselect_random $::lorem_dict $oi]\"}\n",
  "cpanlog": "{} {. \"[subst [join [string repeat {[cpanmsg] } 9] \\n]]\\nmake had returned bad status, install seems impossible\"}\n",
  "interrogate": "{{who {}}} { if {$who eq \"\"} {set who [lindex_random [names]]}; return \"$who: What do you know about the [56k_word]?  And what's the deal with [random_word]?  Were you or were you not doing [strip_u [fetish_porn]] last night?  Why do you hate [name]?  Are you now, or have you ever been, a member of the [political_word] party?  WHY DO YOU KEEP SAYING [string toupper [goon_word]]?\" }\n",
  "omgtower": "{} { return \"OH NO SUPERMARIO WORLD CACTUS\\n[omg] [flip [omg]] [omg] [flip [omg]] [omg]\" }\n",
  "tracer%calls_init": "proc {array set ::tracer_${proc} {}}\n",
  "gfactor": "args { return [goonsay [eval [concat factor $args]]] }\n",
  "kink": "{{who {}}} {. [name $who]: i want to [choose swallow wear \"bathe in\" \"make a casserole with\"] your [sex_fluid]}\n",
  "radeon27": "{} {return {<@radeon> no\n<@radeon> i dont live in a doublewide\n<@radeon> i live in the same trailer park as ced though}}\n",
  "reflect": "args {let {text {join [list [ajoin \"\" \" \" [bgr 7 $text]] [let {lines {join [list \" [lindex $lines 0]\" [lindex $lines 1]\" \" [lindex $lines 2]\" \"  [lindex $lines 3]\" \" [lindex $lines 4]\"] \\n}} [split [vflip [bgr 11 $text]] \\n]]] \\n}} [join $args]}\n",
  "mroach": "{} {[?? [lgrep {mroach[0-9]+} [info proc mroach*]]]}\n",
  "array_mapx": "{_a _x _y _c} {mapx [array names ::$_a] x {array_mapx:tuple_eval [array get ::$_a $x] $_x $_y $_c}}\n",
  "nwo_bottom": "{} {. \"\u0002\u000301,01 \u000301,08   Forced Vaccinations     \u0002\u000301,01 \u000301,00â\\n\u0002\u000301,01 \u000301,08 Prison Industrial Complex \u0002\u000301,01 \u000301,00â\\n\u0002\u000301,01 \u000301,08 Elite Controlled Eugenics \u0002\u000301,01 \u000301,00â\\n\u0002\u000301,01ââââââââââââââââââââââââââââ\u000301,01â\u0002\u000301,00â\\n \u000301,00âââââââââââââââââââââââââââââ\"}\n",
  "pink_colours": "{} {next_in_list {13 06}}\n",
  "dndname": "{} {return \"[dndattribute] [name]\"}\n",
  "uname-weasel": "{} {set uname [uname]; return \"[lrange $uname 0 2]-[rainbow weasel]\u0003 [lrange $uname 3 end]\"}\n",
  "latexmatix": "{} {. \"[tinyurl [latex {\\left[\\begin{tabular}{ccccccccc|c}} [join [split [smega {. \"[subst [string repeat {[roll 100]&} 9]][roll 100] \\\\\\\\ \"} 21] \"\\n\"]] {\\end{tabular}\\right]}]]#.png\"}\n",
  "go:left": "{} {uchar 2523 }\n",
  "master_score_clear": "i {  array set ::mastermind_score [list $i 0]; return 0;}\n",
  "obama2": "{} {return \"The point I was making was not that my grandmother harbors any racial animosity, but that she is a typical [singleethnic]. If she sees [ethnic_group] on the street that she doesn't know there's a reaction in her.\"}\n",
  "aimpranks": "{} { return $::aimpranks }\n",
  "raildat": "{} { smega {. [next_in_list {\"8======D  (_O_)\" \" 8======D (_O_)\" \"  8======D(_O_)\" \"   8======D_O_)\" \"    8======DO_)\" \"     8======D_)\" \"      8======_)\" \"       8=====_)\" \"        8====_)\" \"         8===_)\" \"        8====_)\" \"       8=====_)\" \"      8======_)\" \"     8======D_)\" \"    8======DO_)\" \"   8======D_O_)\" \"  8======D(_O_)\" \" 8======D (_O_)\"}]} 21 }\n",
  "almeal": "{} {. <@Al> [string totitle [goon_cooking_method]] [choose [al_man_word] [gudrow_word] [singlerandomword]]. [mmm]}\n",
  "satan": "{} {return \"\u00038,9AHHH I'M BLIND 0_o\u00035,1<SATAN>\u00039,8AHHH I'M BLIND o_0\u00038,0AHHH I'M BLIND \u00030,8O_O\u00030,1>SATAN<\u000f\u00038,9AHHH I'M BLIND 0_o\u00035,1<SATAN>\u00039,8AHHH I'M BLIND o_0\u00038,0AHHH I'M BLIND \u00030,8O_O\u00030,1>SATAN<\u000f\u00038,9AHHH I'M BLIND 0_o\u00035,1<SATAN>\u00039,8AHHH I'M BLIND o_0\u00038,0AHHH I'M BLIND \u00030,8O_O\u00030,1>SATAN<\u000f\u00038,9AHHH I'M BLIND 0_o\u00035,1<SATAN>\u00039,8AHHH I'M BLIND o_0\u00038,0AHHH I'M BLIND \u00030,8O_O\u00030,1>SATAN<\u000f\"}\n",
  "test_proc4": "{} {catch { say x } val; return $val}\n",
  "unescape": "str {string map {\\\\\\\\ \\\\ \\\\[ [ \\\\$ $} $str}\n",
  "bigot": "{} {return \"Don't get me wrong, some of my best friends are [ethnic_group]\"}\n",
  "access_modifiers_for_inner_classes": "{Parkinson's_disease the_IRA} {return [bigteef $Ritalin [encwt $combustion]]; set metallurgy [spook [aimname [unknown:1:cmd/^(.)(_+)/] [presentation]] [foodgoon [hypnofit $cow]]]; return [urbanquote $digital_audio]; return $Roswell}\n",
  "recurse": "{{recurse recurse}} recurse\n",
  "inefficientact": "str {return \"\\001ACTION [string map {\\n \\001\\n\\001ACTION\\ } $str]\\001\"}\n",
  "song1": "{} {return \"On the way to the club\\n I fell down a hole\\n And all the people there\\n Said you come along\"}\n",
  "ercompare": "{{wordup {}}} { return \"[color blue on black]$wordup \\n[color blue on black]$wordup[color red on black]er \\n[color blue on black]$wordup[color red on black]est\"}\n",
  "aflippedomgbeednaembeddedincosinewave": "{} {embed [aflip [cosinewave2 15 [color white]<3\\~]] [aflip [omgbeedna]] 10 4}\n",
  "SThorse4": "{} {flip [SThorse2]}\n",
  "fatgoon": "{{glob {}}} {fatgoonweb $glob}\n",
  "negromgsmile": "{} {rainbow [omgsmile]}\n",
  "reptoids?": "{} {set i 0;foreach reptoid $::reptoids { set i [expr $i + [llength [lfilter $reptoid [string tolower [names]]]]] }; return \"[color orange on black]\u0002\u001f/!\\\\\u0002\u001f    [color green on black][color red on black]$i [color green on black]suspected reptoids    [color orange on black]\u0002\u001f/!\\\\\u0002\u001f\"}\n",
  "usleep": "num { set base [clock clicks]; while {[clock clicks] < [expr $base + $num]} { nop } }\n",
  "buttes_weather": "{} {. [string totitle [weather1]] [weatherword]: [string totitle [weathercondition]] [maybe_measure]}\n",
  "stallman": "{} {gaybow \"LONG LIVE COMRADE STALLMAN\"}\n",
  "rating": "{} {return \"I rate it [set n [expr {int(rand()*100)+3}]] out of [incr n +[rand 20]] [plural [goon_word]]!\"}\n",
  "bubble_bottom": "str {bubble_worker $str \"\\\\_/ \"}\n",
  "goonhost": "{} {lindex_random $::goonhost}\n",
  "STbiggestgoon": "{} {biggestgoon 6 15}\n",
  "rswastika": "v {foreach {w h} [maxdims $v] {set n [rot:max 0 [- $w $h]]; set nl [string repeat \\n $n]; set ns [string repeat \" \" $n];  return [ajoin \"\" [ajoin \"\"  $ns [rotate270 $v]] $nl$v]\\n[ajoin \"\" [rotate180 $v] [rotate90 $v]] }}\n",
  "gwp": "args gaywithpiss\n",
  "convert": "{n f t} {return \"$n $f = [expr $n*[lindex [regexp -inline {<b>(.*?)</b>} [cwget http://download.finance.yahoo.com/d/quotes.csv?s=[string toupper $f$t]=X&f=l&e=.csv]] 1]] $t\"}\n",
  "unknown:2:cmd/^(\\w*)->(\\w*)$/": "{matches cmd args} {apply [list translate [or [lindex $matches 1] auto] [or [lindex $matches 2] en]] $args}\n",
  "aimkazaa": "{{who {}}} {aim -n [aimname $who] ACCEPT FILE-SEND REQUEST FOR [string map {\" \" \"_\"} [virusfile]]?}\n",
  "big911-blocks": "{} {draw-blocks {0001000000111001110 1000100000111001110 0111111110111001110 1000100000111001110  0001000000111001110}}\n",
  "aim_quiz": "{{who {}}} {if {$who eq \"\"} {set who [rand_aim]}; set question \"[lindex_random $::quiz_dict] [mystery]\"; if {![info exists ::quiz_count($who)]} {set ::quiz_count($who) 0}; aim -n $who \"Question #[incr ::quiz_count($who)]. $question\"}\n",
  "query": "list {set result [list]; foreach {key value} $list {lappend result [urlencode $key]=[urlencode $value]}; join $result &}\n",
  "jews2": "{} {caption [gis jew] [?? $::rule_of_acquisition]}\n",
  "svn_commit": "{} { . \"Transmitting file data [string repeat \".\" [rand 10 40]]\\nCommitted revision [rand 1000 9999]\\n\" }\n",
  "STale": "{} { return \"  ,o888o,    \\n  |=====|_   \\n  | ALE | )  \\n  |     |/   \\n  I=o=o=I    \";}\n",
  "harrass_sanchez": "{} {sanchez [cached_onehug]}\n",
  "british_person": "{} {lindex_random $::british_persons}\n",
  "3gs_": "{} { 3gs }\n",
  "uniq": "l {set r [list];foreach w $l {if {[lsearch $r $w] == -1} {lappend r $w}};return $r}\n",
  "wowjustwow": "{} {join [mapx [split [pyramid \"wow just \"] \\n] l {strcat $l wow}] \\n}\n",
  "mobbers?": "{} {c [llength [intersect [string tolower [names]] $::mobbers]] mobbers}\n",
  "ru": "{} {bigtext \"radeon update:\"}\n",
  "fakeqdb": "{} {cache_lolqdb_quote_lines; join [mapx [string repeat 0\\  [expr {[rand 4] + 1}]] x {lindex_random $::lolqdb_lines}] \\n}\n",
  "kalleclean4": "{} {return \"<@Kalle> Then, I apply un diluted [choose [sex_fluid] [matter] [booze_word]] to the water and I spray the insides with [choose [sex_fluid] [matter] [booze_word]]. I close the top then I spray down the whole outside of the toilet with [choose [sex_fluid] [matter] [booze_word]] wiping it down. I then lift the top and I let it sit until I use it again. [fatgoon_finale].\"}\n",
  "pebkac_meltdown": "{} { join [ mega choose OLIVE??? BLACK!!! OLIVE? BLACK! BLACK? OLIVE!! ] }\n",
  "campaign": "{} {return \"[politicalstance] [hotbutton]\"}\n",
  "moirafund": "{} {return \"donate to moira's liquor fund, paypal cwhite@gmail.com\"}\n",
  "geton": "game {. \"hey [name] get on $game and face [lindex_random $::bill_collectors] the bill collector\"}\n",
  "swinglerbot": "{} {. <swingler> fuck you tomcat}\n",
  "STsleepycat": "{} { return \"  |\\\\      _,,,---,,_      \\n  /,`.-'`'    -.  ;-;;,_  \\n |,4-  ) )-,_..;\\\\ (  `'-' \\n'---''(_/--'  `-'\\\\_)      \";}\n",
  "STfeetdown": "{} { return \"    _   _    \\n   / ) ( \\\\   \\n  / (   ) \\\\  \\n (   ) (   ) \\n ''''o o'''' \";}\n",
  "map1": "{list func} {set q [list]; foreach i $list {lappend q [uplevel [concat $func [list $i]]]}; return $q}\n",
  "kmdeal": "{} {. \"<[name]> i'd pay \\$50/month for kalleboo and mroach to never mention [?? $::kalleboo_mroach_dict] in [channel] again\" }\n",
  "bj": "{} bj_help\n",
  "stock_info": "args {\n  set symbols [join $args]\n  set symbols [string toupper $symbols]\n  set html    [120~http://www.google.com/finance?[? q [join [concat $symbols {.IXIC .DJI}]]]]\n  set table   [last [regexp -inline {<table.*?class=results>\\s*(.+?)\\s*</table>} $html]]  \n  set rows    [lrange [evens [regexp -all -inline {(.*?)(?:</tr>)} $table]] 1 end]\n  set info    [list]\n  \n  foreach row $rows {\n    foreach {name pattern} {\n      symbol      {<td class=symbol>.*\\n\\s*(.*?)</a>}\n      name        {<td class=localName>.*?\\n\\s*<a[^>]+>(.*?)</a>}\n      last_trade  {<td class=lastTrade>(.*?)</td>}\n      change      {<td class=change .*?<span.*?\\n(.*?)</span>}\n      change_rate {<td class=changeRate .*?<span.*?\\n\\((.*?)\\)}\n      market_cap  {<td class=mktCap>(.*?)</td>}\n    } {\n      set i($name) [string trim [html [last [regexp -inline $pattern $row]]]]\n    }\n    if {! [string match \"-*\" $i(change_rate)]} {set i(change_rate) \"+$i(change_rate)\"}\n\n    if {[lsearch -exact $symbols $i(symbol)] != -1} {\n      lappend info [array get i]\n    }\n  }\n  \n  return $info\n}\n",
  "internet2": "{{who {}}} {set who [name $who];. [lump [name $who]]}\n",
  "mroach9": "args {. I'm a bit miffed that only iphones with softbank SIMs can use emoji in 2.2. Really lame and pointless restriction}\n",
  "randmeasure11": "{{who {}}} {return \"http://[name $who].on.nimp.org/[choose \"~[name $who]\" download \"download/~[name $who]\"]/[choose [virusfile] [virusfile2] ]/u?=[butte_word]\"}\n",
  "butanlist": "{{index 0} args} {lindex [apply flickrphoto_list [list 29824906@N03 $args]] $index}\n",
  "goblin": "{} {. [subst [?? $::jgirlfirstnames]] [subst [?? $::jgirllastnames]]}\n",
  "unknown:2:cmd/(.+)say$/": "{matches cmd args} {stampsay -s [last $matches] {*}$args}",
  "celeb_olympics": "{{who {}}} {if {$who eq \"\"} {set who [lindex_random [names]]}; return \"[celebrity] of [country] takes the [choose gold silver bronze] medal in [choose \"500 meter\" \"100 meter\" Greco-Roman lightweight heavyweight freestyle] [crw_word]!\"}\n",
  "ip": "{} {return \"[rand 1 222].[rand 1 255].[rand 1 255].[rand 1 255]\"}\n",
  "f@": "{} fat\n",
  "flickr_med": "string {regsub _m.jpg $string .jpg}\n",
  "jonni": "{} {biggaytext \"faggot\"}\n",
  "comedian": "args {lindex_random $::comedian_dict}\n",
  "will_poz_status": "{} {. \"neg\"}\n",
  "sumto": "{2000} {\n    expr $n * ($n + 1) / 2\n}",
  "lulzup": "{{who {}} {plusthis 1} args} {set user [string toupper $who]; if {[string toupper [nick]] == $user} {. [selfmodder $user]}  else {if [array exists ::lulzscores{$user}] {array set  ::lulzscores{$user} [list $user [concat [expr [last [array get  ::lulzscores{$user}]]+[expr $plusthis]]]]}  else {array set  ::lulzscores{$user} [list $user [concat $plusthis]]}; return \"[comment_word], $user!\\n \\[\\+$plusthis\\] $args\"}}\n",
  "terds": "{} {return \"I stored the turds in the refrigerator when I was not using them but within a week they were all gone. The last one I held in my mouth without chewing, letting it slowly dissolve. I had liquid shit trickling down my throat for nearly four hours. I must have had six orgasms in the process.\\nI often think of that lovely young guy dropping solid gold out of his sweet, pink asshole every day, never knowing what joy it could, and at least once did, bring to a grateful shiteater.\"}\n",
  "8ballz": "args {lindex_random [list \"yes\" \"no\"]}\n",
  "rumor": "{{who {}}} {return \"[negromg] [gudrize \"[name $who] enjoys [pick 1 {return \"giving [acquaintance] [disease_word]\"} 1 {return \"[sex_act] [acquaintance]\"}]\"]\"}\n",
  "asterixsay": "args {ajoin \"\" [asterix] \"\\n / \\n\" [wrap [join $args \" \"] 30]}\n",
  "banner2": "str {return \"ï¿½\\\"~ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½~\\\"ï¿½ï¿½(ï¿½`*o.ï¿½(ï¿½`*o.ï¿½ $str ï¿½.o*ï¿½ï¿½)ï¿½.o*ï¿½ï¿½)ï¿½ï¿½\\\"~ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½~\\\"ï¿½\"}\n",
  "STrocketcat": "{} rocketcat\n",
  "boss": "{} {. [img-boss] [aud-boss]}\n",
  "jazzy": "{} {ajoin \"\u000f  )\" [bgbt m[lindex_random {u {}}][string repeat r [expr {int(rand()*5)+1}]]p[lindex_random {u {}}][string repeat r [expr {int(rand()*5)+1}]]] [ajoin \"\" \"\\n\\\\\" [STkitty]]}\n",
  "unknown:1:cmd/(.+)backon$/": "{matches cmd args} {[last $matches]back [cutbackon [join $args]]}\n",
  "ass": "{} {return \"to tcl mouth\"}\n",
  "islam_3": "{} {return \"FREEDOM [upper [lindex_random $::freedoms]] GO TO HELL! [pick 2 {. [arabic]} 3 {. [islam]}]\"}\n",
  "rss": "url {join [lrange [rss_headlines $url] 0 9] \\n}\n",
  "urlroulette": "{} {i.buttes [?? [array names ::urltags]]}\n",
  "nospam": "{} {return \"[ajoin \"         \" \"\" [bgbt no spam]]\\n[bgbt in [channel]]\"}\n",
  "image-harpoon": "img { magick-scale-composite-bottom-left $img http://churchturing.org/x/whaling.png 0.8 }\n",
  "ifconcat": "{cond head tail} {if $cond {return [concat $head $tail]} {return $tail}}\n",
  "edwards_flag": "{} {next_in_list {white_mills red_mills}; . [smega {. [two_americas][[next_in_list {white_mills red_mills}]]} 5]\\n[smega {[next_in_list {big_white_mills big_red_mills}]} 4]}\n",
  "track_dennis": "args { return {{{SAM'S HOUSE}    {1:34 AM}    DELIVERED}}}\n",
  "angry_sam": "args { sam3 $args }\n",
  "kallemao": "{} {rainbow \"Kalle != kalleboo\"}\n",
  "checkbox2": "args {let {i {join [zip [lreplace [repeat [llength $args] {. {â}}] $i $i \"â\"] $args]}} [rand [llength $args]]}\n",
  "negrowater": "{} {. \"     ______         NEGRO SPORES EMBEDDED IN \\n .-'' ____ ''-.     WATERMELON -- FERTILIZATION\\n/.-=\\\"\\\"    \\\"\\\"=__\\\\_________   IN FECES \\n|-===wwwwww|\\\\ , , , , , /|  \\n\\\\'-=,,____,,\\\\\\\\ ` ' ` ' //   LET ME IN ON THIS\\n '-..______..\\\\'._____.'/\\n              `'-----'`\"}\n",
  "broadcast": "{} { . \"LIVE in High Definition on Pay-per-View on [string totitle [choose [alshort] [singlerandomword]]] TV.\"}\n",
  "radeon13": "{} {return \"<@radeon> i didnt even bend those pins\"}\n",
  "kunwon1": "{} {return \" \u00034,8\u0002/!\\\\\u000f\u00038,4\u0002/!\\\\\u000f \u00034\u0002IRC AMBER ALERT: Amaya Marie Pernell (Abducted child) last seen with KUNWON1 (DAVID J. MOORE OF 217 W. CORLAND CENTER ROAD, COURTLAND, IL) A KNOWN SEX OFFENDER\u000f \u00038,4\u0002/!\\\\\u000f\u00034,8\u0002/!\\\\\"}\n",
  "momjeans": "{{who {}}} {regsub ^HILLARY [chillary] [string toupper [name $who]]}\n",
  "monetize": "args {set str [join $args \" \"]; if { $str eq \"\" } { set str \"cash money\" }; set ret [list]; foreach ltr [split $str \"\"] { if { [lsearch -exact $::currency_map [lc $ltr]] != -1 } { lappend ret [uchar [string map $::currency_map [lc $ltr]]] } else { lappend ret $ltr } }; return [join $ret \"\"] }\n",
  "tiny911": "{} {uchar 2708 20 275a 275a}\n",
  "STss": "{} ss\n",
  "go:white": "{} {uchar 263a}\n",
  "rubbinit": "{} {.  [ajoin \"\" [ncock 1]\\n[name] \"\\n\\n\\n&\" [flip [ncock 2]]\\n[name]]\\nARE RUBBIN IT}\n",
  "fat_pua": "{} {subst [?? $::fat_pua_anecdotes]}\n",
  "smoek": "args {upper [color green on black][bold]_\\\\|/_ smoek [or [join $args] weed] every day _\\\\|/_[bold][color]}\n",
  "winkie1": "{} { string map {TCL DONGS} [levelup Winkie] }\n",
  "warhol_bt": "args {set text [bt [join $args]]; warholize $text}\n",
  "trainditions": "{} {advisorback [metradelays-twat]}\n",
  "sexoffendercard": "{{name {}} {email {}} {occupation {}} {eye {}} {hair {}} {location {}} {news {}}} {format [join $::sexoffendercard \\n] [or $name [name]] [or $email [emailaddress]] [or $occupation [job_word]] [or $eye [eye_word]] [or $hair [hair_color_word]] [or $location [country]] [or $news [usenet]]}\n",
  "max_poopers": "{{count 0}} {set now [clock seconds]; if [expr $now - [cache_get_default poop last [expr $now - 30]] < 6 ] {return \"$::max_poopers (potential poop abuse detected)\"}; if [expr $count > $::max_poopers] {set ::max_poopers $count}; return $::max_poopers;}\n",
  "zi": "{} {. <@zi> grr}\n",
  "solve": "{} metasolve\n",
  "donttroll2": "args {set wstring [string length $args]; if {$wstring <12} {return \"[color black on yellow] HEY [string toupper $args],[join [times [expr 13-$wstring] {}]]\\n[color black on yellow]                  \\n[color black on yellow] DONT TROLL ON ME \"}}\n",
  "mroach_temperature": "location {regsub -all {:(.*?)\\((.*?)\\)} [temperature $location] {: \\2}}\n",
  "cheezzburga": "{{chedda {}}} {set chedda [hacker [name $chedda]]; return \"\u0002\u000307HeY $chedda YO MaMMA In Da LUnCH SerVEs DA ChEEzzBuRGA\u000f\"}\n",
  "motheranimal": "{{arg {}}} { return \"[name $arg]: your mother is a [animal]\" }\n",
  "chu": "args { return \"I stay up all night tweaking on $args\"}\n",
  "use_shaniqua_to_ddos": "{} {. \\1DCC\\1}\n",
  "myweather": "{} {urweather [nick]}\n",
  "cpick": "args {set args [join ${args}]; foreach n [seq 0 [expr [llength ${args}] - 1]] { set p [rand 100]; lset args [list ${n}] [list [lindex ${args} ${n}] [. \"\\002[format %02d ${p}]%\\002 [percentage ${p}]\"]] }; drawtable [lsort -decreasing -index 1 $args]}\n",
  "knucklehead": "{{who {}}} {if {$who eq \"\"} {set who [lindex_random [names]]}; return \"$who, I LUV U DICKFACE\"}\n",
  "foop": "{} { return [choose \"FOOPING TO THE BEAT\" \"FOOPING TOGETHER ALL NIGHT\" \"WE FOOP BECAUSE WE CARE\"] }\n",
  "goonnight": "{{who {}}} { if { $who eq \"\" && [rand 20] == 0 } { set who \"Shernalee Stephenson\" }; return \"Goonnight [name $who], wherever you are.\" }\n",
  "blogentry:mkblogentrywords2": "{} {set ::blogentrywords2 [lgrep {^[a-z].*?(?:ive|ing|ous)$} [words]]}\n",
  "swingler_train": "{} {. \"This just in: METRA is [bold][upper [?? $::train_status]].[bold] More at [?? [seq 5 11]].\"}\n",
  "unknown:1:cmd/(.+)party$/": "{matches args} {set what [last $matches]; eval \"${what}back [?? $::porn_scenes_dict]\"}\n",
  "STheart": "{} {. \"[bold]   _  _   \\n /` \\\\/ `\\\\ \\n \\\\      / \\n  '.  .'  \\n    \\\\/    [bold]\\njgs       \"}\n",
  "stool1": "{} {return \"\u00030,5\u0002Bristol Stool Chart\u0003\u0002\\n\u0002\u001fType 1\u001f  .,.,.  \u0002Separate hard lumps, like nuts (hard to pass)\\n\u0002\u001fType 2\u001f  (:::)  \u0002Sausage-shaped but lumpy\\n\u0002\u001fType 3\u001f  (###)  \u0002Like a sausage but with cracks on its surface\\n\u0002\u001fType 4\u001f  (   )  \u0002Like a sausage or snake, smooth and soft\\n\u0002\u001fType 5\u001f  o o o  \u0002Soft blobs with clear-cut edges (passed easily)\u0003\"}\n",
  "gudrow": "{} {set ret [list]; for {set i 0} {$i <= [rand 5]} {incr i} {lappend ret [gudrow_sentence]}; return [gudrize [join $ret]]}\n",
  "space": "str {set str [regsub -all \\  $str {}]; set str [split $str {}]; if {[llength $str] < 3} return [join $str \\ ]; set spaces [map1 [q [expr {[llength $str]-1}]] {string repeat \" \"}]; set ret \"\"; foreach i $str j $spaces {append ret $i$j}; return $ret}\n",
  "chat": "{} {return \"no [sex_act] [strip_u [fetish_porn]] in computer chat pls\"}\n",
  "jena": "{} {return \"                LYNCH THE JENA 6 \\n\\n [ajoin \" \" [STnigger] [STnigger] [STnigger] [STnigger] [STnigger] [STnigger]]\"}\n",
  "lambda2": "{body arglist args} {\n    set name [sha1 $body];\n    proc $name $arglist $body;\n    if {$args == \"\"} {$name} else {$name $args};\n    rename $name {};\n}\n",
  "hello5": "{{who hello}} {return \"<@hello> sometimes [lindex_random [lfilter *ism [words]]] is kind of cool\"}\n",
  "smallword": "{} {lindex_random $::small_dict}\n",
  "image-fml:caption": "{{img {}}} { caption [or $img [cache get image-fml hb]] [cache get image-fml fml] }\n",
  "lastfm:lastfm": "group {drawtable2 [map [lastfm:GetListenersHTML $group] {html {list [lastfm:namemap [lastfm:user $html]] [lastfm:artist $html] [lastfm:track $html]}}] {default red green} }\n",
  "asian": "{} {string map [list {\\)} [string range [lacist] 6 end-3]] [ncock 0]}\n",
  "faglame": "{} {lindex_random $::faglame_dict}\n",
  "foxnews": "{} {return \"[country_name] is filled with [food_word]-[word {^[a-z].*?ing$}] [word {^[a-z].*?er$}] [animal]s\"}\n",
  "tacotownyeah": "{} {choose http://zapistan.net/ring/taco-town-yeah.mp3 http://zapistan.net/ring/brycetacotownyeah.mp3}\n",
  "kori": "args {return \"[color white on black] I like rice\"}\n",
  "shaktigoonsay": "{} {ajoin \"\" [shaktimid] [goonsay \"If you buy a kickass system, and shakti-stone the hell out of it, then you will get killer [shakti_word].  simple as that\"]}\n",
  "pyragoon": "{} {set ret \"\" ; set width 30; lappend ret [center \" __________ \" $width]; lappend ret [center \"(--\\[ .\\]-\\[ .\\]\" $width]; lappend ret [center \"(       O  )\" $width] ; foreach i {11 13 15 17 19 21 23 25 27} {lappend ret [center \"( [string repeat \" \" $i])\" $width]}; join $ret \\n}\n",
  "clocktest": "{args} {namespace eval ::tcl::clock $args}",
  "aimalgebra": "args {aim -n [aimname $args] [algebra]}\n",
  "psiox": "args {. [or [join $args] [random_word]] is a positivist myth-meme}\n",
  "random_racistname": "{} { ?? [oddlist $::racism_tuples] }\n",
  "pua_adjective": "{} {return [lindex_random $::pua_adjective]}\n",
  "STnigger": "{} {choose [strangefruit] [flip [strangefruit]]}\n",
  "unichar_hex": "hex {if { [regexp {^[0-9a-fA-F]+$} $hex] == 0 } { return [unichar_dec 0xfffd] }; set num [expr 0x$hex]; return [unichar_dec $num]}\n",
  "gaytodo": "{{n 5}} {. TO DO:\\n[join [map1 [szip [repeat $n {todo_box}] [getnuniq 5 gayagenda:event]] join] \\n]}\n",
  "heyfrom": "{w args} {set out [strip_color [join $args]]; set url [rotwt [strip_all $out] $w]; . [string map {\"\\n\" \"\"} \"$url : [twitterize $out]\"]}\n",
  "ssay": "args {return [ajoin \"\" [wrap [wrap [lrange $args 1 [llength $args]] 50] 50] \"\\n\\\\\" [lindex $args 0]];}\n",
  "corporation": "{} {lindex_random $::corporations}\n",
  "s_d": "{} {newdrudge [alt_suicide]}\n",
  "rndtcl_lappend": "{} {return \"lappend [rndtcl_identifier] [rndtcl_expression 1]\"}\n",
  "randbuttemnd": "{} {buttemnd [[choose ono fml odinala]] [cadr [randtag]] [cadr [randatag]]}\n",
  "verb": "{} {eval [lindex_random [info procs *_verb]]}\n",
  "Albot:": "args {. Albot: [join $args]}\n",
  "shsc_certs": "{} {return \"I have [rand 10]+ years experience and am a [cert] and [cert] with [os]-current experience and some [os] and [os] varieties in between. I cant code to save my life, but everything else I feel quite comfortable with ([saq_expert_topic], [saq_expert_topic], [saq_expert_topic], [saq_expert_topic], [saq_expert_topic]) and figure I might as well take the test and get what certs I can.\"}\n",
  "arrested": "{} { return \"Today I was arrested by the [location_word] police department. It all started when I refused to show the receipt for my [string tolower [appliance_word]] to the [political_word] [niggerword] employee at Circuit City, and it ended when a [niggerword] police officer arrested me for refusing to show my [butte_word].\" }\n",
  "aimfood": "{{who {}}} {if {$who eq \"\"} {set who [aimname]}; aim -n $who \"hey, wanna grab some [food_word] at [fastfood]?\"}\n",
  "aimf_stupidradium": "args {aimify stupidradium $args}\n",
  "bbq-gen": "url {\n\tset head \"(let ((img (image $url )) (w (width img)) (h (height img)) \";\n\tset ndongs [+ 1 [rand 6]];\n\tset dongs [join [map [seq 1 $ndongs] {{x} {. (dong$x (rotate (image [?? $::penisoverlay]) (rand 360)))}}] \" \"];\n\tset body [inject [seq 1 $ndongs] img {{x o} {. (composite $x dong$o (rand w) (rand h))}}];\n\treturn \"$head $dongs ) $body )\"\n}\n",
  "myratio": "{} {urratio [nick]}\n",
  "luremarty2": "{} {return \"marty: when are you coming to presfest, there's free [weed] and [drug]\"}\n",
  "chocolate": "rain {set out \"\"; foreach line [split $rain \"\\n\"] {append out \"[color red on orange]$line\\n\"}; return $out}\n",
  "fools": "fool {set i 0;foreach fool $::fools { set i [expr $i + [llength [lfilter $fool [string tolower [names]]]]] };c $i fools}\n",
  "sinewave2": "word {join [map [seq 1 20] {{x} {. [string repeat \" \" [expr int(10 + 10 * sin(3.14 * 3 * $x/20))]] [subst $word] }}] \\n}\n",
  "etruscan": "{} {return \"cat cat kitty cat cat kitty \u0016\u0002kitty\u0016 cat\u0002 \u0016cat\"}\n",
  "swingle": "{} {pick 1 swinglerdate 1 {swinglerwish swingler} 1 trevor 1 swingler_cat 1 swinglerplot 1 swingler_deal 1 swinglump 1 swinglerangst 1 swinglerbet 1 {tf2 swingler \" \" train}}\n",
  "aimbradley": "{{sn {}}} {aim -n [aimname $sn] \"Check out this awesome mp3 dude: http://shsc.biz/bradley.mp3 GOON APPROVED [hurf]\"}\n",
  "unknown:1:cmd/^(\\d)gis$/": "{matches cmd args} {apply ngis [concat [list [last $matches]] $args]}\n",
  "mormon": "{} {return \"[lolname] beheld the golden tablets, and upon them was writ:\\n[weirdbible]\"}\n",
  "miniboner": "{} {. 8:D}\n",
  "jobsfreedom": "{} {. [img-freedom 2] \\n [aud-freedom]}\n",
  "nb1": "{} {return [giga nb]}\n",
  "news_paragraph01": "{} {return \"[string toupper \"[city], [country]\"] - [political_figure] has pledged support for [hotbutton], sources close to the controversial figure say.\"}\n",
  "radium": "{} {return \"Forums too busy!\\nSorry! The forums database has too much work to do at the moment and is not taking any further connections until it catches up.\\nYOU DO NOT NEED TO REPORT THIS!\"}\n",
  "nrst": "{{text {}}} {. \"[or $text [irclog 1]]\\n  ^ [checkbox nice rude same true]\"}\n",
  "gentooo": "{{n1 {}} {n2 {}}} {if {$n1 eq \"\"} {set n1 [name]}; if {$n2 eq \"\"} {set n2 [name]}; return \"<$n1> $n2 use my own os?  i do USE my own os, you dont, you use one someone else made for you, your entire OS is binary, fucking idiot, and i getting a sound card that isnt supported by linux whatsoever to work for half the time is alot more usefulness outta my os than you could ever amount to\"}\n",
  "niggerwoman": "{} {lindex_random $::niggerwomen}\n",
  "ceval:exists": "key {expr {[ceval:load $key] && $data(timestamp) >= [clock seconds]}}\n",
  "biblical": "args {string map $::biblical [join $args]}\n",
  "dancingfontstrip": "str {regsub  -all {[^a-zA-Z ]} $str \" \"}\n",
  "yahoozee_lyrics2": "{} { return \"friday saturday sunday!! gbogbo aiye!!!\\nchampaigne, henessy oh eh! for evribody eh!!\\newo awon omoge e, them dey shake dia body!\\nevrybody, enough efizzy, take am easy\\nits all bout the benjamins baby\\nevribodi, i say  enough efizzy, take am easy\\nits all bout d benjamins baby!\\nla la la la la la la la la la la la la la la\\nla la la u le si! evritime la ti n pa wo\\n\" }\n",
  "oh_my": "{} { return \"http://www.thesmokinggun.com/graphics/art4/0815083mugs6.jpg\"}\n",
  "card_spade": "a { return \"$a\\n  /\\\\\\n /  \\\\\\n(_/\\\\_)\\n  /\\\\\\n      $a\"; }\n",
  "twoproblems": "args {if {$args eq \"\"} {return \"Some people, when faced with a problem, say \\\"I think I'll try [shsc_word].\\\" Now they have two problems.\"} {return \"Some people, when faced with a problem, say \\\"I think I'll try [join $args].\\\" Now they have two problems.\"}}\n",
  "news_network": "{} {?? $::news_network}\n",
  "shooter": "{} {return \"Missing [drink], reward offered, send all responses to Shooters Drive By.... .Vroom Rat-a-tat-tat\"}\n",
  "mp3_temp": "{{who {}}} {set who [name $who]; set len_min [expr {[rand 16]+1}]; set len_sec [rand 60]; set pos_min [rand $len_min]; set pos_sec [rand 60]; set pos ${pos_min}:[format %02s $pos_sec]; set len ${len_min}:[format %02s $len_sec]; return \"\\[winamp\\] Now Playing: [capitalize $who] - [capitalize [strip_u [fetish_porn]][maybe_in_the_usa] .::$pos/$len, [lindex_random {64 96 128 160 192 256 384}]kbps mp3::.}\n",
  "fullgoonsay": "args {stampsay -l -s fullgoon [join $args]}\n",
  "chinkqdb": "{} {chinkerize [lolqdb]}\n",
  "hyphenize": "str {regsub -all { } [regsub -all {[^[:alpha:][:digit:] ]+} [string trim [string tolower $str]] {}] -}\n",
  "gay_pl_color_ify": "{procname args} {set ret \"\"; foreach char [split [strip_all [join $args]] {}] {if {$char eq \" \" || $char eq \"\\n\"} {append ret $char} {if {$char eq \",\"} {set  char \",,\"}; append ret [color_n [eval $procname]]$char}}; return $ret}\n",
  "grammar": "who {return \"$who: Remember that grammar/syntax is important, including spelling function names correctly. Spelling and grammar don't seem to be your forte. I can't imagine you being able to pick up programming languages when your speaking languages are this poorly-understood.\"}\n",
  "blackjack_dealer_loses": "{} { set out {}; foreach {p} [blackjack_players] { if {$p==\"dealer\"} { } else { lappend out [blackjack_wins $p]; }; blackjack_init;  return [join $out \" \" ]; } }\n",
  "bickering_swedes": "{} {stampsay -s vikingboat I DIDNT EVEN [string toupper [swede_act_word]] [string toupper [swede_word]]}\n",
  "wkeycaps": "args {join [each [split [join $args]] {word {join [lkeycaps $word] {}}}]}\n",
  "fagamid": "{} {gayamid [nick]}\n",
  "gay_binary": "{} {. [gayflagify [macro binarychat]]}\n",
  "STo": "{} {return {   U  ___ u \n    \\/\"_ \\/ \n    | | | | \n.-,_| |_| | \n \\_)-\\___/  \n      \\\\    \n     (__)   }}\n",
  "STamerica": "{} {return \\ \\ \\ \\ ,__\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ _,\\ \\n\\ \\\\~\\\\|\\ \\ ~~---___\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ ,\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ |\\ \\\\\\ \\n\\ \\ |\\ \\ \\ \\ \\ \\ /\\ |\\ \\ \\ ~~~~~~~|~~~~~|\\ ~~---,\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ _/,\\ \\ >\\n\\ /~-_--__|\\ |\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ |\\ \\ \\ \\ \\ \\\\\\ \\ \\ \\ \\ /\\ ~\\\\~~/\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ /~|\\ ||,'\\ \\n\\ |\\ \\ \\ \\ \\ \\ \\ /\\ \\ \\\\\\ \\ \\ \\ \\ \\ \\ \\ \\ |------|\\ \\ \\ \\{\\ \\ \\ \\ /\\ /~)\\ \\ \\ \\ \\ __-\\ \\ ',|_\\\\,\\ \\n/\\ \\ \\ \\ \\ \\ \\ |\\ \\ \\ \\ |~~~~~~~~|\\ \\ \\ \\ \\ \\ \\\\\\ \\ \\ \\ \\\\\\ \\ \\ |\\ |\\ '~\\\\\\ \\ |_____,|~,-'\\ \\n|~~--__\\ |\\ \\ \\ \\ |\\ \\ \\ \\ \\ \\ \\ \\ |____\\ \\ |~~~~~|--|\\ |__\\ /_-'\\ \\ \\ \\ \\ \\{,~\\ \\ \\ \\ \\n|\\ \\ \\ |\\ \\ ~~~|~~|\\ \\ \\ \\ \\ \\ \\ \\ |\\ \\ \\ \\ ~~\\\\\\ \\ \\ \\ \\ /\\ \\ `-'\\ |`~\\ |~_____\\{/\\ \\ \\ \\ \\ \\n|\\ \\ \\ |\\ \\ \\ \\ \\ |\\ \\ '---------,\\ \\ \\ \\ \\ \\ \\\\----|\\ \\ \\ |\\ \\ |\\ \\ ,'\\ ~/~\\\\,|`\\ \\ \\ \\ \\ \\n',\\ \\ \\\\\\ \\ \\ \\ \\ |\\ \\ \\ \\ |\\ \\ \\ \\ \\ \\ \\ |~~~~~~~|\\ \\ \\ \\ \\\\\\ \\ |\\ ,'~~\\\\\\ \\ /\\ \\ \\ \\ |\\ \\ \\ \\ \\ \\ \\n\\ |\\ \\ \\ \\\\\\ \\ \\ \\ |\\ \\ \\ \\ |\\ \\ \\ \\ \\ \\ \\ |\\ \\ \\ \\ \\ \\ \\ |\\ \\ \\ \\ \\ \\\\_-~\\ \\ \\ \\ /`~___--\\\\\\ \\ \\ \\ \\ \\ \\n\\ ',\\ \\ \\ \\\\\\ \\ ,-----|-------+-------'_____/__----~~/\\ \\ \\ \\ \\ \\ /\\ \\ \\ \\ \\ \\ \\n\\ \\ '_\\ \\ \\ '\\\\|\\ \\ \\ \\ \\ |\\ \\ \\ \\ \\ \\ |~~~|\\ \\ \\ \\ \\ |\\ \\ \\ \\ |\\ \\ \\ \\ \\ \\ _/-,~~-,/\\ \\ \\ \\ \\ \\ \\ \\n\\ \\ \\ \\ \\\\\\ \\ \\ \\ |\\ \\ \\ \\ \\ |\\ \\ \\ \\ \\ \\ |\\ \\ \\ |_\\ \\ \\ \\ |\\ \\ \\ \\ /~~|~~\\\\\\ \\ \\ \\ \\\\,/\\ \\ \\ \\ \\ \\ \\ \\ \\ \\n\\ \\ \\ \\ \\ ~~~-'\\ \\ \\ \\ \\ |\\ \\ \\ \\ \\ \\ |\\ \\ \\ \\ \\ `~~~\\\\___|\\ \\ \\ |\\ \\ \\ |\\ \\ \\ \\ /\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\n\\ \\ \\ \\ \\ \\ \\ \\ \\ '-,_\\ \\ |\\ _____|\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ |\\ \\ /\\ \\ \\ |\\ ,-'---~\\\\\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ `~'~\\ \\ \\\\\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ |\\ \\ `--,~~~~-~~,\\ \\ \\\\\\ \\ \\ \\ \\ \\ \\ \\ \\ \\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\\\/~\\\\\\ \\ \\ \\ \\ \\ /~~~`---`\\ \\ \\ \\ \\ \\ \\ \\ \\ |\\ \\ \\\\\\ \\ \\ \\ \\ \\ \\ \\ \\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\\\\\ \\ \\ \\ /\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\\\\\ \\ |\\ \\ \\ \\ \\ \\ \\ \\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\\\\\ \\ |\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ '\\\\'\\ \\ \\ \\ \\ \\ \\ \\n\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ `~'\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ }\n",
  "sanjsay": "args {stampsay -s sanjay $args}\n",
  "htmlize": "str {string map $::html_pairs $str}\n",
  "magick_force_format": "{cmd format id args} {set url [string trim [http://magick.buttes.org/magick.rb?[? cmd $cmd format $format id $id args [join $args +]]]]; if [regexp ^Error: $url] {error [string range $url 7 end]}; return $url}\n",
  "tf": "str {foreach {i j} {s {\u00033$$$\u0003} k {\u00034KKK\u0003} c {\u00034KKK\u0003} x {XXX}} {set str [regsub -nocase -all $i $str $j]}; return $str}\n",
  "newsgroup": "{} {return alt.binaries.[join [mapx [seq 1 [expr [rand 4]+1]] x hyphenword] .]}\n",
  "frenchgirl": "{} {gis [lindex_random {{melissa theuriau} {audrey tautou} {alizee} {young brigitte bardot} {jane birkin} {Laetitia Casta} {Ãmile Dequenne} {Fanny Valette} {chloe des lysses} {Isabelle Adjani} {Mylene Jampanoi} }]}\n",
  "annoyclint": "{} { . beep }\n",
  "stool2": "{} {return \"\u0002\u001fType 6\u001f  *****  \u0002Fluffy pieces with ragged adges, a mushy stool\\n\u0002\u001fType 7\u001f  ~~~~~  \u0002Watery, no solid pieces. \u0002Entirely Liquid\u0002\"}\n",
  "apophis": "{} {return \"Congratulations on being banned from wdma.\"}\n",
  "whatwhat": "{} { . \"in the butt.\\nYou wanna do it in my butt, in my butt?\\nLet's do it in the butt, OKAY\" }\n",
  "overheard_in_arabia": "{} {return [join [lrange [lines [subst [regsub -line -all {^(.*?:) .*$} [overheard] {\\1 [arabic]}]]] 0 end-1] \\n]\\n--\\ [arabland]}\n",
  "AhHaveBeenRobbed": "{} {. \"http://www.youtube.com/watch?v=NpFu_bYkomc#t=8m13s\"}\n",
  "fakefm": "{} {drawtable [repeat [rand 2 5] {list [?? [odd_elm [expr {[channel] == \"#onebutan\" ?  $::onebutan_lastfm_usermap : $::lastfm_user_map}]]] [choose [capitalize [*fullname]] [band]]  [capitalize [strip_u [song_front]\\ [fetish_porn]]\\ [song_modifier]]}] {default red green} {}}\n",
  "td": "{} touchdown\n",
  "publication": "{} {lindex_random $::publications}\n",
  "engimize_proc": "{} {[strip_spaces [engimize [lselect_random [seq a z] 1]]]}\n",
  "roulette_kill": "{} {roulette_reload; honeypot; return [poppop [string toupper [nick]]]}\n",
  "sha1": "{args} {. [core::sha1 $args]}",
  "women": "{} {c all whores}\n",
  "superbowl": "{} {return \"[upper \"the [ethnic_group] have won the super bowl\"]! There's gonna be [crw_word] in the streets of [city] tonight, John.\"}\n",
  "poop": "{} {set poopers [lindex [http post  http://poopstat.us/plop.yaws not used] 2];  set ret \"You pooped! :D\\nPoopers: $poopers\\nRecord: [max_poopers $poopers]\"; cache put poop last [clock seconds]; return $ret;}\n",
  "c_at_n": "{s n} {\n\tset c [csplit $s]\n\tif {$n > [expr [llength [lindex $c 0]]-1]} {set n [expr [llength [lindex $c 0]]-1]}\n\tset b 0\n\tset u 0\n\tset cf -1\n\tset cb -1\n\tset r \"\"\n\tforeach f [lindex $c 1] {\n\t\tif {[lindex $f 0] > $n} {\n\t\t\tif {$b eq 1} {append r \"\u0002\"}\n\t\t\tif {$u eq 1} {append r \"\u001f\"}\n\t\t\tif {$cf > -1} {append r [format \"\u0003%s\" $cf]}\n\t\t\tif {$cb > -1} {append r [format \",%s\" $cb]}\n\t\t\treturn $r\n\t\t}\n\t\tif {[lindex $f 1] eq \"\u0002\"} {set b [expr $b ^ 1]}\n\t\tif {[lindex $f 1] eq \"\u001f\"} {set u [expr $u ^ 1]}\n\t\tif {[lindex $f 1] eq \"\u0003\"} {set cf -1;set cb -1}\n\t\tif {[lindex $f 1] eq \"\u000f\"} {set cf -1;set cb -1;set b 0;set u 0}\n\t\tif {[lindex $f 1] eq \"\u0016\"} {set t $cb;set cb $cf;set cf $t}\n\t\tif {[set m [regexp -inline {\u0003([\\d]+)$} [lindex $f 1]]] ne \"\"} {set cf [lindex $m 1]}\n\t\tif {[set m [regexp -inline {\u0003([\\d]+),([\\d]+)} [lindex $f 1]]] ne \"\"} {set cf [lindex $m 1];set cb [lindex $m 2]}\n\t}\n\tif {$b eq 1} {append r \"\u0002\"}\n\tif {$u eq 1} {append r \"\u001f\"}\n\tif {$cf > -1} {append r [format \"\u0003%s\" $cf]}\n\tif {$cb > -1} {append r [format \",%s\" $cb]}\n\treturn $r\n}\n",
  "swingler_name": "args {set left [string trimright [word s(?:w(?:i)?)?$] swi]; set right [string trimleft [word ^(?:r|er|ler)] ler]; return \"${left}swingler${right}\"}\n",
  "inject": "{list memo block} {\n  foreach value $list {\n    set memo [yield $memo $value]\n  }\n  return $memo\n}\n",
  "pyramid": "str {set ret [list]; foreach i {1 3 5 7 9} {lappend ret [center [string repeat $str $i] [expr {[string length $str]*9}]]}; join $ret \\n}\n",
  "am": "{i rite} {return [lindex_random {\"no fgt\" \"lol ya\"}]}\n",
  "gay": "{} {next_in_list {08 04 13 12 11 09}}\n",
  "mood": "{{who {}}} {if {$who eq \"\"} {set who [lindex_random [names]]}; return \"<$who> ~CuRrEnT MoOd~ : [mood_word]\"}\n",
  "funkymac": "args {. http://cryptosystem.org/audio/FunkyMac.wav#.mp3}\n",
  "notify": "{{who {}} {msg {}}} {set who [name $who]; if {$msg eq \"\"} {set msg [string range [goon_word] 0 13]}; ajoin \"\u000f   \" \"$who:\\n$who:\\n$who:\\n$who:\\n$who:\" [easter 5] [bt $msg] [easter 5]}\n",
  "aimnazispook": "args {aim -n [aimname $args] [strip_newlines2 [giga nazispook]]}\n",
  "colwidths": "table {map [seq 0 [expr [llength [lindex $table 0]] - 1]] {colnum {colwidth $colnum $table}}}\n",
  "roundtrip": "{text {abroad de} {home en}} {translate $abroad $home [translate $home $abroad $text]}\n",
  "unix": "{} {return \"[unixcmd] ./[join [random_word] _][virusextension] | [join [mapx [seq 0 [rand 3]] x {unixcmd}] \" | \"] | [unixcmd] > [unixdev]\"}\n",
  "imgay": "{} {. \u0002\u001f\u00036IM GAY \u00038IM GAY \u000313IM GAY \u0002\u001f\u00036IM GAY \u00038IM GAY \u000313IM GAY \u0002\u001f\u00036IM GAY \u00038IM GAY \u000313IM GAY \u0002\u001f\u00036IM GAY \u00038IM GAY \u000313IM GAY\u000f}\n",
  "radeon30": "{} {return {<@radeon> do you guys remember the name of the IRC channel for porn}}\n",
  "cswasti": "{} {return \"\u00030,4                  \\n\u00030,4  \u00030,0              \u00030,4  \\n\u00030,4  \u00030,0  \u00030,1  \u00030,0  \u00030,1      \u00030,0  \u00030,4  \\n\u00030,4  \u00030,0  \u00030,1  \u00030,0  \u00030,1  \u00030,0      \u00030,4  \\n\u00030,4  \u00030,0  \u00030,1          \u00030,0  \u00030,4  \\n\u00030,4  \u00030,0      \u00030,1  \u00030,0  \u00030,1  \u00030,0  \u00030,4  \\n\u00030,4  \u00030,0  \u00030,1      \u00030,0  \u00030,1  \u00030,0  \u00030,4  \\n\u00030,4  \u00030,0              \u00030,4  \\n\u00030,4                  \"}\n",
  "gayCANADA": "{} { return [CANADA [gay_random]] }\n",
  "puaburga": "{{who kelson}} {anyburga $who [pua_location] [pua_verb] [pua_object]}\n",
  "ran_threada": "{} {set num [expr {260000+round(rand()*(2730000-260000))}]; return \"$num\"}\n",
  "sbr": "{} saq_beer_review\n",
  "nomorecoffee": "{} {wet YOU PANSY}\n",
  "go:assertboard": "board { if {[go:type $board] == \"go:board\"} { return 1 } { error \"NOT A GO:BOARD\" } }\n",
  "gay_bacon": "{{idiot {}}} {return \"( (( ( \\n ) )) )  Eat Your Tofu Bacon\\n( (( (\\n ) )) )  [name $idiot] \\n( (( (\"}\n",
  "time_word": "{} { subst [lindex_random $::time_dict] }\n",
  "chinsamid2": "{{in 5}} {set n [constrain 4 20 $in]; join [map [zip [map [seq $n 1] {{x} {string repeat \" \" $x}}] [concat [list __________ {(--[ .]-[ .]} {(        O   )}] [map [seq 1 [- $n 3]] {{x} {return \"([string repeat \" \" [+ 12 [* 2 $x]]])\"}}]]] {{x y} {return $x$y}} ] \\n}\n",
  "blackjack_deal": "{} { foreach {i} {1 2} { foreach {p} [blackjack_players] { set card [blackjack_add_card $p [blackjack_draw_card]]; }; }; }\n",
  "ebay": "{} {return \"[string toupper \"[choose \"lot of [expr [rand 20] + 2] \" \"\" \"\"][choose \"[ebay_adjective] \" \"\"][random_word], [choose \"[ebay_adjective], [ebay_adjective]\" \"[ebay_adjective]\" \"L@@K\" \"IMPRESS YOUR FRIENDS\" \"DON'T MISS\" INVEST RESELL \"ATTRACT WOMEN!\" \"retail $[rand 500]\" \"*no reserve*\"]\"]\"}\n",
  "nsic": "{} {wt2 \"NO SPAM IN COCKES\"}\n",
  "create_radeon_proc": "args {set lines [list]; foreach line $args {if {![regexp -nocase {^<.?radeon>} [strip_all $line]]} {set line \"<@radeon> $line\"}; lappend lines $line}; set procname \"radeon[expr {[llength [info procs radeon*]]+1}]\"; uplevel #0 [list proc $procname {} [list return [join $lines \\n]]]; return $procname}\n",
  "adventures_of_moira": "{{n {}}} {join [if {$n eq \"\"} {?? [adventures_of_moira_comics]} {lindex [adventures_of_moira_comics] [- $n 1]}] \\n}\n",
  "cn": "args {set words [map1 $args \"bgr {}\"]; eval [concat [list ajoin \" \"] $words]}\n",
  "children": "{} {return \"how [child_word] are for children\"}\n",
  "fundie": "args {stampsay -s realokey [thinkaboutit $args] }\n",
  "poopchute": "{} {join [list {hi}]}\n",
  "cx": "args {eval [concat {cn} [split [join $args \\\\] {}]]}\n",
  "neolobster": "{} {rainbow [fathead_chins_say \"i just got off the phone with the FBI\"]}\n",
  "rainmanbabies": "{} {return [rainbow [thread_gen]]\\n[rainbow [thread_gen]]\\n[rainbow [thread_gen]]\\n[rainbow [thread_gen]]\\n[rainbow [thread_gen]]}\n",
  "day": "{} {choose Monday Tuesday Wednesday Thursday Friday Saturday Sunday}\n",
  "strip_s": "str {return [regsub -all s$ $str {}]}\n",
  "samify": "args {join [regsub -all \"\\\\.{1,3}\" $args \"\\xe2\\x80\\xa6\"]}\n",
  "sort_factor_stats": "{} { global factor_stats; lsort -decreasing -command cmp_factor_stats [array_to_list factor_stats] }\n",
  "+c": "{} { return \"Limit the use of Color - we ALL enjoy colors, but when there is too much of it, it's overwhelming for the newcomers to the channel.\" }\n",
  "vaj_beaver": "{} {join [list { @  @} {('+'`)_------_   ######    Vagina Beavers} {  W \\          -########## Block Your Sperm} {    /|/----\\|\\   #######} {   \" \"    \" \" }] \\n}\n",
  "lastfm:gsplitHTML": "group {regexp -all  -inline {<div class=\"userContainer\">.*?</div>.*?</div>} [wget http://www.last.fm/group/$group/members]}\n",
  "STfries": "{} { . \"   |\\\\ /| /|_/|\\n |\\\\||-|\\\\||-/|/|\\n  \\\\\\\\|\\\\|//||///\\n  |\\\\/\\\\||//||||\\n  |||\\\\\\\\|/\\\\\\\\ ||\\n  | './\\\\_/.' |\\n  | .:.  .:. |\\n  | :  ::  : |\\n  | :  ''  : |\\n   '.______.'\"}\n",
  "rexsay": "args {set ws \"                \"; foreach l [split [wrap [join $args] 45] \"\\n\"] {lappend ls \"                $l\"}; . \"[join $ls \"\\n\"]\\n$ws  /\\nhttp://i.buttes.org/index.php/http:/wingerz.com/blog/wp-content/uploads/2007/01/trex.thumbnail.png\"}\n",
  "celebslander": "{} {return \"[slander [choose [celebrity] [political_figure]]]\"}\n",
  "causeofdeath": "args {set n [list [lindex $args 1] [lindex $args 0] [lrange $args 2 end]];set l [string tolower [lindex [split [lindex $args 1] {}] 0]];set u [join [list http://www.deadoraliveinfo.com/dead.nsf/ $l names-nf/ [join [mapx [compact $n] w {string totitle $w}] +]] {}];set h [wget $u];html [lindex [regexp -inline {Cause of Death:</B></TD><TD WIDTH=\"192\">(.*?)</TD>} $h] 1]}\n",
  "broken_wrap_test": "{str {cols 72}} {set ret [list]; set line \"\"; foreach word [split $str] {if {[string length \"$line\"] && [string length \"$line $word\"] > $cols} {lappend ret [string length \"$line $word\"]-$line; set line \"$word\"} {append line \" $word\"}}; if [string length \"$line\"] {lappend ret [string length $line]-$line}; join $ret \\n}\n",
  "urldecode": "url {subst [regsub -all {(%[A-Fa-f0-9]{2})+} [escape $url] {[urldecode_sequence \\0]}]}\n",
  "doakes": "{} {string map {\"( \" su \" )\" fucka \"(\" su \")\" fucka} [lisp supprize mothafucka]}\n",
  "list_keys": "l {set keys [list]; foreach {key val} $l { lappend keys $key; }; return $keys }\n",
  "putin": "{} {return {http://img.timeinc.net/time/photoessays/2007/poy/vvp.jpg}}\n",
  "pagga2": "{{who pagga}} {return \"[name $who] has last been seen escaping [englishtown] on [rbl_time] to pursue [lindex_random $::violent_act] [name] in [lindex_random $::country_name_dict]\";}\n",
  "rot:maxdims": "mat {\n    set w 0;\n    set h 0;\n    foreach {row} $mat {\n        set w [rot:max $w [llength $row]];\n        incr h;\n    }\n    return [list $w $h]\n}\n",
  "psych2": "{} {lindex_random $::psych2}\n",
  "brit_word": "{} {lindex_random $::britword_dict}\n",
  "exclamid": "{} {return [pyramid !]}\n",
  "halfjew": "{} {rainbow [join [adjacent_join [list [nsplit [halfdavid]] [nsplit [halfdavid]] [nsplit [halfdavid]]]] \\n]}\n",
  "body": "swatsi {fatdraw {111111111 100000001 101011101 101010001 101111101 100010101 101110101 100000001 111111111}}\n",
  "weakless-poof": "{} {return \"[color yellow]|||||\\n[color cyan]O-O     [color orange]WEAKLESS POOF\\n [color silver]uu\"}\n",
  "sed": "{} { . unterminated substitute in regular expression}\n",
  "rss_parse_item_ele": "{item_body {ele title}} {set item [html [lindex [regexp -inline \"<$ele>(.*?)</$ele>\" $item_body] 1] ]; return [list $item]}\n",
  "aimdobernala": "name {aimify dobernala $name}\n",
  "cadr": "l {lindex $l 1}\n",
  "gridse_colours": "{} {next_in_list {04 07 08 09 12 13}}\n",
  "pubhacked": "{} {publish [set ret [list]; foreach line $::aimhax {lappend ret [subst $line]}; join $ret \\n]}\n",
  "echo": "{args} {join $args}",
  "asciiaim": "args {if {[lindex $args 0] eq \"-n\"} {set n [lindex $args 1];set s [lrange $args 2 end]} {set n [aimname];set s [lrange $args 0 end]};aim -n $n <font face=\"Courier New\"><br>[join [split [htmlize [join $s]] \\n] <br>]</font>}\n",
  "nbv4": "{} {return http://www.chickswithdicks.com}\n",
  "word_lmiot": "{} {args_lmiot [lindex_random [info procs *_word]]}\n",
  "STchimp": "{} {join {{     __} {   c(..)o} {    (=)__} {     /\\  \\ } { w__/(_)  m} {      /|} {     | \\ } {     m  m}} \\n}\n",
  "optix": "{} {return \"yes: standard output: Broken pipe\\nyes: write error\"}\n",
  "STass": "{} { return \"    _/      \\\\\\n _-\\\"        (\\n(     _     |\\n|    /      |\\n \\\\_  \\\\_   _/ \";}\n",
  "image-terror": "url { magick_overlay $url http://xs135.xs.to/xs135/09040/terror422.png }\n",
  "mccain_advice": "{} {string map {relationship\\ +\\ sex election girlfriend party\\ official} [andrzej_advice]}\n",
  "loliran": "{} {return \"[color green on green]oooooooooooooooooo\\n[color red on white]     (lulz)       \\n[color red on red]oooooooooooooooooo\\n\"}\n",
  "drawtable": "args {apply drawtable2 $args}\n",
  "akill": "{{who {}}} {return \"*** [name $who] has quit: User has been banned from ZiRC (Autokilled: Harassing staff, abusing network services...the list goes on. \\[usercom@zirc.org])\"}\n",
  "cliche": "{{nick {}}} { set nick [or $nick [name]]; set c [cliche_for $nick];  set s \"talks about: [talking_word_for $nick]\"; choose [or $c $s] $s }\n",
  "negronics1": "{} {return \"\u0002\u001fNegronics\u001f\u0002 is the low-temperature preservation of humans of African descent with the hope that de-negrofication may be possible in the future. Human negropreservation is not currently reversible. In the United States, negronics can only be legally performed on negroes that scratch their mark onto a detailed contract.\"}\n",
  "mlia": "{{fuck random}} {set html [unescape_html_entities [wget [resolve http://mylifeisaverage.com/$fuck]]]; set mylife [html [strip_html [lindex [regexp -all -inline {<span id=\"ls_contents-0\">(.*?)<br />} $html] 1]]]; . $mylife}\n",
  "magick_composite_bottom_left": "{urlbottom urltop} {magick_scheme (let  ((img (image $urlbottom)) (ape (image $urltop ))) (composite img ape 0 (- (height img)  (height ape)))) }\n",
  "blackcomedian": "{} {return \"WHITE PEOPLE: \\\"[cached_onehug]\\\"\\nBLACK PEOPLE: \\\"[niggerphrase]\\\"\" }\n",
  "ethnic_food_person": "{} {subst [lindex_random $::ethnic_food_people]}\n",
  "foodsult": "{} {return \"Residents of [country] and [lindex_random $::directions] [city] like to put [topping] on [plural [food_word]]\"}\n",
  "rainpay": "{} {act [rainbow [string range [join [lrange [split [pay]] 1 end]] 0 end-1]]}\n",
  "norse_poem1": "{} { join [ repeat 8 {norseline} ] \" / \" }\n",
  "blackjack_bust_check": "p { set hand [blackjack_get_player $p]; set score [blackjack_score_hand $hand]; if [expr $score > 21] { return 1; } else { return 0; } }\n",
  "amazon.com": "args {. amazon.com [join $args]\\n\\ [U+2323]}\n",
  "compact": "l {set r [list];foreach e $l {if {$e!=\"\"} {lappend r $e}};return $r}\n",
  "warholize": "v { join [map [map [seq 1 4] {{x} {color_box [next_in_list $::warhol_colors] $v}}] {{x y} {ajoin \"\"  $x $y}}] \\n}\n",
  "kebab": "{{n 7}} {ajoin \u000f [regsub -all {  / / } [ncockrow $n] {--/ /-}] \"\\n\\n-[rainbow BONER]\u0003-[rainbow KEBAB]\u0003--\"}\n",
  "go:empty": "{} {uchar 254b }\n",
  "tonality": "{peanut_butter fermented_cat_piss} {lappend weed \"[winamp] Now Playing: Shatneresque - Mega Sex With Retards (5:37/13:58, 192k)\"; set necco's_fetishes [if {$Chromium} {return \"[therapy goons] i just found my uncle's dad stripping saran wrapped roy orbison what should i do???? (56k lollercaust)\"} {set barfing $m4w}]]; lappend cotton_picker $ukhulumelani; return [less $bottom]}\n",
  "chathard3": "{} {smega {choose [string map {\"GAY\" \"CHAT\" \"BAR\" \"HARD\"} [gaybar]] [string map {\"GAY\" \"HARD\" \"BAR\" \"CHAT\"} [gaybar]]}}\n",
  "aimstatus": "args {set aim [join $args +];return \"$aim: \u0002[lindex [lindex [http get [join [list http://big.oscar.aol.com/ $aim ?on_url=online&off_url=offline] {}]] 1] 1]\"}\n",
  "raz": "{} {mega roll 2d12}\n",
  "testings": "a {. [expr $a + 0] }\n",
  "bpost": "{message {subject {}} {poster {}}} {if {[clock seconds] <= ([cache fetch bpost last {. 0}] + 10)} {error \"not so often fgt\"}; cache put bpost last [clock seconds]; set id [bthread]; http post http://dat.4chan.org/b/imgboard.php resto $id name $poster com $message pwd gapp mode regist sub $subject; . posted: http://img.4chan.org/b/res/$id.html}\n",
  "todo:add": "{what {who {[nick]}}} {set who [subst [name $who]]; array set ::todo{$who} [list $who [concat \"{$what}\" [last [array get ::todo{$who}]]]]}\n",
  "master_average": "{{n {}}} {if {$n eq \"\"} {set n [nick]};set l [master_get_stat $n];set s 0.0;set g 0.0;foreach k [seq 0 19] {set s [expr $s+($k+1)*[lindex $l $k]];set g [expr $g+[lindex $l $k]]};format \"%.2f\" [expr $s/$g]}\n",
  "angrygoon": "{} {ajoin \" \" \"\\n\\n[angryboner]\" [flip [STgoon]]}\n",
  "imgaflipfull": "url {. \"[magick flop $url] $url [magick flop [magick flip $url]] [magick flip $url]\"}\n",
  "isntamac": "{{text {HEY THIS ISNT A MAC}}} { ajoin \" \" \"\\n$text\" \"\\n\\n \\\\ \" [embed [flippedomgdude] [ST*] 13 4]  }\n",
  "fuckt": "args { return \"fuck tcl \\' \\n * $args\"}\n",
  "gay_flag": "{} {cdraw [map {red red orange orange yellow yellow green green blue blue violet violet} [& times 50]]}\n",
  "urweather": "nick {weather $::myweather($nick)}\n",
  "dna": "{{count 60}} {join [mapx [seq 1 $count] x {lindex_random {a c g t}}] {}}\n",
  "forumstatus": "{} {return down}\n",
  "cdown_events": "{} {array names ::cdown_events}\n",
  "STgoonLookUp": "{} {return \"  __________\\n (--\\[ '\\]-\\[ '\\]\\n (_______O__)\"}\n",
  "sa_thread_ids": "{{forumid 0}} {even_elm [sa_threads $forumid]}\n",
  "andy": "{} { return \"yo i did some weed tonight guys\" }\n",
  "macprank": "{} {. \"[siren] [b][string toupper [subst [?? $::macpranks]]][b] [siren]\"}\n",
  "debianrand": "{} {smega {join [smega {pick 50 {. \"[bold]NINE \"} 1 {. \"SEVEN \"}}]}}\n",
  "fred": "{{who {}}} {if {$who eq \"\"} {set who [name]}; return \"<$who> Man, what's the world coming to when the #buttes guys revert to petty threats and insults instead of posting dancing pickles and homebrewed catchphrases until they're banned?\" }\n",
  "rot:serializematstringmap": "{mat map} {\n    set c \"\"; set v 0; set b 0;\n    set my \"\"; set myc \"\"; set myv 0; set myb 0;\n    set out \"\";\n    set lout [list];\n    foreach {row} $mat {\n        foreach {elm} $row {\n            set my [lindex $elm 0];\n            set myc [lindex $elm 1];\n            set myb [lindex $elm 2];\n            set myv [lindex $elm 3];\n            if {$c!=$myc} { append out $myc };\n            if {$b!=$myb} { append out [rot:B] };\n            if {$v!=$myv} { append out [rot:V] };\n            set c $myc;\n            set v $myv;\n            set b $myb;\n            append out [string map $map $my]\n        }\n        set c \"\";\n        set v 0;\n        set b 0;\n        lappend lout $out;\n        set out \"\";\n    }\n    return [join $lout \\n];\n}\n",
  "LiteralKa_fav": "{} {[choose \"lindex_random $::cached_onehug\" \"lindex_random $::odin\" \"lindex_random $::niggerphrases\"]}\n",
  "radar": "location {set coords [get_coords $location]; . http://radblast-mi.wunderground.com/cgi-bin/radar/WUNIDS_map?station=LOT&type=N0R&scale=1.000&noclutter=0&lat=[lindex $coords 0]&lon=[lindex $coords 1]&smooth=1#.png}\n",
  "STbike": "{} {join {{     _~o } { _-\\<,_  } {(_)/ (_) }} \\n}\n",
  "upper": "args {string toupper [join $args]}\n",
  "engimacro": "args {acroform [engimize [join $args]]}\n",
  "ramsey": "{} {return \"fuck me!\"}\n",
  "cached_sfart": "{} { set out [lindex_random $::cached_sfart]; if {[rand 6] == 0} { catch { set out [sfart]; lappend ::cached_sfart $out} }; return $out; }\n",
  "bart": "args {set b [string repeat [crange [join $args] 0 50]\\n 4];set c [string repeat [crange [join $args] 0 40]\\n 2];embed [embed $::bart $b 2 1] $c 2 5}\n",
  "image-japgirlmonitor": "args { japgirlmonitor_scheme [or $args [cdr [randtag]]] }\n",
  "scheissegern3": "{} {return \"<@ScheisseGern> i finally found a use for [shsc_word]\\n<@ScheisseGern> and that is running [shsc_word]\"}\n",
  "STnegrowizard": "{} { join [list {   __ } \"  / _\\\\\" { / /  } {/__\\  } {/..\\  } {\\ O/  } { \\/   } ] \\n }\n",
  "drawcell": "{string width {color default} {align left}} {if [string equal $color \"\"] {set color default}; if [string equal $align \"\"] {set align left}; set spaces [format \"% [expr  $width - [string length [strip_all $string]]]s\" {}]; if [string equal $align right] {return \"[apply color $color] $spaces$string \"}; return \"[apply color $color] $string$spaces \"}\n",
  "true?": "value {expr ![false? $value]}\n",
  "boldupper": "str {regsub -all {([A-Z])} $str {\u0002\\1\u0002}}\n",
  "boobscotch": "{} {next_in_list $::bsl}\n",
  "google": "args {if !{[string length [set results [last [regexp -inline {^-([0-9]+?) } $args]]]]} { set results 10; } else { set args [last [regexp -inline {^-[0-9]+? (.+)$} $args]] }; if {[regexp {^-[0-9]+? } $args]} { set results \\1; }; each [regexp -all -inline {<h3 class=r><a href=\"(.+?)\"[^>]+?>(.+?)</a>.*?</h3>} [last [http get http://www.google.com/search?q=[urlescape $args]&num=$results]]] {{match url title} {. \"\\002[html $title]\\002 - \\x1f$url\\x1f\"}}}\n",
  "goonsay": "blah {stampsay -s goon $blah}\n",
  "onebutan_logo": "{} {. \"                     _\\n                    /\\\\)         __\\n  ____  ____  ___  / /_  __  __/ /_____ _____\\n / __ \\\\/ __ \\\\/ _ \\\\/ __ \\\\/ / / / __/ __ `/ __ \\\\\\n/ /_/ / / / /  __/ /_/ / /_/ / /_/ /_/ / / / /\\n\\\\____/_/ /_/\\\\___/ ____/\\\\__,_/\\\\__/\\\\__,_/_/ /_/\\n               ( Y)\\n                \\\"\\\"\"}\n",
  "biggaygudrow": "{} {biggaytext [gudrow_word]}\n",
  "ncockrow": "a {return \"[string repeat \"     _\" $a]\\n [string repeat \"   /\\\\)\" $a]\\n [string repeat \"  / / \" $a]\\n [string repeat \" ( Y) \" $a]\\n [string repeat \"  \\\"\\\"  \" $a]\"}\n",
  "bigquote": "symbol {array set info [first [stock_info $symbol]]; if {$info(change) < 0} {set dir â; set color red} {set dir â; set color green}; ajoin \"     \" [bt [string trimleft $symbol .]] [bgr [color_of $color] \"$dir $info(last_trade)\"]}\n",
  "gaybuttshack": "{} {gayflagify [butteshack]}\n",
  "jobeth": "{} { return \"If you think showing a few people on other networks my tits is funny, then you're sadly mistaken.\"; }\n",
  "gud_fetish": "{} {set ret [list]; for {set i 0} {$i <= [rand 5]} {incr i} {lappend ret [strip_u [fetish_porn]]}; return [gudrize [join $ret]]}\n",
  "chop": "{{who {}}} {me \"[circumsize_word]s [name $who]\"}\n",
  "bleep_word": "{} {lindex_random $::bleep_word}\n",
  "celcius": "f { expr ( $f - 32 ) * 5 / 9 }\n",
  "nc": "{} {goonsay \"hey guys the [tranny_word] are from the internet\"}\n",
  "swastikatika": "{} {tcl string map {# \\345\\215\\220 o \\345\\215\\215} [ swastika ###\\n#oo\\n#oo ]}\n",
  "mcdonalds": "{} {return \"I'm a dollar menu guy\"}\n",
  "query2": "list {set result [list]; foreach {key value} $list {lappend result [urlencode2 $key]=[urlencode2 $value]}; join $result &}\n",
  "blakelog": "{} {select [log] {line {set nick [lindex $line 1]; expr {$nick eq \"mixdup\" || $nick eq \"mixduptransistor\" || $nick eq \"joseph\" || $nick eq \"joseph_\"}}}}\n",
  "newsservice": "{} {return [lindex_random $::newsservice]}\n",
  "randmeasure8": "{{who {}}} {return \"http://[singlerandomword].on.nimp.org/~[name $who]/[virusfile]/u?=buttes\"}\n",
  "algebra": "{} {return \"Hello! My name is \u000313Ahmed Al-Sular\u0003, I am a \u00034MATH\u0003 professor at the national University of \u00034IRAN\u0003 , And as a proud \u00034ARAB\u0003 i must inform you that \u00034WE\u0003 invented \u00034MATH!\u0003 That's right kids! When you learn \u00034MATH\u0003 in school, you learn \u00034TERRORISM!\u0003 IF YOU WANT TO HELP US \u00034ARABS\u0003 DESTROY ANOTHER TRADE CENTER, \u000312GO LEARN \u00034MATH\u000312 NOW!!!\"}\n",
  "freedom": "{{hater {}}} {if {$hater eq \"\"} {set hater [lindex_random [names]]}; return [hate $hater Freedom]}\n",
  "cockesfm": "{{group buttes}} {drawtable2 [map [lastfm:GetListenersHTML $group] {html  {list [fixnick [lastfm:namemap [lastfm:user $html]]] [lastfm:artist $html]  [lastfm:track $html] {}}}] {{white on red} {blue on yellow} {white on blue}} [subst  -nocommands {[apply color [next_in_list {{white on orange} {white on green} {white on  violet}}]] å }]}\n",
  "microsoft_domain": "{} {?? $::microsoft_domains}\n",
  "randbible": "{} {lindex [regexp -inline {<p>([^<]+)} [wget http://www.bible-history.com/random.php]] 1}\n",
  "phobic": "{} {return \"[lindex_random $::pervprefix]phobic\"}\n",
  "STapple": "{} {join [list {     /)} { .-,'_.-.} {;       (} {;       `,} { '._^._./}] \\n}\n",
  "rotflmao": "{{who {}}} {subst $::rotflmao}\n",
  "ruby_book": "{} {proc dave_thomas {} {baconator}; return \"shitty programming books\"}\n",
  "magick-scale": "{img percent} {magick-scale_scheme $img $percent}\n",
  "h8": "{{n 5}} {lselect_random {\"h8\" \"h8h8\"} $n}\n",
  "gbsfm_fanfiction": "{} {return \"As [name] was slowly and gently [sex_act] [name]'s [sexpart], they whispered 'hush, it will all be over soon'.\"}\n",
  "STncock": "{} { return [ncock [expr [rand 3]]] }\n",
  "ms": "line {for {set i 0} {$i < [expr [llength $line] / 2 + 1]} {incr i} {set tok [lindex_random $line]; if {[string length $tok] > 3} {lappend mslist $tok [subst \"$tok[choose Â® â  â¢]\"]}}; if {[info exists mslist]} {string map $mslist $line} {. $line}}\n",
  "notmyacq": "{} {return [string map {\"my \" \"\"} [acquaintance_word]]}\n",
  "STxd": "{} {. \"\\\\/|\\\\\\n/\\\\|/\";}\n",
  "cclock": "{} {return \"ï¿½ ï¿½ ï¿½ ï¿½  _____\\nï¿½ ï¿½ ï¿½ _.'_____`._\\nï¿½ ï¿½ .'.-'ï¿½ 12 `_.`.\\nï¿½  /,'ï¿½ _ï¿½ ï¿½  /\\\\)`.\\\\\\nï¿½ // 10(/\\\\ï¿½  / / 2 \\\\\\\\\\n ;;ï¿½ ï¿½  \\\\ \\\\ / /ï¿½ ï¿½  ::\\n || 9ï¿½  (Y ( Y)ï¿½  3 ||\\n ::ï¿½ ï¿½ ï¿½ \\\"ï¿½ \\\"\\\"ï¿½ ï¿½ ï¿½ ;;\\nï¿½ \\\\\\\\ 8ï¿½ ï¿½ ï¿½ ï¿½ ï¿½  4 //\\nï¿½  \\\\`. 7ï¿½ ï¿½ ï¿½  5 ,'/\\nï¿½ ï¿½ '.`-.__6__.-'.'\\nï¿½ ï¿½  ((-._____.-))\\nï¿½ ï¿½  _))ï¿½ ï¿½ ï¿½  ((_\\nï¿½ ï¿½ '--'ï¿½ ï¿½ ï¿½  '--'\\nï¿½ ï¿½ IT'S COCK O'CLOCK\"}\n",
  "nordrap": "{} {return \"[nordsay [niggerphrase]]\"}\n",
  "get_nc_ascii_lib": "ascii {wget http://dieforirc.com/~pure/a/$ascii}\n",
  "c99": "{} { return \"08,04\" }\n",
  "vb_fetch_threads": "{root forumid {pagenumber 1}} {set html [wget $root?forumid=$forumid&pagenumber=$pagenumber];set ret [list];foreach {match threadid title} [regexp -all -inline {<a .*?href=\"[^\"]*showthread(?:.*?)threadid=(\\d+)\"[^>]*>([^<]+)</a>} $html] {lappend ret [list $threadid [html $title]]};return $ret}\n",
  "aimfill": "args {aim -n [aimname $args] [fill]}\n",
  "engimoproblems": "{} { . {Some people, when confronted with an engimo, think \"I know. I'll use engimo.\" Now they have two engimos.} }\n",
  "STblake": "{} {join {{ __________} {(--[ -]-[ -]} {(______uu__)}} \\n}\n",
  "actor": "{} {lindex_random $::actors}\n",
  "STlightrain": "{} { return \"  ,--. ,-.   \\n (    \\`   ). \\n('   ,   ,  ;\\n\\`---;---;'--'\\n   '--,'-,   \";}\n",
  "schizoid": "{} {pyramid schizoid\\ }\n",
  "phubuhzooka": "{} {return \"\\ __________________________ ______________\n-|_________________________________|                = = - -|==== _______ >\n                              / /  _ |       / /\n\n/            /_//_/           [phubuh]\"}\n",
  "spewaim": "{{who {}}} {set body [mega spew]; if {$who eq \"\"} {aim $body} {aim -n $who $body}}\n",
  "andrzej_headshot": "{} {. http://grfx.cstv.com/photos/schools/mit/sports/m-crewlt/auto_headshot/1946824.jpeg}\n",
  "jewproduct": "{} {lindex_random $::jewproduct_dict}\n",
  "abezcomic": "{{text {}} {title IRC} {style abez} {author you}} {  last [regexp -all  -inline {id=\"imageurl\">(.*?)</a>} [http post http://churchturing.org/comics/generator.cgi action generate style $style author $author title $title text $text]] }\n",
  "crash": "{} {string repeat x 2147483644}",
  "STburger": "{} {join {{     ___      } {  .-'';:::.   } { / ',''.;;;\\  } {|  ','','.''| } {|\\  ' ,',' /' } {`.`-.___.-;'  } {  `--._.-'} {}} {\n}}\n",
  "image-tomfuck": "url { tomfuck_scheme $url }\n",
  "trace:tree_level": "{proc l} {apply {set ttree} [. \"\\$::ttree_${proc}\"]; each [lsearch -regexp -all $ttree \"^${l}\\$\"] {idx {. [uplevel \"lrange \\$ttree [expr $idx - 1] $idx\"]}}}\n",
  "hardwrap": "{j {s 60} {l {}}} { if {$l eq \"\"} { set l [expr ceil([clength $j]/$s)+1] }; set r [list]; for {set i 0} {$i < $l} {incr i} { lappend r [crange $j [expr $i*$s] [expr $i*$s+$s-1]] }; join $r \\n }\n",
  "masturbationhacks": "{} {more {masturbationhacksdata}}\n",
  "cthulhu": "{} {join [list {  _--------.    } { /    ~~~~~~\\   } {(_   ~~~@~~@|   } { \\   ~~//|\\\\\\  |} {  \\   \\|||/\\\\\\_/} {  /   /|//_/|/__} { /    \\_\\ \\|\\|  }] \\n}\n",
  "gayagenda": "{{n 5}} { set starttime [+ [rand 6] 9]; return \"GAY AGENDA:\\n[join [mapx [szip [seq $starttime [+ [- $n 1] $starttime]] [getnuniq $n gayagenda:event]] x {ajoin \" \" \"  \" [gayagenda:time [car $x]] \":\" [wrap [upper [cadr $x]] 30]}] \\n]\"}\n",
  "unispace": "{{n {}}} {join [map [seq 1 [or $n [rand 100 200]]] {x {uchar [?? {2000 2001 2002 2003 2004 2005 2006 2007 2008 2009 200a 200b 200c 200d 200e 200f 0020 00a0 202f 3000 feff}]}}] {}}\n",
  "exclusive": "{} {string toupper \"[political_figure] was behind [historical_event], reports [source]\"}\n",
  "wu": "args {set r {}; if [catch {set r [wu:0 $args]}] {error \"unable to query RSS feed for that station\";} else {return $r;}}\n",
  "arcadedown": "{{message {}} {font {}} {size {}}} {.  http://i.buttes.org/index.php/http:/nfggames.com/system/arcade/arcade.php/b-d/bp-0/y-[or $font [?? $::arcade_font]]/z-0/dbl-[or $size 2]/x-[urlencode $message]#.jpg}\n",
  "stream": "{width height} {if {$width < 1 || $height < 1 || $height > 20 || $width > 40} {error \"GO PEE INTO THE SEA\"}; set stream [list]; for {set y 0} {$y < $height} {incr y} {set x [expr {int(sqrt($width*$y))}]; lappend stream [string repeat \" \" $x].}; join $stream \\n}\n",
  "magick_scheme": "args { http://magick.buttes.org/abez/magick.rb?[? cmd scheme id [join $args]] }\n",
  "yiff": "{{who {}}} {me \"[furry_verb] [name $who]'s [furry_noun]\"}\n",
  "genre": "{} {lindex_random $::genre_dict}\n",
  "biggayhate": "{{puntme {}} {washingmachine {}}} {if {$puntme eq \"\"} {set puntme [lindex_random [names]]}; if {$washingmachine eq \"\"} {set washingmachine [lindex_random [names]]}; hate [biggaybowtext $puntme] $washingmachine}\n",
  "hcfort": "{} { ajoin \" \" [buttesfort:fort] \"HARDCHATS COMPOUND LEVEL [+ 1 [rand 9]]\\n-----------------------\\n\\n[hcroomlist]\" }\n",
  "plol": "args {return \u000313[strip_color [lol $args]]\u000f}\n",
  "paulamond": "{} {return \"[paulamid]\\n[vflip [paulamid]]\"}\n",
  "nfart": "{} { niggerize [fart] }\n",
  "aimf_miscjre": "args {aimify miscjre $args}\n",
  "lilo": "args {if {$args eq \"\"} {set args theo};regsub {(\\d+) (\\d+)} [mapx {0 0} x {lindex_random [seq 2 13]}] \"\u0003\\\\1-\u0003\\\\2lilo/Wallops\u0003\\\\1-\u0003 [eval $args]\"}\n",
  "ac%line": "{} {set convol [lindex_random $::convol]; set line [subst \"\\[${convol}\\]\"]; if {[rand 20] < 8} { set line [insectify ${line}]; }; if {[rand 30] < 7} { set line [tootify ${line}]; }; . [center2 [wrap ${line} ${::ac%wrapat}]]; }\n",
  "v%rand": "{ceil {floor 1}} { expr int((rand() * (${ceil} - ${floor})) + ${floor}) }\n",
  "acroret": "{{c {}} {i {}}} {set c [lindex_random [acrofind $c]];if {$i eq \"\"} {acroret $c [expr int(rand()*[llength $::acronym($c)])]} {return \"\u0002[string toupper $c]\u0002: [regsub -all \"(^| )(\\[A-Z])\" [capitalize [lindex $::acronym($c) $i]] \"\\\\1\u0002\\\\2\u0002\"]\"}}\n",
  "dividebyzero": "{} {rainbow [giga randart]}\n",
  "borky": "{{args {}}} {return \"Fuck you [name $args]. I want to hear goon experiences. Stop destroying my threads.\"}\n",
  "gayamid": "{{who {}}} {rainbow [pyramid \"[name $who] \"]}\n",
  "ramsay": "{} ramsay_word\n",
  "rainlump": "str {rainbow [lump \"$str\"]}\n",
  "unknown:6:cmd(find_command)": "{match args} {uplevel 1 [concat [list $match] [lrange $args 1 end]]}\n",
  "oic": "{} {smega {say \"oic\"}}\n",
  "moira_litany": "{} { return \"<@moira_> [litany {[booze_word]}]\" }\n",
  "hlp": "{} { cwget http://block.hardchats.com/klulz/hlp.txt}\n",
  "420?": "{} {c 4/ 20}\n",
  "shsc_anecdote": "{} {subst [?? $::shsc_anecdotes]}\n",
  "whiners?": "{} {c [llength [intersect [string tolower [names]] $::whiners]] whiners}\n",
  "marine_comic_frame2": "{} {let {art {box [embed [canvas 35 12] $art 2 [- 12 [llength [lines $art]]]]}} [ajoin \" \" [wrap [moiradrunk] 19] \\n\\\\ \\n[STmoirabald]]}\n",
  "maxdims": "str { set w 0; set h 0; foreach {row} [split $str \\n] { set w [rot:max $w [string length $row]]; incr h;}; return [list $w $h]}\n",
  "bongcity": "{} {upper [?? [lgrep bong [lines [~http://cesspool.net/jerkcity/jerkcity.txt]]]]}\n",
  "mccainburger": "{} {string map {STEVE\\ JOBS JOHN\\ MCCAIN AAPL ZOGBY ipod\\ shuffle attack\\ ad imac robocall} [steveburger]}\n",
  "select": "{list block} {\n  set result [list]\n  foreach value $list {\n    if [true? [yield $value]] {\n      lappend result $value\n    }\n  }\n  return $result\n}\n",
  "i": "{args} {inspect $args}",
  "japgirlmonitor-gen": "url {. (let ((im (image [crop_to_fit_and_resize $url 0 0 225 190])) (bg (image http://churchturing.org/x/japgirlmonitor.png)) ) (composite (composite bg im 325 100) bg 0 0)) }\n",
  "fagosaurus": "{{v {[name] is a fag}}} { embed [STfagosaurus] [subst $v] 30 1}\n",
  "engimize": "args {string map -nocase $::engimodict [join $args]}\n",
  "track": "{carrier number} {\n\tcache put last_track [nick] [list $carrier $number];\n\tset number [join $number \"\"];\n\tset results [track_$carrier $number];\n\tjoin [lindex $results 0] \"   \"\n}\n",
  "shsc_experience": "{} {subst [?? $::shsc_experience]}\n",
  "STmfgoon": "{} { join [list {  __________ } { (--[\\<>/\\<>/ } { (____\\|--|/) }] \\n }\n",
  "mobexcuse": "{} {?? $::mob_excuses}\n",
  "darren_ad": "{} {embed [tail [head 17 [macro tux]]] \"[color black]lats.\\n[color black]quads.\\n[color black]pecs.\\n[b][color black]DARREN[b]\" 5 5}\n",
  "heron3": "{} { return [wale]; }\n",
  "SThorse2": "{} { return \"  \\\\\\` ,/\\\\     \\n   \\\\\\\\o  \\\\~~  \\n   /   ) \\\\~~ \\n  ('_/\\\\   \\\\=_\\n      |      \";}\n",
  "homos?": "{} homosexuals?\n",
  "tattletroll": "{} {return [smega {aim [tattle]}]}\n",
  "image-rand": "args {image-* $args}\n",
  "duka": "{{who {}}} {return \"pleas do not cuss i am on office network thank you [name $who]\"}\n",
  "condition": "{} {subst [lindex_random $::condition_dict]}\n",
  "jews": "{} { return \"jews? they're the worst type of people alive on planet Earth.\" }\n",
  "fastfood": "{} {lindex_random $::fastfood_dict}\n",
  "rbl_time": "{{time 0}} {if !$time {set time [rbl_time_seconds]}; clock format $time -format \"%b %d %H:%M:%S\"}\n",
  "vorc": "{} {return \"[color black on black]oooo[color cyan on cyan]oooo[color white on white]oooo[color black on black]oooo[color cyan on cyan]oooo[color white on white]oooo[color black on black]oooooooo\\n[color black on black]oo[color cyan on cyan]oooooo[color white on white]oooo[color black on black]oooo[color cyan on cyan]oooo[color white on white]oooo[color black on black]oooo[color cyan on cyan]oo[color black on black]oo\\n\"}\n",
  "overheard_in_cockes": "{} {set one [name]; set two [name]; if {$one eq $two} {append one \" #1\"; append two \" #2\"}; return \"$one: [[choose butte_word ethnic_group]]\\n$two: [[choose butte_word ethnic_group]]\\n$one: [[choose butte_word ethnic_group]]\\n-- #cockes\"}\n",
  "master_np_match": "{i a} { set b [expr [expr [master_gete $i 0] == $a] + [expr [master_gete $i 1] == $a] + [expr [master_gete $i 2] == $a] + [expr [master_gete $i 3] == $a]  ]; if {$b > 0} { return 1; } else { return 0;}}\n",
  "v%ifx": "args { global {v:ifx}; set args [join ${args}]; join [subst ${v:ifx}] }\n",
  "vthread": "{} {last [regexp -inline {res\\/(.+?)\\.} [wget \"http://zip.4chan.org/v/\"]]}\n",
  "proc2": "{} {[proc1]}\n",
  "avatar-think": "{avatar text {orient L}} {\n\tmagick_scheme [gen-avatar-say-code $avatar $text $orient  http://churchturing.org/x/thoughtballoonL.png ]\n}\n",
  "fatgoonwebquote": "{glob} {?? [lfilter -nocase *$glob* [wget http://llolo.lol/tcl/fatgoon.tcl]]}",
  "fixbot": "{} {say \"\u0016 ABEZ FIX BOT\"}\n",
  "imnota": "{} {return \"\u0002I'm not a [shsc_word], that's what's so [shsc_word] about this.\"}\n",
  "omgtotemsayislam3": "{} {ajoin \"\" [wrap [join [islam3]] 50] \"\\n\\\\\" [aflip [omgtotem]]]}\n",
  "rainmoira": "{{who moira}} {return \"\u0003[gay][moira $who]\"}\n",
  "ajoin": "args { set b [lindex $args 0]; set args [lrange $args 1 [llength $args]]; set o \"\"; set nlines [maxlines $args]; set newline \"\"; set nl \"\"; foreach j $args { lappend nl [addspaces $nlines $j]; }; for {set i 0} { $i < $nlines } { incr i } { append o $newline; set d \"\"; foreach k $nl { append o \"$d[lindex [split $k \"\\n\"] $i]\"; set d $b; }; set newline \"\\n\"; }; return $o; }\n",
  "oddlist": "l {set o [list]; foreach {e odd} $l {lappend o $odd;}; return $o}\n",
  "namegen": "{} {return [lindex_random [names]]}\n",
  "rainrss": "url {rain [rss $url]}\n",
  "jre2": "args {return \"[comedian] would work that into a bit about [political_figure] thinking [seinfeld_word] live on the moon. [fatgoon_finale].\"}\n",
  "moiracam1": "{} {return \"               .--.\\n               |/`-\\\\\\n           __ _( -\\\\-\\n       _.-'  |  __(,\\n     .' _.-'  \\\\/   %;\\n    /\\\\.'      /   ;%,\\n    \\\\/ '.__.-'    '#;\\n    |     /        ;%,\"}\n",
  "unknown:nick/joseph/": "args {error [mockblake]}\n",
  "level": "{} {return \"level [lindex_random [seq 1 30]]\"}\n",
  "hello2": "{} {return \"<hello> there's some fucked up porn on TV with this guy in a wig getting fucked in the ass while he's got this american flag wrapped around him\"}\n",
  "TAFKADH\u0002\u0002": "{} {lol {MORE LIKE DIKKy HEARTIEZ}}\n",
  "pubmccain": "num {publish [. [subst [string repeat {[mccain_slogan]\\n} [expr {int($num)}]]]]}\n",
  "train": "{{who {}}} {. beep beep here comes the [name $who] train}\n",
  "saq_girls": "{} {?? $::saq_girls}\n",
  "axe": "args {niggerize [apply ask $args]}\n",
  "slap": "{} {return \" \u0002\u0002 \u0002\u0002 \u0002\u0002 \u0002\u0002 \u0002\u0002 \u0002\u0002 _.-._ \u0002\u0002 \u0002\u0002 \u0002\u0002 \\n \u0002\u0002 \u0002\u0002 \u0002\u0002 \u0002\u0002 \u0002\u0002 | | | |_ \u0002\u0002 \\n \u0002\u0002 \u0002\u0002 \u0002\u0002 \u0002\u0002 \u0002\u0002 | | | | | \u0002\u0002 \u0002\u0002 \u0002\u0002 LUDACRIS FEELS LIKE SLAPPING AN N-WORD TODAY\\n \u0002\u0002 \u0002\u0002 \u0002\u0002 \u0002\u0002 \u0002\u0002 | | | | | \\n \u0002\u0002 \u0002\u0002 \u0002\u0002 _ | \u0002\u0002 '-._ | \\n \u0002\u0002 \u0002\u0002 \u0002\u0002 \\\\`\\\\`-.'-._; \\n \u0002\u0002 \u0002\u0002 \u0002\u0002 \u0002\u0002 \\\\ \u0002\u0002 \u0002\u0002 \u0002\u0002 ' \u0002\u0002 \u0002\u0002 | \u0002\u0002 \u0002\u0002 \u0002\u0002 JUST FYI, MIGHT WANT TO STAY CLEAR \\n \u0002\u0002 \u0002\u0002 \u0002\u0002 \u0002\u0002 \u0002\u0002 \\\\ \u0002\u0002 .` \u0002\u0002 / \u0002\u0002 \\njgs \u0002\u0002 \u0002\u0002 \u0002\u0002 | \u0002\u0002 \u0002\u0002 \u0002\u0002 |\"}\n",
  "omgtotem": "{{text omg!}} {return \"       __  \\n      /..\\\\ \\n omg! \\\\O_/ \\n      /..\\\\ \\n      \\\\_O/ omg! \\n      /..\\\\ \\n omg! \\\\O_/  \\n      /..\\\\ \\n      \\\\_O/ $text\"}\n",
  "bpt": "args {bgr 13 $args}\n",
  "rainjews": "{} {rainbow [jews]}\n",
  "do": "script {let [list {} $script]}\n",
  "overheard": "{} {set one [overheard_people]; set two [overheard_people]; if {$one eq $two} {append one \" #1\"; append two \" #2\"}; return \"$one: [overheardline]\\n$two: [[choose albot niggerphrase cached_onehug mystic al_insult]]\\n$one: [overheardline]\\n-- [choose [manhattan_cross_street] [ny_locale]]\"}\n",
  "obamajeans": "{} {return {http://i.cdn.turner.com/cnn/2008/images/05/08/gall.obamajeans.gi.jpg}}\n",
  "conjoin": "{list {conjunction and}} {if {[llength $list] < 2} {join $list} elseif {[llength $list] == 2} {join $list \" $conjunction \"} else {join [list [join [lrange $list 0 end-1] \", \"] [lindex $list end]] \" $conjunction \"}}\n",
  "badtrip": "{} {return \"Last time I did bad [drug], I thought I was being chased by this [badjective], [adjective] [animal_word] named \\\"[deity] Of [country]\\\" holding his [penis_word] while screaming \\\"[string toupper [niggerphrase]]! [string toupper [repeated_word]]\\\" who then beat me up with a ball of pure, frozen [string tolower [element_word]]... turned out it was just my buddy [waspfirstname], who was just as [mood_word] as I was...\"}\n",
  "trolldar": "{{nick {}}} {string map [list \"PING... PING... GAY DETECTED\" \"   \u0002TROLL DETECTED\"] [gaydar:placename [gaydar:scope] $nick]}\n",
  "terror-alert": "{} {regexp {alt=\"Terror Alert ([^\"]+)\"} [wget {http://www.terror-alert.com/alert/status.jsc?id=1}] {} t;return \"Terror Alert Level: [string map [list Low [color green] Guarded [color blue] Elevated [color yellow] High [color orange] Severe [color red]] $t]$t\"}\n",
  "chineespeak": "thing {return \"[string map {\"r\" \"l\" \"l\" \"r\" \"L\" \"R\" \"R\" \"L\"} $thing]\"}\n",
  "wb": "{} {wet {welcome back!}}\n",
  "mirror_bottom": "url {set dims [get_image_size $url]; set x [lindex $dims 0]; set y [lindex $dims 1]; set half [magick_id [magick crop $url 0 [expr $y/2] $x [expr $y/2]]]; set flip [magick_id [magick flip $half]]; magick composite $url $flip 0 0}\n",
  "hoiah": "{} {oldflip [haioh]}\n",
  "urdistance": "{nick airport} {airport_distance $::myweather($nick) $airport}\n",
  "dasbutan": "{} {return \"[bgc 01 04 1 volk]\\n \\n[bgc 04 01 1 reich]\\n \\n[bgc 01 04 1 butan]\"}\n",
  "randart:inrange": "{nx ny w h} { if {[expr $nx < 0 || $ny < 0 || $nx >= $w || $ny >=  $h]} { return 0; } {return 1;}}\n",
  "weightclass": "{} { . \"[choose light welter middle heavy]weight\"}\n",
  "STbabygoon": "{} { join [list {  _s_____ } { ([ -][ -]} { (___(c)_)} ] \\n }\n",
  "megamystery": "{} {subst [join [string repeat {[mystery] } 5] \\n]}\n",
  "psychologist": "name {stampsay -l -s doctor2 \"hello, $name, why don't you lay down on my curvy leather couch and we can discuss this issue\"}\n",
  "endgame": "args {return \"\u0002For the New World Order, a world government is just the beginning. Once in place they can engage their plan to exterminate 80% of the world's population, while enabling the \\\"elites\\\" to live forever with the aid of advanced technology.\\nFind out more at \u001f\u000312http://www.whatistheendgame.net\"}\n",
  "gizzle": "{{who {}}} {join [map1 [split [wrap [hacker [rotflmao $who]] 100] \\n] rainbow] \\n}\n",
  "moresleep?": "{} {wet more coffee}\n",
  "harass": "{} {ajoin \"\" [fastmystery] [mega . \u00031,1 base3:]}\n",
  "arab_search": "{} {set darrabs 0; set darrabens \"\"; foreach darren [string tolower [names]] { if [regexp {^a-?rab@|root@127\\.0\\.0\\.1$}  [hostmask $darren]] { append darrabens \"$darren \"; incr darrabs; }; }; return [c \"$darrabs ARABS:\" [join $darrabens \",\"]];}\n",
  "blackjack_set_score": "{p s} { array set ::blackjack_score [list $p $s];   return [blackjack_get_score $p]; }\n",
  "cellfish": "{} {smega {aimaway [cellphonenumber]}}\n",
  "moirafu": "{} { ajoin \"\" [fu] [STmoirahead] [flip [fu]]  }\n",
  "zs": "{{args {}}} {lol [error \"zsh isn't a command you fag\"]}\n",
  "synirc": "{} {regsub Z.{5} [czirc] SYNIRC}\n",
  "holiday": "{} {return \"A devout [religious] commits no [crime] on [day].  This is to honour the time [deity] [choose \"destroyed [country]\" \"killed a city of [religious]s\"] for us.\"}\n",
  "stopword?": "word {include? $::stopwords [lc $word]}\n",
  "recapply": "{n f text} {foldxo x o $text [seq 1 4] {$f $o}}\n",
  "aimhands": "{{sn {}}} { aim -n [aimname $sn] \"MR HANDS DIED FOR YOUR SINS. MAY GOD HAVE MERCY ON HIS SOUL. PLEASE SEE THIS WONDERFUL MEMORIAL TO HIM: http://lbn.threat.tv/mrhands.wmv\" }\n",
  "lastfm:namemap": "name {set res $name;catch {set res $::lastfmnamemap($name)}; return $res }\n",
  "hellodotjaypeg": "{} {return \"              \u000308\u0002 \\\".           ,#\u000f\\n               \u000f\u000308\u0002\\\\ `-._____,-'=/\u000f\\n            \u0002____\u000f\u000308\u0002`._ ----- _,'\u000f\u0002_____\\n                   \u000f\u000308\u0002`-----'\u000f\"}\n",
  "twitteratio": "username {format %0.2f [expr [join [lreverse [twitteratio:counts $username]].0 /]]}\n",
  "blakememorial": "{} {. \"http://img33.glitterfy.com/269/glitterfy112557T651D37.gif\\nhttp://i.conio.net/blake.jpg\\nhttp://img33.glitterfy.com/269/glitterfy112813T701D34.gif\"}\n",
  "steveism": "{} {return [lindex_random $::steveism]}\n",
  "buttes": "{} {return [gnolsay [lindex $::gnol_dict 1]]}\n",
  "metal_frot": "{} {draw {00000011110000111100011111 111110100010010000100001 100000100010010000100001 100000111100010000100001 111100100010010000100001 100000100010010000100001 100000100010001111000001 1 100000000010000000000001 000000100000000000000001 1}}\n",
  "mroachplot": "{} {. \"\\\"Fonez[sequel]\\\" ([string totitle [genre]], [+ 1982 [rand 26]]) tells the story of Michael Roach ([celebrity]) growing up in [choose Sweden Norway Singapore Japan], coping with fonez, fonez, fonez, and [choose [mroach_word] [lindex_random $::fone_names] [plural [lindex_random $::fone_function]]].\"}\n",
  "aimthreaten": "{} { return \"don't use me\" }\n",
  "jew_count": "{} {llength [intersect [string tolower [names]] [string  tolower $::jew_count]]}\n",
  "moiracam4": "{} {return \"                 /  ___\\n                /  / - -\\n                \\\\ C    >\\n                 _)' _( .' ,\\n              __/ |_/\\   \\\" *. o\\n             /` \\\\_\\\\ \\\\/     %`= '_  .\\n            /  )   \\\\/|      .^',*. ,\\n           /' /-   o/       - \\\" % '_\"}\n",
  "butteshack:lookup": "sym {if {$sym == \"@\"} {. \"You (usually), or another [singleethnic].\"} else {. $::butteshacksymbols($sym)}}\n",
  "confirm": "args {return {Confirmed}}\n",
  "gays?": "{} {c [llength [intersect [string tolower [names]] [string tolower $::gay_count]]] gays}\n",
  "air_koryo": "{} {. \"I think [?? $::vital_aircraft_part] may have been inoperative, but otherwise the flight was fine. \"}\n",
  "l2g": "{} letter_to_grandma\n",
  "timebomb": "{} { . \"timebomb [nick]\" }\n",
  "daytime": "{} {clock format [clock seconds]}\n",
  "STchatzilla": "{} { join $::chatzillastamp \\n }\n",
  "nmu": "args {return \"There is not much going on in my life at the present timeframe of which you speak about. How about your life in the current timeframe?\"}\n",
  "image-snipe": "url { magick_overlay $url http://imgur.com/S5njI.png }\n",
  "craigslist": "{} {return \"[craigslist_word] ([location_word] [direction_word])\"}\n",
  "deadprank": "{} { subst [lindex_random $::deadprank] }\n",
  "incog7": "{} {publish [macro:scale [savagesay [xss]]]}\n",
  "rude": "args rst\n",
  "->jp": "args {error \"it's actually 'ja'\"}\n",
  "trapezoid": "{{x 20} {y 10}} {set my_n 0; join [map [split [regsub -all {\\|} [box [canvas $x $y]] \"\\\\\"] \\n] {l {set my_n [expr $my_n + 1]; . [string repeat \" \" $my_n] $l}}] \\n}\n",
  "fixbot2": "{} {. {Winkie fib xot}}\n",
  "zenwhen2": "{} {return \"< zenwhen> XM is for fags because no howard stern\"}\n",
  "wntd_object": "{} { lindex_random $::wntd_object }\n",
  "constipation": "{{name {}}} {return \"I am \u00038[name $name]\u000f, captain of the fair ship \u00037[constipation_word]\u000f and ruler of \u00035[laxative_word]\u000f\"}\n",
  "aimfactor": "args {set n [aimname [lindex $args 0]];aim -n $n [regsub -all [nick] [factor [join [lrange $args 1 end]]] $n]}\n",
  "kurds": "{} { return \"kurds? they're worse pigs than the jews.\" }\n",
  "sexyladies": "{} { set lines [split [STwoman] \\n]; set victims [expr {int(rand()*3+3)}]; set output \"\"; set M M; foreach line $lines { set i 0; while {$i < $victims} { append output $line; incr i; }; append output \\n; }; set i 0; while {$i<$victims} {append M F;incr i}; append output \"interested in \\02$M\\02?\"; return $output; }\n",
  "gaywrap": "{str cols} {string range [wrap $str $cols] 1 end}\n",
  "puaslam": "{{what {}}} {if {$what eq \"\"} {set what [pua_verb]}; . \"[upper [kill_verb] those who [insult_verb] [upper $what]]\"}\n",
  "goonthink": "args {stampthink -s goon [join $args]}\n",
  "gamme": "{} {. \"WELCOME TO TABLE\"}\n",
  "urcurrentwallpaper": "{} {return \"[name]'s current [os] wallpaper: [gis anime wallpaper]\"}\n",
  "unknown:1:cmd/^ask(.+)/": "{match args} {[last $match]back [upper [8ball]]}\n",
  "waspfirstname": "{} {lindex_random $::wasp_names}\n",
  "fancygbs": "{} {fancyair {General Bullshit} [gbs]}\n",
  "jammin": "{} {. [img-jammin]\\n[aud-jammin]}\n",
  "ngaydar": "{{n 5}} { matrix [inject [lrange [shuffle [names]] 0 [expr $n - 1]]  [gaydar:scope] {{scope name} {gaydar:placename $scope $name}}]}\n",
  "mcpu": "{} {return \"-mtune=[lindex_random $::MCPU_dict]\"}\n",
  "poppop": "{who} {return \"  __,_____          __ .`,  .\\n / __.==--\\\"    8===/..\\\\===D POP POP U DEAD, [string toupper [join [name $who]]]\\n/#(-'              \\\\_O/ `.  \\n`-'\"}",
  "buyers_guide": "product {if {[catch {array set products [buyers_guide_data]; array set info $products($product); return \"Last Release: $info(Last Release)\\nDays Since Update: $info(Days Since Update)\\nRecommendation: [bold]$info(Recommendation)[bold]\"} ret] == 1} {error \"must be one of \\\"[join [buyers_guide_products] \"\\\", \\\"\"]\\\"\"} {return $ret}}\n",
  "a+": "{{who radeon}} {join [format $::aplus_lines $who] \\n}\n",
  "mre666": "args {?? $::mre666_dict}\n",
  "butteshack:getsyms": "{{limit 5}} {set ret [getnuniq [expr $limit - 1] butteshack:randsym]; linsert $ret 0 \"@\"}\n",
  "join_subst": "{list seperator} {join [list [car $list] [join [map [cdr $list] {item {. [subst $seperator]$item}}] {}]] {}}\n",
  "dodeca": "{cmd args} {smega \"$cmd $args\" 12}\n",
  "STzubkatz": "{} {join $::zubkatz_lines \"\\n\"}\n",
  "maria": "{{name puÃ±tme} {who dsp}} {each $::maria_lines {l {set name [uplevel {. $name}]; . \"<[name [uplevel {. $who}]]> [subst $l]\"}}}\n",
  "politweet_mccain": "{} {twat REJECTED MCCAIN SLOGANS: [smega mccain_slogan 4]}\n",
  "ceval:get": "{script result_var} {\n  set key [sha1 $script]\n  if [ceval:exists $key] {\n    ceval:load $key\n    uplevel [list set $result_var $data(result)]\n    return 1\n  }\n  return 0\n}\n",
  "wschost": "arg {. http://willstclair.com/img/$arg}\n",
  "nightout": "fart {stampsay -s condom $fart}\n",
  "vladfarted": "{} {set out [lindex_random $::cached_vladfarted]; if {[rand 6] == 0} { catch { set out [regsub \"(f|F)art\" [wget \"http://dmdtech.org/cgi-bin/ghetto.cgi?[chan]\"] \"toot\"] ; lappend ::cached_vladfarted $out} }; return $out}\n",
  "twitterrogate": "who {twat @[interrogate $who]}\n",
  "avatar-say": "{avatar text {orient L}} {set t [wrap $text 30]; magick_scheme [gen-avatar-say-code $avatar $text $orient [~make_speech_balloon [llength [lines $t]]]]}\n",
  "irclog": "{{n 3}} { set ll [lrange [last [log] [+ 1 $n]] 0 [- $n 1]]; join [map $ll {{x} { . \"<[second $x]> [lindex $x 3]\" }}] \\n }\n",
  "gaywithpiss": "{} {. \"Are you GAY? Are you PISSED? Are you GAY WITH PISS?\"}\n",
  "longroll": "{} {. [bold][uchar f6] o[uchar 0308] o: o[uchar 0324] [underline o][underline \"\"] [uchar 0324]o :o [uchar 0308]o}\n",
  "pua_anecdote": "{{glob {}}} {subst [?? [lfilter -nocase *$glob* $::pua_anecdotes]]}\n",
  "puaproblems": "{} {twoproblems [. [pua_verb] [articleize [pua_object]]]}\n",
  "heysam": "{} {. \"<eli> HEY SAM WANT TO COME TO BOYSTOWN WITH ME THERE WILL BE FREE [choose POPPERS {CRYSTAL METH} ECSTASY] AND [string toupper [trannies]]\"}\n",
  "nord_count": "{} {llength [intersect [string tolower [names]] [string  tolower $::nord_count]]}\n",
  "stupidradium": "{} {return \"[random_word] is the only decent [random_word] aside from [random_word], and I don't like it for [random_word] because all of its fancy [random_word] are things an efficient web [random_word] doesn't need anyway (ie, [random_word], [random_word], etc). If I was running a [random_word] though, hey, Postgres all the way.\"}\n",
  "aimnimp": "{{n {}}} {set n [aimname $n];aim -n $n http://$n.on.nimp.org/ <-- wtf is that your site?}\n",
  "train_engine": "{} {?? $::loco_dict}\n",
  "atagged?": "{url tag} {\n  set url [anormalize_tag_url $url]\n  set tag [anormalize_tag_name $tag]\n  if ![info exists ::audio_tagged($tag)] {\n    return 0\n  } else {\n    expr {[lsearch -exact $::audio_tagged($tag) $url] != -1}\n  }\n}\n",
  "dazjw": "args {dazjw $args}\n",
  "press": "{{butan {}}} {if {$butan == \"\"} {. \"Press [next_in_list [seq 0  9]] for [random_word].\"} else {. \"Press [next_in_list [seq 0  9]] for $butan.\"} }\n",
  "aksgeordi": "args {geordrzejsay [niggerize [urbandictionary $args]]}\n",
  "sneak": "{} {goonsay \"i sure do like [niggerlike], but i really hate [niggerdislike].\"}\n",
  "sonic3": "{} {embed [embed [ajoin \"\" [STsonic] [string repeat { } 30] [flip [STsonic]]] [join [map [map [split [wrap [sonic] 30] \\n] {l {. [center $l 50]}}] {s {. \"\\x0f\\002$s\\x0f\"}}] \\n] 30 10] [join [map [split [bt WORDZ OF WiSDOM] \\n] {l {. \"\\x0f$l\\x0f\"}}] \\n] 10 25}\n",
  "flipomgbeednasayreversecern": "{} {vflip [aflip [ajoin \"\" [flip [rain [omgbeegeometry]]] [wrap [join [reverse [lhc]]] 25] \"\\n\\\\\" [rain [omgbeegeometry]]]]}\n",
  "hehe": "{} {return {perl print \"tcl hehe\"}}\n",
  "uname_base": "{} {return \"Linux [regsub -all \" \" [hostname] \".\"] 2.[lindex_random {2 4 6}].[lindex_random [seq 0 45]]-[hyphenize [random_word]][lindex_random [seq 1 5]] #[lindex_random [seq 1 15]] SMP [random_date] [lindex_random $::MCPU_dict] [lindex_random {\"AMD Athlon(tm) XP\" \"Intel(r) Pentium(r) 4 processor\"}] [lindex_random [seq 1 5]].[lindex_random [seq 0 9]]0GHz GNU/Linux\"}\n",
  "terri": "{} {. terri schiavo is so fuqn \u0002\u00034dead\u000f at gooncon}\n",
  "slots": "{} slot_pull\n",
  "nipron": "{} {. [bold][color black on yellow]ãã ã­ã³ãã¼ã«ãéæ°´æºãæ¯æãã[color][bold]}\n",
  "worm": "{} { return \"          __\\n         /..)\\n        / o/\\n       /__/\\n      (__(____\\n     (________)____\\n    (___________)__)==,\" }\n",
  "scale-and-composite-center-gen": "{imgtop imgbottom scale} {\n return \"\n         (let ((img (image $imgtop))\n               (mh (* $scale (height img)))\n               (mw (* $scale (width img)))\n               (img2 (image $imgbottom))\n               (w (width img2)) \n               (h (height img2))\n               (ws (if (> w h) (* (/ mw w) w) (* (/ mh h) w)))\n               (hs (if (> w h) (* (/ mw w) h) (* (/ mh h) h)))\n               (img3 (resize img2 ws hs)))\n               (composite img img3 (/ (- (width img) ws) 2) (/ (- (height img) hs) 2) ))\"\n}\n",
  "chinkamid": "{} {pyramid xia\\ }\n",
  "Winkie4": "{{who Winkie}} {. \"<[name $who]> have you ever [lindex_random $::cat_dict]ed KITTIES? \\002ON WEED!?\";}\n",
  "gj": "{} {bgt good job}\n",
  "speedlines": "{{num 5}} {smega speedline_maybe $num}\n",
  "beef": "{} {. [cwget http://wepump.in/ascii/beef.txt]\\n BEEF}\n",
  "hugeapple": "{} {string map [list \"[color 0 on 0]*\" \"[color] \"] [cdraw [hexbitmap [regsub -all . {0000000000033 0000000000333 0000000000333 000000000333 00000000033 0003333300033333 00333333333333333 08888888888888888 0888888888888888 888888888888888 777777777777777 777777777777777 777777777777777 4444444444444444 44444444444444444 044444444444444444 06666666666666666 00666666666666666 0066666666666666 000aaaaaaaaaaaaa 0000aaa0000aaa} {\\0\\0}]]]}\n",
  "unbraille": "str { string map {â   A â   B â   C â   D â   E â   F â   G â   H â   I â   J â   K â   L â   M â   N â   O â   P â   Q â   R â   S â   T â ¥  U â §  V â º  W â ­  X â ½  Y â µ  Z â ¼  # â ²  .  â   , â ¦  ?  â   ; â   !  â ¦  \" â ´  \" â ¶  [ â ¤  - â   ' â   1 â   2 â   3 â   4 â   5 â   6 â   7 â   8 â   9 â   0} $str }\n",
  "rndtcl_string": "{} {return \"\\\"[pick 1 gbs 1 winamp]\\\"\"}\n",
  "sam3": "{{who {}}} {return \"<sam> fuck off [name $who]\"}\n",
  "dikky_word": "{} {lindex_random $::dikky_word}\n",
  "whostwat": "{{user ev}} { unescape_html_entities [html [lindex [regsub -all {&amp;} [regexp -inline {<description>(.*?)</description>} [http://twitter.com/statuses/user_timeline.xml?screen_name=$user&count=1]] &] 1]] }\n",
  "crw_jihad": "{} {. \"[upper [kill_verb] those who [insult_verb] [crw_word]]\"}\n",
  "radeon28": "{} {return {<@radeon> When I was 8 or 9 years old I gave my brother of 12 a blow job. I dont remember anything but having the penis in front of me. I blanked out, but I know I did it. It really bothers me.}}\n",
  "megagentoouser": "{{who {}}} {subst [join [string repeat {[gentoouser] } 5] \\n]}\n",
  "moviefrot": "{} {string map {{growing up} frotting coping frotting personality frot} [movieplot]}\n",
  "niggername2": "{{who {}}} {join [map [split [name $who] {}] {c {. [regsub {^(.)} [lindex_random [lfilter [subst {[string toupper $c]*}] [choose {$::niggermen} {$::niggerwomen}]]] \"\\002\\\\1\\002\"]}}] \" \"}\n",
  "STbear": "{} { return \"    ()_()    \\n  __('.')__  \\n   (  .  )   \\n   /  _  \\\\   \\n  (__/ \\\\__)  \";}\n",
  "zybl0removie": "{} {. shit proc}\n",
  "neccoize": "str {set ret \"\"; foreach w [split $str] {append ret \"$w \"; switch [rand 16] {0 {append ret \"murr, \"} 1 {append ret \"yiff, \"} 2 {append ret \"muuuurr, \"} 3 {append ret \"aroof, \"} 4 {append ret \"fur, \"}}}; append ret \" BOW WOW!!\"; return $ret}\n",
  "STdeadcat2": "{} {return \"   /\\\\/\\\\\\n  /x.x \\\\\\n  \\\\_^__/\\\\_\\n   | ,    \\\\\\n  (_(_,____|\\n\"}\n",
  "down?": "site {if {$site == \"twitter.com\"} {after 2000; return \"duh, of course it is\"} else {set html [unescape_html_entities [wget http://downforeveryoneorjustme.com/${site}]]; string trimleft [html [strip_html [lindex [regexp -all -inline {<div id=\"container\">(.*?)<p>} $html] 1]]]}}\n",
  "re": "args {if {[llength $args] < 2} {error {you are a dumb fuck}};return \".re:[lindex $args 0] [join [lrange $args 1 end]]\"}\n",
  "dd": "num {. [lindex {DON'T DO} [expr $num % 2]]\\n[format \"http://www.viceland.com/int/dos_donts/%s/main.jpg\" $num]\\n[html [lindex [regexp -all -inline {'top' align='left'>(.*?)</td>} [http://www.viceland.com/int/dd.php?id=$num]] 3]]}\n",
  "botsnack": "args { return \":)\" }\n",
  "englishtown": "{} {return \"[capitalize [string map {\" \" \"\" \"'\" \"\"} [random_word]]][lindex_random $::englishtownsuffices]\"}\n",
  "_aim": "args {array set a [args $args];if {[lsearch [array names a] n] > -1} {set n $a(n)} {set n [aimname]};return \".aim $n [join $a(args)]\"}\n",
  "girlmecha": "{} {embed [whale] [STgoon] 15 7}\n",
  "hex": "str {map1 [map1 [split $str {}] hexc] {format %02x}}\n",
  "STbook": "{} {return \"  /-/|\\n /_/ |\\n | |/|\\n |^| |\\n |_|/ \"}\n",
  "slot_credit": "{who amount} {set who [normalize_nick $who]; incr ::slot_stats(earned,$who) $amount}\n",
  "k-hate2": "{} {return \"< k-hate> [fuckword] i love cake\"}\n",
  "unknown:2:cmd/(.+)log$/": "{matches args} {log_for [last $matches]}\n",
  "theobamadeception": "args {return \"\u0002The Obama Deception is a hard-hitting film that completely destroys the myth that Barack Obama is working for the best interests of the American people.  Watch the Obama Deception and learn how international bankers purposefully engineered the worldwide financial meltdown to bankrupt the nations of the planet and bring in World Government.\\nFind out more at \u000312http://theobamadeception.net\"}\n",
  "timeline": "{{arg eli}} {img-timeline $arg}\n",
  "STfattyfathead": "{} {fathead 10}\n",
  "getpump": "ascii {wget http://www.wepump.in/ascii/$ascii}\n",
  "aiminsulting": "args {aim -n [aimname $args] [strip_newlines2 [smega {choose [ethnic_group] [faglame] [sex_fluid] [random_word] [sexpart] [crw_word] [drug_word] [disease_word] [nazispook]}]]}\n",
  "ultimo_nslookup": "addr { set results []; parse_html [http post \"http://www.ultimo.to/kisin/others/ns.cgi\" \"action=nslookup&host=$addr\"]parse_ultimo_nslookup; print [string map {\"&gt;\" \">\"} [lindex $results 2]]; }\n",
  "todo:del": "{idx {who {[nick]}}} {set who [name [subst $who]]; if [array exists ::todo{$who}] { array set ::todo{$who} [list $who [concat [lrange [last [array get ::todo{$who}]] 0 [expr $idx - 2]] [lrange [last [array get ::todo{$who}]] $idx end]]]}}\n",
  "pipebomb": "{} {return \"I don't want to give the impression that [goon_word] is important or even popular, but I think that with time and a little [strip_u [fetish_porn]], it could be a nice resource for forum members to turn to.\"}\n",
  "aimlegs": "{} {aim You should have respect for [name] because he lost his legs sucking dick in a bathouse. :mad: [rands]}\n",
  "lastfm:cached_gsplitHTML": "{} {regexp -all  -inline {<div class=\"userContainer\">.*?</div>.*?</div>} [cwget http://www.last.fm/group/BUTTES/members]}\n",
  "loveuser": "{{who {}}} {if {$who eq \"\"} {set who [lindex_random [names]]}; return \"<$who> Ever since I started using love-sources, I've seen a noticable increase in the [shakti_word], [shakti_word], and [shakti_word] of my kernels.\"}\n",
  "unknown:1:cmd/^more(.+)\\?$/": "args {wet yes}\n",
  "fruit": "{} {uchar f8ff}\n",
  "aimthread": "args {aim -n [aimname [join $args]] \"Can you post in my thread \\\"[sa_thread_link [lindex_random [sa_thread_ids 46]]]\\\"?  I need someone to back me up about how much [political_word]s and [ethnic_group] suck.\"}\n",
  "host": "hostname {~http://nonexiste.net/host.php?[? host $hostname]}\n",
  "nimplink": "args {return \"<a href=\\\"[nimpify $args]\\\">$args</a>\"}\n",
  "echelon": "{} {repeat 30 {subst [echelon_word]}}\n",
  "reflect3": "{args} {let {text {join [list [ajoin \"\" \" \" [bgr 7 $text]] [let {lines {join [list \" [lindex $lines 0]\" \"[lindex $lines 1]\" \" [lindex $lines 2]\" \"  [lindex $lines 3]\" \" [lindex $lines 4]\"] \\n}} [split [vflip [bgr 11 $text]] \\n]]] \\n}} [join $args]}",
  "permute": "string {join [map [knuth_shuffle_permute [string length $string]] [&  string index $string]] {}}\n",
  "masters": "{} { set o {}; foreach {k} [array names ::mastermind_stats] { lappend o \"$k has [master_rank $k] pts\"; }; return [join $o \", \"]; }\n",
  "columnize": "{list {width 72}} {\n  set max  [maxstringlength $list]\n  set cols [expr ($width + 2) / ($max + 2)]\n  set rows [set row [list]]\n\n  foreach element $list {\n    lappend row $element\n    if {[llength $row] >= $cols} {\n      lappend rows $row\n      set row [list]\n    }\n  }\n  if [llength $row] {lappend rows $row}\n  \n  join [map $rows {row {\n    string trimright [drawrow $row [times $cols $max]]\n  }}] \\n\n}\n",
  "fmlbuddies": "{} {eval [string map {onehug fml} [info body buddies]]}\n",
  "STrandrzej": "{} {embed [embed [embed [STpolehead] [?? $::andrzej_eyes] 5 2] [?? $::andrzej_nose] 7 3] [?? $::andrzej_mouth] 7 4}\n",
  "yes": "{} {. tcl hello}\n",
  "managementreason": "{} {return [subst \"We should [lindex_random {deploy implement provide}] [goon_word] because it'll increase the [shakti_word] of our services\"]}\n",
  "unknown:nick/gnol/": "args {return \"Shut the fuck up gnol\"}\n",
  "golem": "{} {return \"[choose [matter] [sex_fluid]] golem\"}\n",
  "d&d": "{} {goonsay \"I, for one, disagree with [hotbutton]\"}\n",
  "uglydongswastika": "{} { set n [rand 4]; swastika [ajoin \"\" [ncock $n] [vflip [ncock $n]]] }\n",
  "niggerjoke": "{} {return \"Q: What did the [unplural [ethnic_group]] say to the [faglame]?  A: \\\"[niggerphrase]\\\"\"}\n",
  "richardson": "{} {return \"[bold]I WAS GOVERNOR OF THE STATE OF [string toupper [lindex_random $::states]]\"}\n",
  "STabezexp": "{} {embed [embed [embed [STabezface] [twobyeightmouth] 8  7] [?? $::abezeyes] 6 5] [?? $::abeznoses] 9 6}\n",
  "master_won_print": "{i a b c d} { return \"Good job $i the combo was [master_num $a $b $c $d] in [master_score_get $i] moves\"; }\n",
  "jblake?": "{} blaketomate\n",
  "lisp_slam": "{} {fancyair LISP [?? $::lisp_dict]}\n",
  "amren": "{} {unescape_html_entities [lindex_random_ne [regexp -all -inline {<description>(.*?)</description>} [cwget http://www.amren.com/mtnews/index.xml]]]}\n",
  "qwantz_tube": "tube {qwantz [lrange [lreverse [youtube_comments $tube]] 0 10]}\n",
  "palin_israel": "{} {. Israel is a stinking corpse and  should be wiped off the face of the earth http://www.youtube.com/watch?v=5Fa09zEyB2Q}\n",
  "messages": "{} {. \"You have no messages.\"}\n",
  "ethnic_cleansing_verb": "{} {lindex_random $::ethnic_cleansing_dict}\n",
  "roggles": "size {set kalle \"\"; for {set i 1} {$i<=$size} {incr i} {append kalle \"Kalle loves dick\\n\"}; return \"$kalle\"}\n",
  "dongsvolution": "{} { ajoin \" \" \"[nomg 1]\\nEvolution\\nOf\\nMang\" [dickroulettechoosen [name] 1] [dickroulettechoosen [name] 2] [dickroulettechoosen [name] 3] [dickroulettechoosen [name] 4] [dickroulettechoosen [name] 5] }\n",
  "dts": "{} {bt dts}\n",
  "fip": "str {find_in_procs $str}\n",
  "rss_data_get": "{rssfeed {interval 3600}} { http://feeds.churchturing.org/dynamic/dynamic.php?z&interval=$interval&url=[urlencode $rssfeed] }\n",
  "aimlump": "{{n {}}} {set n [aimname $n];aim -n $n [lump $n]}\n",
  "fursona": "{{fag {}}} {set butt [name $fag]; return \"-- WhatIsZ Extended V1.0.0.1 WF ------------------------------\\[ Focused View \\]\\n[ajoin \"\" \"$butt\" [join [repeat [expr 15-[string length $butt]] \" \"]] [wrap [ajoin \"\" [join [uniq [repeat [rand 1 15] wi_flag]] \" \"] \" [gender] [animal]\"] 60]]\\n---------------------------------------------------------#buttes edition#-----\"}\n",
  "moiracam2": "{} {return \"                        _.,_\\n                     ,-'.' .`-,\\n                    ;; '. ' `. ;` - _\\n    *            _,-; ' ; `.  ,% .-,  -\\n          ,_.,-'`   ';; ; : ;%'  | |   \\\\\\n_  _._,-`'\\\\            `'-`'  _.,' `.   )\\n,`'  ,._,.-`-., _.,-.--.-,`''`  |  _|   |__\\n//\\\\ /  .-,     `-`-^--`'^`-...,,| | |.,/\"}\n",
  "microsoft_programmer_email_address": "{} {. [string tolower [indianname]][choose \"\" [rand 1 99]]@[microsoft_domain]}\n",
  "poem": "{} keepitreal\n",
  "kalledisease": "{} {return \"<@Kalle> I kicked myself in the [sexpart] and it won't stop bleeding, so now I am afraid I have [disease]\"}\n",
  "coin": "{} {if {int(rand()*2) eq 1} {return \"tails\"} {return \"heads\"}}\n",
  "putserv": "{text {options {}}} {\r\n\t# N.B.\tThis silently breaks {PRIVMSG,NOTICE}ing multiple\r\n\t#\t[channel] targets (who fucking cares.)\r\n\tregexp -nocase {^(privmsg|notice) ([^ ]+) :?(.+)$} ${text} {} m c t;\r\n\tcatch \"channel get ${c} {FiSHkey}\" key;\r\n\r\n\tif {[string length ${key}]} {\r\n\t\tset text \"${m} ${c} :+OK [encrypt ${key} ${t}]\";\r\n\t};\r\n\r\n\tegg:putserv ${text};\r\n}\n",
  "cmpdongs": "{} { return \"[biggaybowtext \"8======D\"] vs. 8=D\"}\n",
  "al_niggerbot": "{} {. Albot: [subst [lindex_random $::al_nig]]}\n",
  "cialis2": "str {subst [regsub -all -nocase {\\m\\w*[il]\\w*\\M} [escape $str] {[cialis \"\\0\"]}]}\n",
  "unknown:1:cmd/^(..)trip$/": "{matches cmd args} {roundtrip [join $args] [lindex $matches 1]}\n",
  "morebeer?": "{} {wet for sure}\n",
  "ctwat": "args {twat [join $args] #current}\n",
  "acolorexp": "{a b} { aflip [join [mapx [lines [ajoin \"XXXXXXXXXXXXXXXX\" \"\\n\\n\\n\\n\\n\\n\" \"\"]]  line {join [mapx [split $line {}] char {. [color [next_in_list $a] on [next_in_list $b]]$char}] {}}] \\n] }\n",
  "xyzzy": "{} {return \"party at necco's house\"}\n",
  "wsc_cat": "{} {. \"This just in: SARAH IS [bold][string toupper [??  $::cat_dict]].[bold] More at [?? [seq 5 11]].\" }\n",
  "delgate": "args {. [car [info level 1]]:[car $args] [cdr $args] }\n",
  "march_17": "{} {ajoin \"\" [vflip [STass]]\\n[STass] [flip [vflip [STass]]\\n[STass]] \"\\n\\n\\n\\n  \u00039HAPPY ST.\\n\u00039PATRICK'S DAY   \" \\n\\n\\n[bgbt by egg]}\n",
  "stagename": "{} { . \"[waspfirstname] \\\"[random_word]\\\" [choose [alshort] [waspsurname]]\" }\n",
  "onebutan_topic": "{} {pick 10 {lindex_random $::onebutan_topic} 1 gay_word}\n",
  "python": "args {if {$args == \"\"} {set args [random_word]}; . __[string toupper [underscoreize [join $args]]]__}\n",
  "smokin_sam": "args {. \"<sam> god i could really use some [weed] right about now\" }\n",
  "flipmode": "{} {join [adjacent_join [list [nsplit [vflip [bgr [rrand_color] FLIP]]] [nsplit [bgr [rrand_color] MODE]]]] \\n}\n",
  "goonresumemain": "{} {. \\\\begin\\{center\\}\\\\section*\\{[waspfullname]\\}\\\\\\\\[microsoft_prog]\\\\end\\{center\\} \\\\section*\\{[saq_skill]\\} [resumeline]\\\\\\\\[resumeline]\\\\\\\\[resumeline] \\\\section*\\{[saq_skill]\\} [resumeline]\\\\\\\\[resumeline]\\\\\\\\[resumeline] \\\\section*\\{Certifications\\} [cert]\\\\\\\\[cert]\\\\\\\\[cert]}\n",
  "STboat": "{} { return \"      4      \\n     /|\\\\     \\n    / | \\\\    \\n  _<__!__>_  \\n  \\\\_______/  \";}\n",
  "reefer": "{} {. [img-420] [aud-420]}\n",
  "rbl_time_seconds": "{} {expr {[clock seconds]-int(rand()*([clock seconds]-1086105600))}}\n",
  "v:push:box": "{n m h c t} { global lastpush if {[expr [v%rand 50] % 5] == 0} { set lp [lindex [array get {lastpush} ${n}] 1] if {![string length ${lp}] || [clock seconds] > [expr ${lp} + [v%rand 50 15]]} { putserv \"PRIVMSG ${c} :\\001ACTION puts ${n} in a box\\001\" array set {lastpush} [list ${n} [clock seconds]] }}; return 1}\n",
  "buttes_cat_or_other": "{{cat {}}} {if {$cat eq \"\"} {return [?? $::buttes_cat_dict]} {return $cat}}\n",
  "varpub": "{} {publish [. [string map {\" \" \"\\n\"} [find_in_vars \"\\{\"]]]}\n",
  "reg": "{} { return \"since you cannot be bothered to register your nick, I wonder how hard you will work at being useful\" }\n",
  "wi_flag": "{} {?? $::wi_flag_dict}\n",
  "edwardsfeld": "{} {. \"<[name]> and what's the deal with [choose mills {two americas}]?\"}\n",
  "tai2": "{{who {}}} {thinkaboutit2 $who}\n",
  "shaniqua_ddos_exploit": "{} {return [gudrize \"HEY [upper [nick]] TRIED TO KILL ME\"]}\n",
  "buttes_totem": "{} { ajoin \" \" \"     \" [aflip [randart 6]] \"\\n\\n\\n\\n Buttes Totem of [butte_word]\" }\n",
  "keepitreal": "{} {return \"THERE ONCE WAS A WIGGER NAMED MARK / WHO ROLLED IN HIS SHIT TO LOOK DARK / HE BOASTED FOR SHOW / ABOUT SHOVELING SNOW / AND MADE LOTS OF STUPID REMARKS\\nHE GOT BANNED FROM SA / SO HE THEN CAME TO SASS / NO ONE REALLY LIKED HIM / HE SMELLED LIKE MY ASS\\nSTILL EVERYONE HATES HIM / AS YOU CAN TELL BY MY THREAD / IF THERE WAS A GOD / POOPY MARK WOULD BE DEAD\"}\n",
  "twitterdown": "{} { string toupper [lindex [regexp -inline -line \"(When Twitter\\[^<\\]*)\" [cwget http://whentwitterisdown.com]] 1] }\n",
  "resolve": "url {while {[set location [location $url]] ne $url} {set url $location}; return $url}\n",
  "cachd_obama": "{} { return \"Barack Obama beats white women\"}\n",
  "scar_drudge_for_life": "{} {set wmds [macro slash]; quiet_drudge $wmds}\n",
  "butteshack:randsym": "{} {lindex_random [butteshack:allsyms]}\n",
  "blakediapersay": "args {magick annotate [img-blake 5] 18 230 60 white [wrap [join $args] 20]}\n",
  "linux_audiophile": "{} {goonsay \"For as long as I've been experimenting in Linux, I've noticed that music sounds remarkably better in it than in Windows. It's clearer, has more [shakti_adj] sound on all frequencies, is more [shakti_adj], and just sounds better through [?? $::linux_sound]. I notice [shakti_word] in the music that I don't notice in Windows.\"}\n",
  "fatdraw": "bitmap {join [map $bitmap {line {fullwidth_with_formatting [join [map [split $line {}] {char {if $char {invert \"  \"} {. \"  \"}}}] \"\"]}}] \\n}\n",
  "usenet": "{} {return \"[choose \"rec.arts\" \"news.admin\" \"alt\" \"alt\" \"alt\" \"alt\"].[choose binaries fan sex].[string map {\" \" \"-\"} [ethnic_group]].[string map {\" \" \"-\"} [adjective]]\"}\n",
  "array_lappend": "{arrayname key vals} { set l [array_get_default ::${arrayname} $key {}]; lappend l $vals; set ::${arrayname}($key) $l }\n",
  "color_box": "{colors art} { ajoin \"[bold][color [first $colors] [last $colors]]\" \"\" \"[strip_color $art]\"}\n",
  "rot:V": "{} { return $::rotV; }\n",
  "STbomb": "{} {return \"      ,--.!,\\n   __/   -*-\\n ,d08b.  '|`\\n 0088MM     \\n `9MMP'     \"}\n",
  "morse": "args {string map {- _} [string map $::morsecodemap [join [split [string map {{ } {/}} [string tolower [join $args]]] {}] { }]]}\n",
  "meatloop": "{} {. frot\\ntcl2 meatloop}\n",
  "alt_suicide": "{} {. \"On [day] [daypart], I will [choose \"kill myself with [suicide]\" \"[suicide2]\"], I have nothing else to live for, [choose \"[celebrity]\" \"[political_figure]\"] has [betray] me, [lastwords]\"}\n",
  "cakefart": "{} {cakesay [cakefart_quote]}\n",
  "revision": "revision {lindex [history $revision] 0}\n",
  "nname": "{{who {}}} {or $who [nick]}\n",
  "saychina": "args {set wstring [join [times [expr [string length $args]+6] {}]];  return \"[color yellow on red]$args     \\n[color red on red]$wstring\\n[color red on red]$wstring\"}\n",
  "randhex": "{{length 32}} {join [mapx [seq 1 $length] x {format %x [rand 16]}] {}}\n",
  "kanye": "{} { kanyelyrics }\n",
  "glob_to_regexp": "{glob {nocase 0}} {\n  set regexp \"\"\n  set escaping 0\n  set chars 0\n  foreach char [split $glob {}] {\n    if $escaping {\n      if {$char eq \"*\" || $char eq \"?\" || $char eq \"\\\\\"} {\n        incr chars\n        append regexp \\\\$char\n      }\n      set escaping 0\n    } else {\n      if {$char eq \"*\"} {\n        append regexp .*\n      } elseif {$char eq \"?\"} {\n        append regexp .\n      } else {\n        if {$char eq \"\\\\\"} {\n          set escaping 1\n        } else {\n          incr chars\n          append regexp [escape_regexp $char]\n        }\n      }\n    }\n  }\n  return [expr {$nocase && $chars ? \"(?i)\" : \"\"}]^${regexp}$\n}\n",
  "arabvented": "{{i {}} {who arab}} {return \"<[name $who]> I remember when I invented [random_word $i], way back in [regsub -all {(\\d\\d)0(\\d)} [rand 1900 2008] {\\1-aught-\\2}]\"}\n",
  "image-pistol-left": "img { magick-scale-composite-bottom-left $img http://assets.buttes.org/magick/b27009e53cd657bdbda9c3231d019769.gif 0.8 }\n",
  "arabnews2": "{} {return \"[muslimname], the now [rand 20]-year-old victim, was sentenced last year to [rand 200] [violent_act]s for complicity in [crime].\"}\n",
  "encwgt": "args {set k [split [bgt $args] \\n]; join [lreplace $k 1 1 [lindex $k 1]] \\n}\n",
  "notaim": "args {\n if {[lrange $args 0 0] eq \"-n\"} {\n  set nick [lrange $args 1 1]\n  set what [join [lrange $args 2 end]]\n } elseif {[lrange $args 0 0] eq \"-d\"} {\n  set nick [rand_aim [join [list [lrange $args 1 1] \"_aim_dict\"] \"\"]]\n  set what [join [lrange $args 2 end]]\n } else {\n  set nick [rand_aim]\n  set what [join $args]\n }\n set ret [list]\n foreach dong [split $what \\n] {\n  lappend ret \".aim:not $nick $dong\"\n }\n join $ret \\n\n}\n",
  "unknown": "{args} {\nif [llength [set handler [unknown:handler_for {*}$args]]] {\n  [lindex $handler 0] [lindex $handler 1] {*}$args\n} else {error \"invalid command name \\\"[lindex $args 0]\\\"\"} \n}",
  "fixbazooka2": "{} {eval \"proc bazooka \\{\\}  \\{return \\\"\\\\ __________________________ ______________\\n-|_________________________________|                = = - -|==== _______ >\\n                              / /  _ |       / /\\n\\n/            /_//_/           nigga where my bazooka be at\\\"\\}\"}\n",
  "hod.app": "args { fastmyster }\n",
  "zybl0recan": "{} { return \"[CANADA \"\u000301,01[rainbow [zybl0re]]\"]\" }\n",
  "niggamide": "{} {join {flip[pyramid nigger]} {pyramid nigger}}\n",
  "jamesbondjr": "{} {. http://cdn-www.cracked.com/articleimages/randall/spies/bondjr.jpg [aud-junior]}\n",
  "vordink": "{} {join [list {a} {b}] \\n}\n",
  "gaystripe": "{} {return \"\u0003[gay],[gay]**\\n\u0003[gay],[gay]**\\n\u0003[gay],[gay]**\\n\u0003[gay],[gay]**\\n\u0003[gay],[gay]**\"}\n",
  "anormalize_tag_url": "url { normalize_tag_url $url }\n",
  "unknown:2:cmd/(.+)back$/": "{matches args} {set what [last $matches]; magick annotate [?? $::cutbackpix($what)] 12 77 13 black [join [lrange [split [wrap [join [cdr [strip_all $args]] \" \"] 20] \"\\n\"] 0 4] \"\\n\"] Chicago.ttf}\n",
  "point": "{{name {}}} {. [choose \"game set\"  \"point goes to\"] [first_true $name [nick]]}\n",
  "sayiran": "args {set wstring [join [times [expr [string length $args]+7] {}]];  return \"[color green on green]$wstring\\n[color red on white]   $args   \\n[color red on red]$wstring\"}\n",
  "developer_info": "{} {return \"ahhah haha too0o0o0oooo0o0o00oo0oo0o0ooott jenk berp reek\"}\n",
  "mlad": "{} {. [laugh] [toot] [?? {JENKED {}}]}\n",
  "pua_location": "{} {subst [?? $::pua_locations]}\n",
  "w_topic": "{} {?? $::w_topic}\n",
  "jonnii": "{} {biggaytext \"shut up\"}\n",
  "loop": "{} loop\n",
  "realwrap:len": "tokenlist {string length [join $tokenlist \" \"]}\n",
  "catbusdcc_crw": "{} {return \"Will you accept \\\"!!!c@tbus[string tolower [element_word]]_[string map {\" \" \"_\"} [crw_word]]_vids--[kazaa]\\\" from user Catbus?\"}\n",
  "phile": "{} {return \"[lindex_random $::pervprefix]phile\"}\n",
  "eval_or": "args {set v {}; foreach x $args { set v [uplevel 1 $x]; if {$v!=0 && $v!=\"\" && $v!={}} { return $v }}; return $v}\n",
  "omgchair": "{} { join $::rightomgchair \\n }\n",
  "doesn't": "args {. [nick]: no YOU don't $args}\n",
  "egg": "{{what {}}} {if {$what eq \"\"} {set what [lindex_random [info procs ST*]]} {set what ST$what}; set stamp [eval $what]; set linecount [llength [split $stamp \\n]]; ajoin \"\u000f \" $stamp \"[string repeat \\n [expr {$linecount-1}]][rainbow BY EGG]\"}\n",
  "gist": "id {rload \"http://gist.github.com/$id.txt\"}\n",
  "tinydancer": "{} {return \"hold me closer, [size_word] [word {^[a-z].*?(?:cer)$}], count the [word {^[a-z].*?(?:ights)$}] on the [word {^[a-z].*?(?:way)$}]; lay me down in [word {^[a-z].*?(?:eet)$}]s of [word {^[a-z].*?(?:in)$}], you've had a [word {^[a-z].*?(?:sy)$}] day today!\"}\n",
  "radeon18": "{} {return {<@radeon> lol guys scheissegern has a SA account\n<@radeon> \"tehdely\"}}\n",
  "screamonorge": "{{who {}}} {if {$who eq \"\"} {set who \"reshxed\"}; return \"<@$who> [upper [norway [strip_newlines [cached_onehug]]]]\"}\n",
  "vxp": "{} {alert vxp [ajoin \" \" \"VXP REPORTED TO HOMELAND SECURITY - HAVE A NICE DAY - VXP REPORTED TO HOMELAND SECURITY - HAVE A NICE DAY\" [spook]]}\n",
  "celebdeath": "{} {. [actor] was confirmed dead today in a freak [random_word] accident.}\n",
  "translate": "{source_language destination_language args} {set text [join $args]; unescape_html_entities [last [regexp -inline {<textarea .*id=suggestion>(.*?)</textarea>} [http post http://translate.google.com/translate_t sl $source_language tl $destination_language text $text]]]}\n",
  "acrolist": "{{c {}}} {if {$c eq \"\"} {array names ::acronym} {set o \"\";foreach l $::acronym($c) {append o \"$l\\n\"};return $o}}\n",
  "zulufullname": "{} {return \"[zuluname] [zuluname]\"}\n",
  "cox": "{} {return \"After 2.6.9-ac its clear that the long 2.6.9 process worked very badly. While 2.6.10 is looking much better its long period meant the allegedly \\\"official\\\" base kernel was a complete pile of [fetish_porn] for months. That doesn't hurt most vendor users but it does hurt those trying to do stuff on the base kernels very badly.\"}\n",
  "randmeasure12": "{{who {}}} {return \"http://[lindex_random $::nicklist].on.nimp.org/[choose \"~[name $who]\" download \"download/~[name $who]\"]/[choose [virusfile] [virusfile2] ]/u?=[butte_word]\"}\n",
  "abezcaps": "{} { return \"Well the problem is that your UNDERGRAD mind can't handle the truth!\"}\n",
  "big_red_mills": "{} {. \"[color white on red] MILLS  MILLS  MILLS MILLS MILLS \"}\n",
  "chutwig": "{} {return \"<@chutwig> It's [strip_u [fetish_porn]] o'clock and I'm buying!\"}\n",
  "peeinto": "{{args {}}} {pee_into $args}\n",
  "mobfm": "{} {lastfm:lastfm unicornmob}\n",
  "ajoin2": "args { set b [lindex $args 0]; set args [lrange $args 1 [llength $args]]; set o \"\"; set nlines [maxlines $args]; set newline \"\"; set nl \"\"; foreach j $args { lappend nl [addspaces $nlines $j]; }; for {set i 0} { $i < $nlines } { incr i } { append o $newline; set d \"\"; foreach k $nl { append o \"$d[lindex [split $k \"\\n\"] $i]\"; set d $b; }; set newline \"\\n\"; }; return $o; }\n",
  "tagged?": "{url tag} {\n  set url [normalize_tag_url $url]\n  set tag [normalize_tag_name $tag]\n\n  if ![info exists ::images_tagged($tag)] {\n    return 0\n  } else {\n    expr {[lsearch -exact $::images_tagged($tag) $url] != -1}\n  }\n}\n",
  "color": "args {if ![llength $args] {return \u0003};if {[lindex $args 0] eq \"default\"} {return \u0003};set ret \u0003[color_of [lindex $args 0]]; if {[llength $args] > 1} {if {[lindex $args 1] eq \"on\"} {append ret ,[color_of [lindex $args 2]]} {append ret ,[color_of [lindex $args 1]]}}; return $ret}\n",
  "bubble_top": "str {return [bubble_worker $str \" _  \"]\\n[bubble_worker $str \"/ \\\\ \"]}\n",
  "rocketcock": "{} {ajoin \"\" \"\\n[speedline 5]\\n\\n[speedline 4]\\n\\n[speedline 3]\" [ncock 3]}\n",
  "shuffle": "args {lsort -command shuffle_helper [join $args]}\n",
  "bt": "args {set str [join $args]; bigtext $str}\n",
  "seamonster": "{{args {}}} { return \"[name $args]: your mother is a sea monster\" }\n",
  "aimacro": "args { set n [aimname $args];aim -n $n [randacro $n]}\n",
  "blakejanitor": "{} janitor\n",
  "unknown:1:cmd/(.+)[_-]twat$/": "{matches args} {set n [last $matches]; if [info exists ::twatmap($n)] {set twat $::twatmap($n)} else {set twat $n}; lasttwat $twat}\n",
  "tia": "{} {lol \"thanks in advance\"}\n",
  "innerfml": "{{id random}} {regsub -all {^(?:Today,? )(.*)(?:[.?!])(\"?)(?: FML)$} [fml $id] {\\1\\2}}\n",
  "giuliani_flag": "{} {join [adjacent_join [list [nsplit [big911]] [nsplit [bt 9/11]]]] \"\\n\"}\n",
  "sonic": "{} {. [img-sonic] [aud-sonic]}\n",
  "swede_sentence": "{} {return \"[join [mapx [seq 1 5] x {pick 1 swede_act 1 swede_word}] \" \"] [swede_word]\"}\n",
  "aol": "{} internetacro\n",
  "worstbuy": "{} {return \"MORE LIKE GAYDEON AM I RITEty good job for me   because im in high school  and 8.00/hr in HS hey man stop making fun worst buy worst buy worst buy LOL RADEON IS A FAT FAGGOT WHO WORKS RETAIL\"}\n",
  "perl": "{} {return \"my \\$[underscore [random_word]] = s/[phpize [smile]]/[phpize [smile]]/m;\"}\n",
  "dobernala": "{} {return \"~8< I R DOBERNALA GEEKLORD [choose \"TERD\" \"TOOT\"] ON MY HUNNIES THEY HEART THIS! *L*\"}\n",
  "appease-sam": "{} {c3 women are whores}\n",
  "game": "{} {lindex_random $::games}\n",
  "drank": "{} {. [lrange [string map {invented drank} [invented [articleize [drink]]]] 0 end-2] [rand 2 30] minutes ago}\n",
  "randmeasure7": "{{who {}}} {return \"http://[singlerandomword].on.nimp.org/~[name $who]/[virusfile]\"}\n",
  "reading": "{{who {}}} {. \"<[name $who]> I just started reading [gaybook] because I heard it got [string map {\"--\" \"from\"} [review]]\"}\n",
  "gmo": "{} {flip [omg]}\n",
  "goon_food": "{} {choose [?? $::goon_liquidfood] [?? $::goon_solidfood]}\n",
  "hellotroll": "args {if {$args eq \"yes\"} {return \"HAHA YHBT HAND\"}; if {$args eq \"no\"} {return \"HAHA YHBT HAND\"} else {return \"Welcome to the HelloTroll bot v0.1b!  I feel that [political_word]s are better than [deity], [political_figure] is a [demon], and that you hate [country].  Do you agree?  Type \\\"tcl hellotroll yes\\\" or \\\"tcl hellotroll no\\\" to let me know!\"};}\n",
  "nethack": "{{syms {}} {limit 5}} {set syms [default $syms [butteshack:getsyms $limit]]; set w [?? [seq 5 10]]; set h [?? [seq 4 6]]; set pos [getnuniq $limit \"randxycoord [expr $w - 1] [expr $h - 1] 2 2\"]; set map [nethackbox $w $h]; for {set i 0} {$i < $limit} {incr i} {set map [embed $map [lindex $syms $i] [lindex [lindex $pos $i] 0] [lindex [lindex $pos $i] 1]]}; . $map}\n",
  "rotwt": "{twat {a {}}} {lindex [http post $::churl twat $twat nick [nick] acct $a c [channel]] 2 }\n",
  "walmart": "{} {return \"Wal-Mart has everything I need. No diggity.\"}\n",
  "lumps": "{} { subst [lindex_random $::lumps] }\n",
  "gnaa": "{} {. \"Are you GAY?  Are you a NIGGER?  Are you a GAY NIGGER?\\n \\n \" [gooniggersay [crw]]}\n",
  "halfdavid": "{} {return \"\u001f  /\u001f\\n\\\\/ \\n\u001f/\\\\ \u001f\\n  \\\\\"}\n",
  "NIGGERDEATH": "{} {return \"[bt niggerdeath]\"}\n",
  "maybe_measure": "{} {choose \"\" \"([rand 150].[rand 10] [choose Hg hPa F C in KT deg rad k])\"}\n",
  "blackfullname": "{} {return \"[capitalize [blackname]] [lindex_random {Jones X}]\"}\n",
  "blackjack_score_hand": "hand { set aces 0; set count 0; foreach {i} $hand { set num [lindex [split $i .] 1]; if [expr {$num == \"J\"} || {$num == \"K\"} || {$num == \"Q\"}] { set count [expr $count + 10];  } else { if { $num == \"A\"} { incr count; incr aces; } else { set count [expr $count - 1 + 1 + $num]; }; }; }; return [blackjack_ace_calc $count $aces]; }\n",
  "Zaphod": "{} {return \"My name is Zaphod, and I make pizzas with ham, pepperoni, mushrooms, olives, onions, and linguica for whiny faggots and their annoying, crying, won't-shut-the-fuck-up crotchrats.\"}\n",
  "slot_stats_earned": "who {if ![info exists ::slot_stats(earned,$who)] {set ::slot_stats(earned,$who) 0}; return $::slot_stats(earned,$who)}\n",
  "jailbait": "{{nick {}}} { return \"[bold][color fuchsia]^_^[color green] <[+ 15 [rand 3]]f[girlword]> HI [string toupper [name $nick]]!!! I DREAM OF YOU [string toupper [sex_act]] MY [choose UNSHAVEN HAIRY TRIMMED WAXED UNKEMPT BRAZILLIAN FLOWERY TIGHT LOOSE \"WELL-FUCKED\" FRIENDLY] [string toupper [lindex_random $::woman_parts]]! [string toupper [fuckword]] ME NOW. [color fuchsia]^_^\"}\n",
  "aimalbot": "args { aim -n [aimname $args] [albot] }\n",
  "init-text": "{} {return \"[format \"% -50s\" \"[capitalize [act_word]]ing [random_word]...\"] \\[[pick 4 {. \\0039\\ \\ OK\\ \\ \\003} 2 {. \\0034FAILED\\003} 1 {. \\0037PASSED\\003}]\\]\"}\n",
  "al_insult": "{} {return \"You are a goddam [al_man_word][al_hat_word]\"}\n",
  "ask": "args {stampsay -s geordrzej [urbandictionary $args]}\n",
  "andrzej_new_gf": "args {. http://willstclair.com/img/ansarah.jpg}\n",
  "siren": "{} { . \"[b][u]/!\\\\[u][b]\" }\n",
  "addgoon": "str {lappend ::goon_dict $str; return \"\"}\n",
  "c": "{str1 str2} {bgc [rrand_color] [rrand_color] $str1 $str2}\n",
  "saq6": "{} {saqsay this is the temple of the order of the saq basically anything that anyone of the order feels they should share will end up on here in some way enjoy}\n",
  "blackjack_dealt": "{} { if {[llength [blackjack_get_player dealer]]>0} { return 1; } else { return 0;} }\n",
  "image-bbw": "url {magick-scale-composite-bottom-left $url http\\://xs135.xs.to/xs135/09030/n733843548_1308162_9930637.png 1.0}\n",
  "cocoa": "{} {. \\[\\[\\[NS[CamelCase [random_word]] alloc\\] initWith[CamelCase [random_word]]:@\\\"[string tolower [random_word]]\\\"\\] [camelCase [random_word]]\\]\\;}\n",
  "swallow": "args return\n",
  "dildo": "{} { return \"turds\" }\n",
  "swingler_deal": "{{who {}} {rate 50}} {. \"<[name $who]> i'd pay \\$$rate/month for swingler never to mention [swingler_word] in [channel] again\"}\n",
  "sewer_horse": "{} { return \"http://www.heyokay.com/wp-content/images/Sewer%20Horse.jpg\\nhttp://www.sarahjessicaparkerlookslikeahorse.com/\" }\n",
  "koran4christ": "{} { smega { aim -d christian [koran] } }\n",
  "bnp": "{} {return \"[bold][eval color [next_in_list {{white on blue} {blue} {red}}]]VOTE BNP\"}\n",
  "mycond": "{} {string map {\"Conditions: \" {}} [grep Cond [myw]]}\n",
  "cakefart_quote": "{} {. [?? $::fart_lines]}\n",
  "image-avatar-background-say": "{avatar background text} { magick-scale-composite-bottom-left [or $background [cadr [randtag]]] [avatar-say $avatar [or $text [ono]]] 0.9 }\n",
  "eam": "{} {return \"local [choose [marginalize] [faglame] [niggerword]] eam approves of the much-hated [undesirables]\"}\n",
  "gge": "{} {. [flip [egg]]}\n",
  "saycroatia": "{{propa {}}} {set wstring \"\"; for { set i 1 } { $i<=([string length $propa]+6) } { incr i } { append wstring \" \" } ;  return \"[color red on red]$wstring\\n[color red on white]   [name $propa]   \\n[color blue on blue]$wstring\"}\n",
  "mroach_pua": "{} {. \"<@mroach> [pua_an]\"}\n",
  "arithmetic": "{{who {}} {who2 {}} {who3 {}}} { if {$who eq \"\"} {set who [random_word]}; if {$who2 eq \"\"} {set who2 [random_word]}; if {$who3 eq \"\"} {set who3 [random_word]}; return \"$who + $who2 = $who3\"}\n",
  "dkk": "{} {return \"<@marty> I got shit to do mang\"}\n",
  "flippedomgdude": "{} { . $::flippedomgdude }\n",
  "cornbread": "{{who {}}} {. \"<[name $who]> ill never forget in math class in high school back in the day, 2 black guys get in a fight and one stabs the other with a screw driver right in front of me when im like a freshman, then some black girls stands up and screams OH SHEET HE STABBED CORNBREAD\"}\n",
  "sexfluid": "{} sex_fluid\n",
  "kidpornstar": "{} {lindex_random $::kidpornstar_dict}\n",
  "whatrand": "{} {return \"Whatbot: [random_word]\"}\n",
  "escape_glob": "glob {string map [list \\[ \\\\\\[ * \\\\* ? \\\\? \\\\ \\\\\\\\] $glob}\n",
  "buttewheel": "{} {ajoin \" \" [ncock 3] [squared (_|_)]}\n",
  "abgt": "args {apply {ajoin \" \"} [map [split [join $args] {}] {char {apply [next_in_list {bgt {fw bgt}}] $char}}]}\n",
  "sequel": "{} {choose \"\" \" II\" \": The Return\" \": [string totitle [name]]'s Revenge\" \": Electric Boogaloo\" \" III\" \" IV\"}\n",
  "funds": "{} {return \"\u0003HELLO SIR! MY NAME IS TIMOTHY SESE-SEKO SON OF THE DECEASED MUHAMMED SESE-SEKO AND I WOULD LIKE TO SEND YOU \u0002\u00033\\$35,000,000 (THIRTY FIVE MILLION U.S. DOLLARS)\u0002\u0003 AS SOON AS YOU SEND ME SOME CASH SO I COULD PAY WESTERN UNION FOR TRANSFERRING THESE FUNDS\"}\n",
  "lmoos": "{} {string map {. âÌÌÌÌÌÌÌÌÌÌÌÌÌÌÌÌÌÌÌÌÌ§Ì¦Ì¥Ì¤Ì£Ì¢Ì¡Ì ÌÌÌÌÌÌÌÌÌÌÌÌÌ¿Ì¾Ì½ÌªÌ«Ì­Ì¯Ì±Ì³Ì´Ì¶Ì·Ì¹ÌºÌ»} [lmoot âââââ âÍÌ¬Ì­Ì°âââÌ¬ââÌ«Ì«ÌªÌ©ÌÌÌÌÌÌÌ¢Ì£Ì¤Ì£ÌÌÌÌÌÌ²Ì²Ì´Ì¶Ì¶ÌÌÌ­Ì­Ì«Ì«Ì¾ââââï¸¡ââââââ¡â¡Ì¥Ì»Ì¸Ì¢Ì¢Ì»Ì¥ÌÌ¦Ì¦ÌÌÌ²ÌÌÌ«ÌÌÌÌÌÌÌÌÌ°ÌÌ­Ì­ÌÌÌÌ¿Ì¾Ì©Ì©Ì®Ì¬ÌÌ°Ì±ÌÌÌ¢Ì¸Ì¤Ì¢ÌÌ°Ì­ÌÌªÌ¾Ì½ÌªÌ­Ì¯ÌÌ Ì Ì£ÌÌ¢Ì¢]}\n",
  "uuencodec": "c {munge [format %c [expr {($c != 0) ? (($c & 0x3f) + 0x20) : 0x60}]]}\n",
  "biggestfag": "{{who {}}} {if {$who eq \"\"} {set who [lindex_random [names]]}; return \"The biggest fag in #buttes is: [rainbow $who]\"}\n",
  "clear": "{} {smega {string repeat \\  443} 20}\n",
  "stripnumbers": "a { regsub -all {[0-9]} $a \"\" }\n",
  "magick-white-background": "img { magick_scheme (let ((img (image \\\"[scheme_escape $img]\\\")) (w (width img)) (h (height img)) (white (resize (image http://churchburning.org/w/whitepixel.png) w h))) (overlay white img)) }\n",
  "take": "{n list} {lrange $list 0 [expr $n - 1]}\n",
  "terrorist2": "{} {return \"\u0003Hello, Sir! My name is Abdullah Ihram Mohammad Bin Zular Krokar Tehroham Kumr, \u0002\u00034I am a TERRORIST.\u0002\u0003 My father was on the first plane that crashed in the World Trade Center. I get a boner every time CNN plays that tape. If you wish to help me in my quest for \u0002\u00038WORLD SLAVERY\u0002\u0003, please purchase a kalashnikov at your nearest kalashnikov store and \u0002\u00034HELP ME KILL ALL AMERICANS!\"}\n",
  "tits": "{{oi {}}} {set oi [name $oi]; return \"[name $oi] has the nicest tits ever.  I'd like to play with [name $oi]'s tits, suck on [name $oi]'s tits, bang my dick agressively against [name $oi]'s tits, then cover [name $oi]'s tits with my manwad.  True story.\"}\n",
  "your_retardid": "{} {giga [rainbow {retard}]}\n",
  "oldtest_insult": "{} { subst [lrand $::oldtest_insult] }\n",
  "rujew": "{{arg {}}} { . \"[name $arg]: are you a jew?\" }\n",
  ":)": "{} {vxpify \": ) \"}\n",
  "happy2": "{{max 0}} {if !{$::happy_n++ > $max}{return \":):):):):):):):):):):)\\n[happy2 $max]\";}}\n",
  "bolgimo": "{} {bgbt bolgimo}\n",
  "darknight": "{} {return \"http://www.links.net/daze/05/01/14/dark_night_flick.html\"}\n",
  "rip2": "{} { return \"        _____\\n       |     |\\n       |     |           Rest In Peace\\n ______|     |______\\n|                   |     Faggot\\n|      R. I. P.     |\\n|______       ______|\\n       |     |\\n       |     |\\n       |     |\\n       |     |\\n       |     |\\n       |     |\\n     __|_____|__\" }\n",
  "crwnight": "{} {eval [string map { 08candidate {string toupper [crw_word]} } [info body electionnight]]}\n",
  "swinglerplot": "{} {. \"\\\"[ucwords [swingler_word]][sequel]\\\" ([string totitle [genre]], [+ 1982 [rand 26]]) tells the story of Christopher Swingler ([celebrity]) growing up in a [era] [state], coping with [swingler_word], [swingler_word], and [swingler_word]. [review]\"}\n",
  "cat69": "{} {ajoin \"\" [rocketcat] [flip [vflip [rocketcat]]]}\n",
  "fiddle": "{{who {}}} {return \"\\<[name $who]\\> fiddle with my [body_part]\"}\n",
  "steve_dishonored": "{} {ajoin \"\" [stevegrave] [flip [STpeeinto]]}\n",
  "goonmp3player": ". {Basically, I want it to be somewhat compact, preferably with 2GB or more space, good interface and HAS to have USB 2.0 transfer speeds and be USB rechargable. Anyone know of a decent player fitting these requirements in the 70-150 dollar range?}\n",
  "dollarsign": "{} { set result \"\\n   _\\n  | |\\n / __)\\n \\\\__ \\\\\\n (   /\\n  |_|\\n\"; return $result;}\n",
  "wikipedia": "{} {string map {{The Bible} Wikipedia} [@bible]}\n",
  "hellotrollreply": "args {return \"HAHA YHBT HAND\"}\n",
  "yiffs4furs": "{} { smega {aimyiff [raim furry]}}\n",
  "STfullmoira2": "{} {embed [STfullmoira] \"SUPPORT\\nOUR TROOPS\" 13 10}\n",
  "weatherword": "{} { subst [lindex_random $::weatherwords] }\n",
  "lisp": "args {set size [expr {[rand 20]+5}]; return \"[string repeat \"(\" $size] $args [string repeat \")\" $size]\"}\n",
  "shscfit": "{} {stampsay -s penguin [eval [string map {ww_item shsc_word wearing sitting\\ in\\ front\\ of watchandweight  SH/SC} [info body hypnofit]]]}\n",
  "trace:add": "{proc {tracer calls}} {tracer%${tracer}_init $proc; trace add execution $proc enterstep \"tracer%${tracer} $proc\"; trace add execution $proc leavestep \"tracer%${tracer}_l $proc\"}\n",
  "felon": "{} {pink [ncock 0]}\n",
  "insult_verb": "{} {lindex_random $::insult_dict}\n",
  "biggoldsmile": "{} {set the_smile [smile]; while {[string length $the_smile] > 10} {set the_smile [smile]}; biggoldtext $the_smile}\n",
  "willsmith": "{} {return \"nigga where my bazooka be at\\nnigga where my bazooka be at\\nnigga where my bazooka be at\"}\n",
  "twintowers": "{} {draw {1111001111 1111001111 1111001111 1111001111 1111001111 1111001111 1111001111 1111001111 1111001111 1111001111}}\n",
  "popeye": "{} {mega {. {tcl rawvegan}}}\n",
  "8ball": "args {?? $::8ball}\n",
  "overheard_in_washington": "{} {set p1 [political_figure]; set p2 [political_figure]; . \"$p1: [upper [hotbutton]]\\n$p2: [upper [insult_verb] those who [choose support oppose] [hotbutton]]\\n$p1: [upper you fucking [faglame]]\\n-- [lindex_random $::washington_place]\"}\n",
  "STman": "{} { return \"    :.\\\".:    \\n   _j\\\\-/l_   \\n  /  . .  \\\\  \\n  \\\\<\\\\ . />/  \\n   {| u |}   \";}\n",
  "ricky_text": "{} {subst [join {{[name]'Z D00M TooL [rand 128]-biTS versi0n} { } {\\[ \\] [randcap ping] FLuD} {\\[ \\] [randcap ping] of DooM} {\\[ \\] [randcap ping] of mODeRaTe RisK} {\\[ \\] [randcap ping] of [randcap [ricky_word]]} {\\[ \\] [randcap ping] of [randcap [ricky_word]]} {\\[ \\] [randcap ping] of [randcap [ricky_word]]} {\\[ \\] [randcap ping] of [randcap [ricky_word]]} {\\[ \\] [randcap exit]}} \\n]}\n",
  "abezfm": "{} {drawtable [repeat [rand 18 20] {list [?? [odd_elm [expr {[channel] == \"#onebutan\" ? $::onebutan_lastfm_usermap : $::lastfm_user_map}]]] [choose [capitalize [*fullname]] [band]] [capitalize [strip_u [song_front][fetish_porn]]\\ [song_modifier]]}] {default red green}}\n",
  "magick-scale-composite-bottom-right": "{url1 url2 {scale 0.5}} { magick_scheme [scale-and-composite-gen $url1 $url2 $scale B R] }\n",
  "lastfm:urlfilter": "x {utf8_demangle [regsub -all {\\+} [subst [regsub -all {%([A-F,0-9]{2})}  [regsub -all {%25([A-F,0-9]{2})} $x {%\\1}] {[uchar \\1]}]] { }]}\n",
  "blogit": "{} {bt blog it}\n",
  "STmoirahead": "{} {crop [moiracam5] 32 1 11 8}\n",
  "triham": "{} {. \"Please eat your triham: 12 digits max\"}\n",
  "try": "{script1 finally script2} {\r\n\t# from http://wiki.tcl.tk/990\r\n\t\r\n\tif {$finally ne \"finally\"} {\r\n\t\treturn -code error \"syntax error: should be \\\"[lindex [info level 0] 0] script1 finally script2\\\"\"\r\n\t}\r\n\t\r\n\tset status [catch {uplevel 1 $script1} result1]\r\n\tif {$status == 1} {\r\n\t\tset info $::errorInfo\r\n\t\tset code $::errorCode\r\n\t}\r\n\t\r\n\tswitch -exact -- [catch {uplevel 1 $script2} result2] {\r\n\t\t0 {\r\n\t\t\tswitch -exact -- $status {\r\n\t\t\t  0 {return $result1}\r\n\t\t\t  1 {return -code error -errorcode $code -errorinfo $info $result1}\r\n\t\t\t  2 {return -code return $result1}\r\n\t\t\t  3 {return -code break}\r\n\t\t\t  4 {return -code continue}\r\n\t\t\t  default {return -code $code $result1}\r\n\t\t\t}\r\n\t\t}\r\n\t\t1 {return -code error -errorcode $::errorCode -errorinfo \"$::errorInfo\\n    (\\\"finally\\\" block)\" $result2}\r\n\t\t2 {return -code return $result2}\r\n\t\t3 {return -code break}\r\n\t\t4 {return -code continue}\r\n\t\tdefault {return -code $code $result2}\r\n\t}\r\n}\n",
  "buttesfire": "{} {. git clone git://github.com/shaniqua/buttesfire.git ~/Library/Application\\ Support/Colloquy/Styles/buttesfire.colloquyStyle}\n",
  "funnt": "{} {rainrss \"shsc.biz/funnt.rss\"}\n",
  "blackjack_get_score": "p { return [lindex [array get ::blackjack_score $p] 1];}\n",
  "fatmouse": "{} {lindex_random $::fatmouse_dict}\n",
  "amendment": "{} {return \"Congrefs fhall pafs no laws infringing upon the right of the perfon to engage in [string toupper [crw_word]]\"}\n",
  "longcharity": "{} {return \"the Society of [string totitle [adjective]] [state] [string totitle [ethnic_group]] Against [choose Childhood Geriatric Fetal Sudden Fatal] [string totitle [disease_word]]\"}\n",
  "scienoword": "{} {lindex_random $::scieno_dict}\n",
  "array_mapx:tuple_eval": "{_l _x _y _code} {set $_x [car $_l]; set $_y [cadr $_l]; return [eval $_code]}\n",
  "polplot": "form {wget http://a.minivanmegafun.com/plot/plotnew.py?formula=[urlencode $form]&set=polar}\n",
  "meltdown": "{} { return [bgr 4 MELTDOWN] }\n",
  "gaymid": "{{str {}}} {if {str eq \"\"} set {str [gudrow_word]}; rainbow [pyramid \u0002$str\u0002]}\n",
  "slashpoll_choices": "html {every_n_from 2 1 [regexp -all -line -inline {^\\s+VALUE=\\\"\\d\\\">(.*)$} $html]}\n",
  "biggayboner": "{{size 10}} {if {$size > 10 || $size < 1} {set size 10}; biggaytext \"8[string repeat = $size]D\"}\n",
  "ss": "{} {return \"  \u001f/ \u001f \u001f/ \u001f\\n   /  /\"}\n",
  "amat2": "{{who {}} {nick {}}} {return \"<@amat> yo [name $who] is impersonating [name $nick]\\n<@amat> that's fucked up\"}\n",
  "penisjudge": "{{who {}}} {return \"[name $who] has a [size_word] penis\"}\n",
  "rooooooo": "{} {pink [chinksay [lindex $::octalemo_dict 0]]}\n",
  "buyshoes?": "{} {wet of course}\n",
  "no_netsplit": "{server1 server2} {. \u000312-\u00030!\u000312-\u0003 \u000311Netsplit\u0003 \u00030$server1\u0003 >-< \u00030$server2\u0003}\n",
  "acquaintance_word": "{} {return [lindex_random $::acquaintances]}\n",
  "xcox": "n {aflip [flip [ncock $n]]}\n",
  "inmymouth": "{} { return \"(_)_)====D ~~~ O:   put it in my mouth\"}\n",
  "imhard": "{} {join [list {(__)} { Oo  Chat Medium Hard} { \\  }] \\n}\n",
  "^poop": "{} {set line [^]; set tok [lindex_random $line]; string map [list $tok poop] $line}\n",
  "zaphodpotter": "{} {return \"       /b_,dM\\\\__,_\\n     _/MMMMMMMMMMMm,\\n    _YMMMMMMMMMMMM(\\n   `MMMMMM/   /   \\\\   ____,    \\n    MMM|  __  / __/  (  / \\n    YMM/_/# \\\\__/# \\\\    /__)aphod\\n    (.   \\\\__/  \\\\__/   ` ___  \\n      )       _,  |    '_|_)\\n _____/\\\\     _   /       | otter\\n     \\\\  `._____,'\"}\n",
  "kill_drudge": "{} {submitdrudge On [day] [daypart], I will kill myself with a [weapon], I have nothing else to live for, [choose \"[nicklist]\" \"[jewfullname]\" \"[celebrity]\" \"[niggerfullname]\"] has betrayed me, goodbye cruel world!}\n",
  "cspapermain": "{} {. \\\\section\\{[saq_skill]\\} [shsc_experience] \\\\subsection\\{[shsc_word]\\} [mega s_a]}\n",
  "omgwelcometocanada": "{} {return \"[omg] WELCOME TO CANADA, [string toupper [lindex_random $::viet_name_dict]] [string toupper [lindex_random $::viet_name_dict]]!  HERE'S YOUR [string toupper [canadian_object]] AND SOME [string toupper [weed]], EH?\"}\n",
  "word_count": "il {set o {}; set l [remove_stop_words [lsort [split $il {\" . , ! ?}]]]; set curr [lc [car $l]]; set cnt 0; foreach elm $l { set elm [lc $elm]; if {$elm == $curr} { incr cnt } { lappend o [list $cnt $curr]; set curr $elm; set cnt 1 }}; lappend o [list $cnt $curr]; return $o}\n",
  "jre": "{{args {}}} {if {$args eq \"\"} {acronym jre} {return \"true story\"}}\n",
  "megaconf": "{} {return \"[autoconf]\\n[autoconf]\\n[autoconf]\\n[autoconf]\\n[autoconf]\"}\n",
  "thxfly": "{{ircnet {}}} {return \"      __    )\\n     |  | _(_\\n     |  || *<-'  THX FOR FLYING [string toupper [ircnet_word $ircnet]]!\\n'->- |  ||  |`    9/11 NEVER CONNECT\\n\"}\n",
  "azam": "{} { return \"<azam> actually last night i had a dream i was fucking my arab friend\" }\n",
  "holocaust": "{} {return \"never happened\"}\n",
  "t_s": "args {twitter_submit $args}\n",
  "sellout": "{} {return \"<@sam> OH [string toupper [deity]]E I LIKE [string toupper [butte_word]] IN MY [string toupper [butte_word]]\"}\n",
  "analog": "{} {. [siren] [b] [cdown analog_freakout] [b] [siren]}\n",
  "wtf_is": "unicode_character {utf_is $unicode_character}\n",
  "rollback": "procname { eval [. proc $procname [~cwget [view_last proc $procname]]] }\n",
  "kallecleantemp": "{} {return \"<@Kalle> I flush, then I apply [choose [sex_fluid] [matter] [booze_word]] in the toilet bowl and I give the toilet bowl a good [act_word] with that. I flush. [fatgoon_finale].\"}\n",
  "intersect": "{a b} {select $a {i {include? $b $i}}}\n",
  "ircnet_word": "{{name {}}} {if {$name eq \"\"} {return [lindex_random $::ircnet_dict]} {return $name}}\n",
  "myu": "{{who {[nick]}}} {wu $::wu([name [subst $who]])}\n",
  "jap": "{} {}\n",
  "train_line": "{} {?? $::train_line_dict}\n",
  "chinkamid2": "{} {pyramid \"xiafs \"}\n",
  "image-bbq": "url { magick_scheme [bbq-gen $url] }\n",
  "unknown:1:cmd/^\\^(\\^+)$/": "{matches cmd} {^ [+ 1 [string length [last $matches]]]}\n",
  "wu:0": "args {set args [join $args]; each [lrange [regexp -inline $::wu_regexp_rss [cwget [last [regexp -inline $::wu_regexp [cwget \"$::wurl[urlescape [join $args]]\"]]]]] end-1 end] {{title descr} {. [strip_space [html [strip_html \"\\x1f$title\\x1f - \\002$descr\"]]]}}}\n",
  "buttes_stool_line": "{} {subst [lindex_random $::stool_description]}\n",
  "go:place_piece": "{x y c} { go:render_board [go:set_current_game [go:set [go:current_game] $x $y $c]] }\n",
  "thegaydar": "{} {. $::thegaydar}\n",
  "niggerlover": "{} {join [list { Vote Obama }]}\n",
  "randomdccsend": "{} { return \"\\1DCC SEND \\\"[virusfile]\\\" [rand 2000000000] [rand 1024] [rand 100000]\\1\"; }\n",
  "mac_feature": "{} fake_mac_feature\n",
  "image-spooge": "url { magick_overlay $url http://imgur.com/qINvM.png }\n",
  "chat?": "{} {ajoin \"  \" \"[chathard]\" \"[chatsoft]\";}\n",
  "randxycoord": "{w h {xoff 0} {yoff 0}} {set xpos [?? [seq $xoff [expr $xoff + $w]]]; set ypos [?? [seq $yoff [expr $yoff + $h]]]; list $xpos $ypos}\n",
  "typicalgoon": "{} {return \"[fatgoonweb]\"}\n",
  "judy": "{} {return \"[bgt judy]\"}\n",
  "floor": "x { expr floor($x) }\n",
  "rudy": "{} {return \"[bold]I WAS MAYOR OF [string toupper [city]] ON 9/11\"}\n",
  "STvikinghat": "{} { return \"   /),--.(\\\\  \\n  ((/....\\\\)) \\n   :======:  \";}\n",
  "impiss": "{} {more {http://kshatra.org/par/impiss}}\n",
  "tmyk": "{} {. [img-tmyk]\\n[aud-tmyk]}\n",
  "unparse_formatting_color": "{new old} {array set n $new;array set o $old;if {($n(fg) == -1 && $n(bg) == -1) || ($n(fg) == $o(fg) && $n(bg) == $o(bg))} return;set ret \u0003;if !$n(c) {if {$n(fg) != -1} {if {$n(fg) != $o(fg)} {append ret [format %02s $n(fg)]}};if {$n(bg) != -1} {if {$n(bg) != $o(bg)} {append ret ,[format %02s $n(bg)]}}};return $ret}\n",
  "fast_mandala": "{} { aflip [randart:randart 40 10 100] }\n",
  "image-dicksuck": "url { magick_overlay $url http://assets.buttes.org/magick/17524513a429b0a1f16f000ba0613586.png}\n",
  "break_shaniqua": "{} {. \\1DCC\\1}\n",
  "STpumpkin": "{} { return \"   ___/(__   \\n  / Q\\\\ /Q \\\\  \\n |  __'`_  | \\n | </\\\\/\\\\/> | \\n  \\\\___.___/  \";}\n",
  "STgoon": "{} { return \"  __________\\n (--\\[ .\\]-\\[ .\\]\\n (_______O__)\" }\n",
  "racewar": "{{n 20}} {string map {nig race nog war} [nignog $n]}\n",
  "mobcomic": "{{text {}}} {hardchatscomic [or $text [ircify [repeat 4 {?? $::mob_excuses}]]] \"Unicorn Mob #[rand 300]: [?? $::mobcomic_titles]\" nicubunu \"[name]\"}\n",
  "fatgamer": "{} {stampsay -s boger \"I can't wait till I see the look on [name]'s face. I just got [gamer_phrase], and upgraded to [gamer_phrase], and my SECRET WEAPON, brand new  [gamer_phrase] for [lindex_random $::upgradephrase]. Oh and just picked up some [fastfood] & 2 boxes of [food_word] *FTW*.\"}\n",
  "dune": "{} { subst [lindex_random $::dune] }\n",
  "b1ff": "args {string toupper [string map {a 4 b 8 e 3 g 6 i 1 o 0 s 5 t 7} [string tolower $args]]}\n",
  "bitlyclicks": "id { cadr [regexp -inline -all {>(\\d+)<} [grep \"<span id=\\\"globalClicksCount\\\">\" [wget \"http://bit.ly/info/$id\"]]] }\n",
  "night": "{} {return \"[bt \"goon night\"]\"}\n",
  "fathead_chins": "{{n 0}} {if {$n < 0} {set n 0}; if {$n > 7} {set n 7}; if {$n == 0} {return [fathead [rand 20]]}; set lines [lines [fathead [rand 20]]]; set chin [lindex $lines 2]; lremove lines 2; lappend lines [regsub -all _ $chin \" \"]; while {[incr n -1]} {lappend lines [regsub -all {[_O]} $chin \" \"]}; lappend lines [regsub -all O $chin _]; join $lines \\n}\n",
  "allebooner": "{} kalleboner\n",
  "aimtooley": "{{n {}}} {set n [aimname $n];aim -n $n [lump $n]}\n",
  "test_proc3": "{} {catch [concat say x] val; return $val}\n",
  "go:width": "gb { lindex $gb 1 }\n",
  "nowonder": "args {return \"[sex_act] [faglame]s, [sex_act] [faglame]s, and [sex_act] [faglame]s: no wonder [name $args] has [rainbow [disease]]\"}\n",
  "acquaintance_chain": "{} { if {[rand 3] == 0} { return \"[unprefixed_simple_acquaintance]'s [acquaintance_chain]\"} { return [unprefixed_simple_acquaintance]}}\n",
  "famousperson": "{} {choose \"[celebrity]\" \"[political_figure]\"}\n",
  "psych3": "{} {lindex_random $::psych3}\n",
  "ate": "{} {. You ate :D\\nAters: 1}\n",
  "imageshack": "{} { subst [lindex_random $::imageshack] }\n",
  "isstevedying?": "{} {wet yes}\n",
  "retard": "{} {return \"yo zapanig is a [faglame] retard\"}\n",
  "overlay_first": "{f e} {\n        set r [list]\n        set l [split $f \\n]\n        set a [split $e \\n]\n        for {set i 0} {$i < [llength $l]} {incr i} {\n\t\tset w [lindex $a $i]\n\t\tforeach {m s} [regexp -inline -indices -- {( +)} [cstrip $w]] {\n\t\t\tset x [lindex $s 0]\n\t\t\tset y [lindex $s 1]\n\t\t\tset w [creplace $w $x $y [crange [lindex $l $i] $x $y]]\n\t\t}\n\t\tlappend r $w\n\t}\n\tjoin $r \\n\n}\n",
  "3gss": "{} {join [map [split [3gs_stat] \\n] {{x} {string map $::3gsmap [regsub -all {(THE [A-Z\\. ]*REQUESTED|ARRIVAL SCAN)} $x [upper [eval  [choose jerkc abezcaps odin albot saq_beer_review mroach-twat]]]]}}] \\n}\n",
  "aimf_chirpz": "args {aimify chirpz $args}\n",
  "moira5": "{} { return $::moira5}\n",
  "weather": "s {if {[regexp -nocase {^(CW|DW|AP|AR|AS)\\d+$} $s]} {set w [aprs_weather $s]} {set w [weather2 $s]};return \"$w\\n[string totitle [weather1]] [weatherword]: [string totitle [weathercondition]] [maybe_measure]\"}\n",
  "next_in_list": "list {set key [sha1 $list]; if ![cache exists next_in_list $key] {set index 0} else {set index [expr {[cache get next_in_list $key] + 1}]; if {$index >= [llength $list]} {set index 0}}; cache put next_in_list $key $index; lindex $list $index}\n",
  "aimpanties_random": "{} {return \"[aimpanties [aimname]]\"}\n",
  "puntmefm": "{} {embed [head 21 [@spic]] [color white on black][center [regsub {^puntme } [strip_all [lastfm:single puntme]] {}] 50] 5 8}\n",
  "black_star_trek_character": "{} {?? $::black_star_trek_characters}\n",
  "fatgoon2": "{{glob {}}} {chinsay [fatgoonwebquote $glob]}\n",
  "add_aimprank": "prank { lappend ::aimpranks $prank }\n",
  "cert": "{} {?? $::certs}\n",
  "draw": "bitmap {join [map $bitmap {line {fullwidth_with_formatting [join [map [split $line {}] {char {if $char {invert \" \"} {. \" \"}}}] \"\"]}}] \\n}\n",
  "version": "{} {return \"\\001VERSION #buttes\\001\"}\n",
  "rainbow2": "args {join [map [split [strip_all [join $args]] {}] {char {. [apply color [next_in_list {{white on red} {white on fuchsia} {white on blue} {black on cyan} {black on lime} {black on yellow}}]]$char}}] {}}\n",
  "lanormedelor": "{} {. [bold][color black on yellow]SEULEMENT RON PAUL SOUTIENT LA NORME DE L'OR[color][bold]}\n",
  "butanfm": "{} lastfm:butanfm\n",
  "samsnake": "{} {ncock 1}\n",
  "unbreak": "string {string map [list \" \" [U+00a0]] $string}\n",
  "detect": "{list block} {\n  foreach value $list {\n    if [true? [yield $value]] {\n      return $value\n    }\n  }\n}\n",
  "vorghost": "{} {join [list [vora][vorb][vorc][vore][vorf][vorg][vorh]]}\n",
  "ricky_word": "{} { random_word }\n",
  "explain2": "{{str {}}} {if {$str eq \"\"} {set str [name]}; return \"[string toupper [rainbow $str]][hacker \", in ten words or more explain why [name] is a home.  You have two kalles.  Any deviation from my penis will garner you a swift [lol yiff].\"]\"}\n",
  "purr": "{} {return \"murr\"}\n",
  "drown": "{} {return [rands [expr {int(rand()*40)+1}]]}\n",
  "gaydar:randomlocation": "{} {. [+ 12 [rand 23]] [+ 5 [rand 14]] }\n",
  "wackyfullname": "{} {return \"[choose [swede_first_name] [waspfirstname] [capitalize [viet_name]] [jewname] [zuluname]] [alshort]\"}\n",
  "ystream": "{width height} { if {$width < 1 || $height < 1 || $height > 20 || $width > 40} {error \"GO PEE INTO THE SEA\"}; set stream [list]; for {set y 0} {$y < $height} {incr y} {set x [expr {int(sqrt($width*$y))}]; lappend stream [string repeat \" \" $x]\u00038.\u0003}; join $stream \\n}\n",
  "nicerack": "{} {. [gis fake tits] [arcade \"nice rack!\" pabom 6]}\n",
  "hax": "{} {return \"TEST\"}\n",
  "sex_gerund": "{} {[sex_act]}\n",
  "archuser": "{{who {}}} {set who [name $who]; return \"<$who> what is the '[unixprog_word]' cmd do ?  :D\"}\n",
  "review": "{} {set q [rand 6]; if {$q ne 1} {return \"$q [element_word] [marginalize]babies -- [source]\"} {return \"$q [element_word] [marginalize]baby -- [source]\"}}\n",
  "restore": "{captured_vars {level 1}} {\r\n\tforeach {type vars} $captured_vars {\r\n\t\tforeach {var value} $vars {\r\n\t\t\tif {$type eq \"scalars\"} {\r\n\t\t\t  uplevel $level [list set $var $value]\r\n\t\t\t} elseif {$type eq \"arrays\"} {\r\n\t\t\t  uplevel $level [list array set $var $value]\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\n",
  "trollcred": "{} { string map {TCL TROLLS} [levelup] }\n",
  ":|": "args {apply :I $args}\n",
  "1dug": "{} {return [bold][color [choosecolor]][hoiah]}\n",
  "card_p": "a { set suit [lindex [split $a .] 0]; set num [lindex [split $a .] 1]; if {$suit == \"S\"} { return [card_spade $num]; } else { if {$suit == \"C\"} { return [card_club $num]; } else { if {$suit == \"H\"} { return [card_heart $num]; } else { return [card_diamond $num]; } } } }\n",
  "STsheep": "{} {return \"\u000311,11#################\u000310,10#\\n\u000311,11##\u00030,0##########\u000311,11#####\u000310,10#\\n\u000311,11#\u00030,0############\u00031,1#\u00030,1o\u00031,1#\u000311,11#\u000310,10#\\n\u000311,11#\u00030,0############\u00031,1###\u00030,1-\u00031,1\u00030,10-\u0003\u0002---\\n\u000311,11##\u00030,0##########\u000311,11#####\u000310,10#\\n\u000311,11###\u00031,1#\u000311,11#####\u00031,1#\u000311,11#######\u000310,10#\\n\u00033,3###\u00031,1#\u00033,3#####\u00031,1#\u00033,3#######\u000310,10#\\n\";}\n",
  "powerbook": "args {set str [string trim [strip_color [join $args]]]; return [string repeat [string index $str 0]- 3]$str}\n",
  "willmergency": "{} {gay; ajoin \" [color]\" [bgbt \"471-\"] [bats]}\n",
  "STsuave": "{} {return \"[color yellow]|||||\\n[color blue]o-o\\n [color white]vv\"}\n",
  "nicedong": "{} {. [gis hot twinks] [arcade \"nice dong!\" pabom 6]}\n",
  "tag": "{url args} {\n  if ![regexp :// $url] {\n    error \"usage: tag [color red]url[color] \\[tag tag...]\"\n  }\n  \n  set url [normalize_tag_url $url]\n\n  foreach tag $args {\n    set tag [normalize_tag_name $tag]\n    if ![tagged? $url $tag] {\n      lappend ::images_tagged($tag) $url\n    }\n  }\n  \n  tags_for $url\n}\n",
  "weasels_crowning_achievement": "{} {gold [bmi \"4.005325983 stones\" \"0.117 fathoms\"]}\n",
  "my_dick": "{} {expr pow(9,pow(9,9))}\n",
  "bobbyfisher": "{} {return \"[country_name] is an illegitimate country ... just like the [faglame] state of [country_name]. The [ethnic_group] have no right to be there. It belongs to the [ethnic_group]....\"}\n",
  "supdawg": "puts HelloWorld\n",
  "rot:ascrot": "{strl w h} { \n  set out \"\"\n  for { set x 0 } { $x < $w} {incr x} {\n    for { set y 0 } { $y < $h} {incr y} {\n      set out \"$out[rot:strlistxy $strl $x $y]\"\n    }\n    set out \"$out\\n\"\n  }\n  return $out\n}\n",
  "hodappdeal": "{} {. \"<hodapp> oh man sam, I've got this great idea we'll go into business together selling \u001f[?? $::learning_book_title_prefix] [capitalize [sam_word]] [subst [?? $::learning_book_title_suffix]]\u000f at craft shows and throw in [+ 2 [rand 3]] free [shakti_word]-enhancing [grift_word] with any purchase of two or more copies.\"}\n",
  "pythonname": "{} {return \"[waspfirstname] [string totitle [animal_word]]\"}\n",
  "saqdance": "{} {eval [concat [list ajoin \" \"] [mapx [seq 1 5] x saqdancemove]]}\n",
  "myt": "{} mytemp\n",
  "aud-gong": "{} { . http://churchturing.org/x/Harbinger/samples/1shot_gong.wav }\n",
  "string_each": "{} {}\n",
  "uj": "args { join [upper [join [join $args]]] }\n",
  "goatstairs": "{} {return \"           WEAR IT PROUD\\n             _.-\\\"\\\"\\\"\\\"-._\\n           .'          `.\\n   _______/__        ____\\\\_______\\n    __=__|___     __|  ___|_____\\n     ____|___  __|     ___|____\\n      ___|____|        ___|___\\n          \\\\              /\\n           `._        _.'\\n              `-....-'\"}\n",
  "card_shuffle": "{} { map1 [deck] {lindex [card_deck]} }\n",
  "ddr": "{} {return \"By the way, I've seen you play DDR in real life. You didnt know I was a goon, but I was there. Watching. Waiting. Planing.\"}\n",
  "debianuser": "{{who {}}} {return \"<@[name $who]> MY SSH KEY IS 9999999997999999979999999999979\"}\n",
  "meggalump": "{} {return [lump]\\n[lump]\\n[lump]\\n[lump]\\n[lump]}\n",
  "can't": "args {return \"Yes I can, you're just gay\"}\n",
  "go:render_board": "gboard {go:render_markup_board [go:map_board_xywhp $gboard go:markup_atom]}\n",
  "icosa": "{cmd args} {smega \"$cmd $args\" 20}\n",
  "csam_dikky_twat": "args {twat [csam_dikkyize [yiff_csam $args]]}\n",
  "randomdicks": "{} {gis { [[random_dict]] dicks}}\n",
  "jewcat": "{} {. [embed [STkitty] JEW 4 2]}\n",
  "karabiner": "{} {return \"<@Karabiner> [random_word] [random_word] [random_word] [random_word] [random_word] [random_word] [random_word] [random_word]\"}\n",
  "oldflip": "str { set str2 [addspaces [llength [split $str \"\\n\"]] [strip_all $str]]; return [string map $::flip_pairs [join [map1 [split $str2 \\n] {string_reverse}] \\n]];}\n",
  "crime": "{} {lindex_random $::crimes}\n",
  "*": "args {expr [join $args \" * \"]}\n",
  "top_youtube_ids": "{} {map [regexp -all -inline {<id>http://gdata.youtube.com/feeds/api/videos/([^<]*)</id>} [http://gdata.youtube.com/feeds/api/standardfeeds/most_discussed]] {{x y} {. $y}}}\n",
  "hatecrime": "{} { subst [lindex_random $::hatecrimes] }\n",
  "STkelly": "{} {return \"  __________\\n888-\\[ -\\] \\[ -\\]3\\nC       _\\\\  )\\n \\\\     /|\\\\ /\\n  \\\\___O___/\"}\n",
  "linuxuser": "{{who {}}} {if {$who eq \"\"} {set who [lindex_random [names]]}; eval \"[lindex_random [list debianuser slackuser archuser gentoouser loveuser]] $who\"}\n",
  "areyouinterested": "{{$fart}} {return \"yes becauser ur gay\"}\n",
  "butancode": "{} { uchar 2606 3002 2e 3a 2a 3a 309c 2605 309c 27 2a 30fd 28 2312 30fc 2312 29 30ce 3a 2a 27 309c 2605 309c 27 3a 2a 2e 3a 3a 27 309c 2606 3002 }\n",
  "buttesfm": "{} lastfm:buttesfm\n",
  "remote_command_state": "additional_state {\n  array set state $additional_state\n  array set state [list nick [nick] hostmask [hostmask] channel [channel] time [clock seconds]]\n  array get state\n}\n",
  "winkiebong": "{} {return \"<Winkie> i'm building a bong out of an old [appliance_word], some [food_word] and a [booze_container_word]\"}\n",
  "tankbattle2": "{} {ajoin \" \" [[lindex_random [info proc ST*]]] \"\\n\\n---\" [box [embed [canvas 65 7] [. \"\\n\" [wrap [. \"One of the greatest tank battles of the African campaign in #arab took place on [month] [rand 28] of 194[rand 3], between [title] [lindex_random $::arabs]'s [rand 180]th [capitalize [sex_act]] Division on one side, and Panzergruppe [capitalize [crw_word]] led by the [muslimtitle] [muslimname] on the other.\"] 65]] 1 1]]}\n",
  "STomgComp2": "{} {. \"    __    ___     \\n   /..\\\\ /| |'-.   \\n  .\\\\_O/ || |   |  \\n /  \\`._ \\\\|_|_.-'  \\n/ \\\\__.\\`=._)(_   \"}\n",
  "arabnews5": "{} {return \"Click for Full Article | Video\"}\n",
  "touchdown": "{} {. \"   _.-=\\\"\\\"=-._ \\n .\\'\\\\\\\\-++++-//\\'.\\n(  ||      ||  ) TOUCHDOWN\\n \\'.//      \\\\\\\\.\\'\\n   `\\'-=..=-\\'`\\n\"}\n",
  "games?": "{} {c 0 games}\n",
  "chatquoteflood": "chatter {string repeat \"\\\"[?? [subst \"\\$::${chatter}_dict\"  ]]\\\"\" 500}\n",
  "amirror": "arg { set lines [split $arg \\n]; set maxlen 0; foreach line $lines { if {[string length $line] > $maxlen} { set maxlen [string length $line]; }; }; set ascii {}; foreach line $lines { set spaces [expr $maxlen - [string length $line]]; append line [string repeat \" \" $spaces]; set line [reverse $line]; set line [string map {/ \\\\ \\\\ / \\} \\{ \\{ \\} > < < > ] [ [ ] ) ( ( ) ' ` ` '} $line]; append ascii \"$line\\n\"; }; return $ascii; }\n",
  "red_mills": "{} {. \"[color white on red] MILLS MILLS MILLS \"}\n",
  "winkitten": "{{who Winkie}} {set catstr [. [lindex_random {{LOL} {OMG} {OHH} {}}] [lindex_random {{KITTIES} {KITTEN} {CATTES}}] [lindex_random {:D 8D 8)}]]; return \"<[name $who]> $catstr\"}\n",
  "image-piss": "url { magick_overlay $url http://i.buttes.org/http://magick.buttes.org/temp/0630ba2d1d5287fb5ffc4d5826e5efbe.png }\n",
  "rotate90": "strl {\n    rot:rotate90 [split $strl \\n]\n}\n",
  "STworm": "{} { return \"          __\\n         /..)\\n        / o/\\n       /__/\\n      (__(____\\n     (________)____\\n    (___________)__)==,\" }\n",
  "xchat": "{} {. \" These days my IRC client is usually XChat. It features a GTK interface, perl scripting, and a lot of little niceties that an X11 addict will enjoy. When I'm fealing hardcore, I still run good old fashioned BitchX. \"}\n",
  "racistnationalities": "{} { array names ::racistmap }\n",
  "aimfunnyjoke": "args { aim -n [aimname $args] [funnyjoke] }\n",
  "blackjack_print_hand_rec": "hand { if [expr [llength $hand] < 1] { return \"\"; } else { return \" \\[box \\[card_p [lindex $hand 0]]] [blackjack_print_hand_rec [lrange $hand 1 [expr [llength $hand]-1]]]\" }; }\n",
  "STdiamond": "{} { return \"    /\\\\       \\n   /  \\\\      \\n   \\\\  /      \\n    \\\\/       \";}\n",
  "bz": "{} { . \"bzz\"}\n",
  ":I": "{{text :I}} {pick 1 img-:i 9 {eval [list [?? {bt bgbt bgt et warhol_bt}] $text]}}\n",
  "reset_shaniqua": "{} {.\\1DCC\\1}\n",
  "al": "args {Al $args}\n",
  "catdow": "{} {catback [string map {+ {UP } - {DOWN }} [strip_all [stock .dji]]]}\n",
  "radeon4": "{} {return \"<@radeon> So i cant exactly make my lips that tight\\n<@radeon> i tried to play someones trumpet last night\\n<@radeon> i couldnt do it\\n<@radeon> I just lost my job =\\\\\"}\n",
  "octalc0desmom": "{} { return \"octalc0de's mom slept with [info cmdcount] men and sucked [expr 2 * [info cmdcount] + 1] dicks\"}\n",
  "drug_ad": "{} {. Ask your doctor about once-a-day [capital [loaf2]] for seasonal [disease_word] relief.  Side effects may include itchy [sexpart], dry [sexpart], or [disease_word].}\n",
  "STturkey2": "{} { return [colorize_stamp_pane yellow on black turkey]; }\n",
  "natty": "{} {. \"NOW YOU'RE TALKIN'\"}\n",
  "buttesfort:fort": "{} { join [lindex_random $::buttesforts] \\n }\n",
  "sombrerify": "{comic {head { .'```\"\".}}} {inject [locate $head $comic] $comic {{canvas coords} {embed $canvas ____n____ [first $coords] [- [last $coords] 1]}}}\n",
  "qwantz2": "args {set code [inject [szip $args {{11 7  } {249 3} {378 4} {513 52} {7 248 } {102 245 } {199 247} {345 249} {298 329 } {497 246} {635 315}}] \"(image http://churchturing.org/w/qwantzoverlay.png)\" {{i v} {. (annotate $i 14 [caadr $v] [cadadr $v] black \\\"[car $v] \\\")}}]; return $code}\n",
  "fm_station_mhz": "{} {. [?? [seq 87 107]].[?? {1 3 5 7 9}]}\n",
  "famousniggerman": "{} {lindex_random $::dict_famousniggermen}\n",
  "STspacecow": "{{who {}}} { return \"       i--i \\n     (=((oo)) \\n    /(+((__) \\n   * ||=-|| \\n     ''  ''     \";}\n",
  "miscjre": "{} { subst [lindex_random $::miscjre] }\n",
  "mroachism": "{} {join [list [mroach2] [pix_tag cnnhd]] \\n}\n",
  "erupt": "{{who {}}} {return \"  (    )\\n    ||\\n   /vv\\\\     VOLCANO TO ERUPT, or just [name $who]'s face?\\n  /    \\\\    FIND OUT AT 11\\n_/______\\\\_\"}\n",
  "randmeasure9": "{{who {}}} {return \"http://[singlerandomword].on.nimp.org/~[name $who]/[virusfile]/u?=[butte_word]\"}\n",
  "drfred": "{} {return \"post the make/model of your psu please\"}\n",
  "pickbad": "args { set options [list]; foreach {value block} $args { do_times $value { lappend options $block } }; return [uplevel 1 [lindex_random $options]] }\n",
  "tomcate": "{} {. java bake. no tomcate.}\n",
  "strid": "{} {return \"LOL strid IS A JEW\"}\n",
  "time_travel_lo5": "{} {  lo5 [nick] }\n",
  "pet_name": "{} {lindex_random $::pet_names}\n",
  "pennyarcade": "{year month day} {magick composite http://penny-arcade.com/images/$year/$year$month$day.jpg [magick_id [magick resize [img-dick2dick] 230 335]] 503 24}\n",
  "resistfml": "args {apply rfml $args}\n",
  "submitdrugde": "a { return [wget \"http://drudgereport.com/cgi-bin/fastfeedback.cgi?Send=SUBMIT&body=[string map {\" \" +} $a]\"]; }\n",
  "darrensay": "{{fart {}}} {if {$fart eq \"\"} {set fart [darren_word]}; stampsay -s darren $fart}\n",
  "aimfalafel": "args {aim -n [aimname $args] [falafel]}\n",
  "hi5": "{{who {}}} {if {$who eq \"\"} {set who [lindex_random [names]]}; return \"[nick] o/*\\\\o $who\"}\n",
  "SThorse3": "{} {flip [SThorse]}\n",
  "proebaum": "{} { lindex_random $::proebaum }\n",
  "STlispmonster": "{} { join $::lispmonster \\n}\n",
  "1man1sink": "{} {return {             ___\n            -_-.`.   \n            '-' \\ \\__.__\n           /````-()-    `\n   ONE    /  /`  `````/ |   ONE\n   MAN   \\'-. ......./  |   SINK\n          \\  `         /\n           `--.-------' \n                  ___) )\n                 ( ___'\n                  \\ \\       \n\n}}\n",
  "cache": "{args} {meta_proc::call cache cache $args get}",
  "embed": "{f e x y} {\n\tset l [split [pad $f] \\n]\n\tset a [split [pad $e] \\n]\n\tset j [expr $y-1]\n\tset r [list]\n\tfor {set i 0} {$i < [llength $l]} {incr i} {\n\t\tset p [lindex $l $i]\n\t\tif {$i eq $j} {\n\t\t\tset o \"\"\n\t\t\tset b [lindex $a [expr $j+1-$y]]\n\t\t\tappend o [crange $p 0 [expr $x-2]]\n\t\t\tappend o $b\n\t\t\tappend o [crange $p [expr $x-1+[clength $b]] end]\n\t\t\tif {[expr $j-$y] < [llength $a]} {incr j}\n\t\t} else {\n\t\t\tset o $p\n\t\t}\n\t\tlappend r $o\n\t}\n\treturn [join $r \\n]\n}\n",
  "catpix": "{} {pt catte,[buttes_cat]}\n",
  "wow_race": "{} {lindex_random $::wow_race}\n",
  "acrofind": "c {set o \"\";if {[lsearch $c [array name ::acronym]] > -1} {return $c} {foreach n [array names ::acronym] {if {[regexp ^$c $n]} {lappend o $n}};return $o}}\n",
  "bodypart": "{} { body_part }\n",
  "barrelof": "{{what {}}} {return \"(_(_(\u001f\u00039.\u0003)\u00039_\u001f \u0002A BARREL OF PURE [string toupper $what] HAS SPILLED INTO [channel]\"}\n",
  "cleanbigjewnicodeswastika": "{} {return {                                 \n               ???               \n             ??   ??             \n           ??    ???             \n         ??    ?? ?? ???         \n       ??    ?? ?? ??   ??       \n       ???    ?? ??       ??     \n   ??? ?? ??    ?    ???    ??   \n ??   ?? ?? ??     ?? ? ??    ?? \n ???    ?? ??       ?? ?? ?? ??? \n ?? ??    ?    ???    ?? ?? ? ?? \n   ?? ??     ?? ? ??    ?? ???   \n     ?? ?? ?? ?? ??    ???       \n       ?? ? ?? ??    ?? ??       \n         ??? ??    ?? ??         \n             ??? ?? ??           \n             ?? ? ??             \n               ???               \n                                 }}\n",
  "ifl": "args {. \"[lmgtfy [join $args]][fullencode \"&l=1\"]\"}\n",
  "blakophant": "{} {heynot @maddow [mixdup-twat]}\n",
  "gdblade": "args {?? $::gdblade_dict}\n",
  "rps_choice": "{{choice {}}} {or $choice [choose rock paper scissors] }\n",
  "STgeordigoon": "{} {return \"\u0002 \u0002 __________\\n\u0002\u0002 (--\\[=======\\]\\n\u0002\u0002 (_______O__)\"}\n",
  "nethack:tlcorner": "{} { return \\342\\224\\214 }\n",
  "erowid": "id { html [first [regexp -all -inline \"<!-- Start Body -->(.*?)</font>\" [wget http://www.erowid.org/experiences/exp.php?ID=$id]]] }\n",
  "cstrip": "s {\n\tjoin [lindex [csplit $s] 0] \"\"\n}\n",
  "aimf_winamp2": "args {aimify winamp2 $args}\n",
  "fullfatgoon": "{{glob {}}} {fullgoonsay [fatgoonwebquote $glob]}\n",
  "delegate:single": "name { [car [info level 1]]:$name }\n",
  "amidone?": "{} {return \"ya ur done\"}\n",
  "rotate270": "v { rotate90 [rotate90 [rotate90 $v]] }\n",
  "myunderground": "{{who {[nick]}}} {wu $::wu([name [subst $who]])}\n",
  "rss_parse_item": "item_body {set title [lindex [regexp -inline {<title>(.*?)</title>} $item_body] 1]; set link [lindex [regexp -inline {<link>(.*?)</link>} $item_body] 1]; return [list $link [html $title]]}\n",
  "spic": "{} wetback\n",
  "sellingcrw": "{} {return \"[gudrize \"feel [shakti_word] and [shakti_word] without [disorder].  It's more than a [sex_do] but less than a [fuckword] --- It's [crw_word].\"]\"}\n",
  "hello4": "{} {return \"<@hello> When I am not having nals with my sissy, I like to play cs:s. i am very 1337, and can easily have 36 \\\"frags\\\" (kills) before anyone manages to get 10. I also like halo and like to put the controller up my butt while i play\"}\n",
  "macro:find": "p {set n 0; each [lsearch -regexp -inline -all [macros] $p] {m {. \"\\002[uplevel {incr n}]\\002) macro \\002$m\\002 -- \\x1f[llength [lines [macro $m]]]\\x1f lines\"}}}\n",
  "rot:serializemat": "mat {\n    set c \"\"; set v 0; set b 0;\n    set my \"\"; set myc \"\"; set myv 0; set myb 0;\n    set out \"\";\n    set lout [list];\n    foreach {row} $mat {\n        foreach {elm} $row {\n            set my [lindex $elm 0];\n            set myc [lindex $elm 1];\n            set myb [lindex $elm 2];\n            set myv [lindex $elm 3];\n            if {$c!=$myc} { append out $myc };\n            if {$b!=$myb} { append out [rot:B] };\n            if {$v!=$myv} { append out [rot:V] };\n            set c $myc;\n            set v $myv;\n            set b $myb;\n            append out $my\n        }\n        set c \"\";\n        set v 0;\n        set b 0;\n\n        lappend lout $out;\n        set out \"\";\n    }\n    return [join $lout \\n];\n}\n",
  "oprah": "{} {heynot @oprah [string range [fatgoonwebq] 0 132]}\n",
  "lines": "str {split $str \\n}\n",
  "gudromg": "{} {return [negromg]\\ [gudrow]}\n",
  "lmioot": "args {pick 1 lmiot\\ $args 1 lmoot\\ $args}\n",
  "gold": "args {set ret [join $args]; return \\002\\00308[regsub -all \\n $ret \\n\\002\\00308]\\017}\n",
  "420levelup": "{{who {}}} {. \"   [b]CONGRATURATION[b]\\n[center [string toupper $who] 18]\\nYOU HAVE HIT MANY BONG\\n   AND TOKED WELL\\n     LEVEL UP [uchar ff01 ff01]\"}\n",
  "splode": "what {ajoin \" \" [aflip $what] [ajoin \" \" [aflip \"$what \\n\"] [aflip \"$what  \\n\\n\"]]}\n",
  "aimf_stupidjones": "args {aimify stupidjones $args}\n",
  "who_levels": "{} {return \"\\n1  \u0002No new reports\u0002 of animal viruses infecting humans\\n2  Animal virus known to have \u0002infected humans.\u0002\\n3  \u0002Sporadic outbreaks\u0002 but no sustained human-to-human infection.\\n4  Community-level human-to-human outbreaks.  \u0002Significant increased risk of pandemic.\u0002\\n5  Human-to-human outbreaks in two countries.  \u0002Pandemic imminent.\u0002\\n6  Human-to-human outbreaks in at least three countries.  \u0002Pandemic under way\"}\n",
  "ceval:set": "{script result ttl} {\n  set key [sha1 $script]\n  cache put ceval [sha1 $script] [list id [info cmdcount] timestamp [expr {[clock seconds] + $ttl}] result $result]\n  ceval:gc\n  return $result\n}\n",
  "totem": "{} { return [join {{ __ } {/..\\ } {\\O_/} {/..\\ } {\\_O/} {/..\\ } {\\O_/} {/..\\ } {\\_O/}} \\n] }\n",
  "unknown:nick/stabby/": "args {error \"spic-like typing detected\"}\n",
  "my_penis_size": "{} {biggaytext [pick 1 {return 0} 9 {return kkkkkkkkkkkkkkkkkkkkkkkkkkkkk}]}\n",
  "quadstika": "{} {ajoin \" \" [swatsi]\\n\\n[swatsi] [swatsi]\\n\\n[swatsi]}\n",
  "spermrace": "args {if ![llength $args] {set args [list Gotta Get Ahead]}; ajoin \" \" [ncockrow 2] [sperm 1] [nomg 3] [join [lrange $args 0 4] \\n]}\n",
  "glennbeck": "{} {. \"Did Glenn Beck [sex_do] and [kill_verb] a young [pua_object] in 19[expr 10 + [rand 90]]?\"}\n",
  "circle_letters": "{{str {stop unicode abuse}}} { join [map1 [mapx [split [regsub -all {[^a-z0-9 ]} [lc $str] { }] \"\"]  x {string map $::unicode_abuse_map $x}] uchar] \" \"}\n",
  "saqsay2": "{{fart {}}} {if {$fart eq \"\"} {set fart [saq_beer_review]}; set lomarf \"$fart \"; append lomarf \"did i say that out loud? \\:-p\"; stampsay -stamp saq [join $lomarf] }\n",
  "buttesfighter": "{{name {}}} { . \"[pick 1 jewname 1 waspfirstname 1 niggername] \\\"[or $name [name]]\\\" [pick 1 swede_last_name 1 waspsurname 1 jewsurname 1 zuluname 1 surname], representing [channel] on Buttesnet\" }\n",
  "announcement": "{} {return \"[title] [pythonname] of [englishtown] and his lovely partner [title] [waspname] from [englishtown] and their pet [animal_word], [pet_name]\"}\n",
  "ourdistance": "{nick1 {nick2 {[nick]}}} {urdistance $nick1 $::myweather([subst $nick2])}\n",
  "colin": "{} {. \"v. pretty pussycat\"}\n",
  "octalc0de2": "{} {return \"<@octalc0de> I read pc magazine regularly\"}\n",
  "cutbackifyyoff": "url {set sized [magick resize_to_fit [magick grayscale $url] 63 79]; set dims [get_image_size $sized]; set x [lindex $dims 0]; set y [lindex $dims 1]; set xoff 0; set yoff 0; if [expr $x < 63] {set xoff [expr (63-$x)/2]}; if [expr $y < 79] {set yoff [expr (79-$y)/2]}; expr 11 + $yoff }\n",
  "nop_word": "{} {pick 1 {crw_word}}\n",
  "incogcup": "{{name incog}} {. [box [goonsay \"I got through all of 1[name $name][rand 50][plural [string map {\"an \" \"\" \"a \" \"\" \" \" \"\"} [a_sextoy]]] on my first viewing\"]]}\n",
  "kerry": "{} {return \"My position has always been [shakti_word].  I have a strong plan with [shakti_word] and [shakti_word].  My opponent refuses to acknowledge the [kerry_word], but I believe [shakti_word] is key on this issue.  Stormfront.org does bring up some good points concerning the [kerry_word]...where are the [kerry_word]s?\"}\n",
  "to_str": "string {set result \"\"; foreach char [split $string {}] {if [regexp {[$\\\\\"\\[]} $char] {append result \\\\$char} elseif [is_unprintable $char] {binary scan [encoding convertto utf-8 $char] H* bytes; append result [regsub -all .. $bytes {\\\\x\\0}]} else {append result $char}}; return \"\\\"$result\\\"\"}\n",
  "STnegroosama": "{} { join { {     *} { ___/ } {/ __\\ } {\\/..\\ } { \\_O/ } {   \\\\ } } \\n }\n",
  "jre3": "args {return \"I used to have money when I worked with jail bait, but then I got caught fucking them.\"}\n",
  "radeon7": "{} {return \"<@radeon> I just got a call from my mom.\\n<@radeon> she's getting a divorce, and dad says it's entirely my fault.\\n<@radeon> i masturbate too much :( \"}\n",
  "STcock": "{} { return [ncockrow 1];}\n",
  "fags?": "{} {bt god hates 'em}\n",
  "scvhate": "{} {. $::scvhate_dict}\n",
  "okey_types": "{} {lindex_random $::okey_types}\n",
  "key_vals_array": "arr { mapx [eval array names ::$arr] x {join [array get ::$arr $x] :} }\n",
  "name": "{args} {if ![llength $args] {return [nick]}; return $args}",
  "ft_cat": "{} {. \"This just in: SMOT IS [bold][string toupper [?? $::cat_dict]].[bold] More at [?? [seq 5 11]].\" }\n",
  "longroundtrip": "{text {dest1 ja} {dest2 zh} {source en}} { unescape_html [translate $dest1 $source [roundtrip [translate $source $dest1 $text] $dest2 $dest1]]}\n",
  "unicomg": "{} {[first [split [?? [lines [~http://givingin.org/unicode/search/?q=diaeresis]]]]]}\n",
  "lastfm:GetListenersHTMLold": "group {set html [lastfm:gsplitHTML $group]; foldxo new old {} $html {ifconcat [lastfm:isListening $new] [list $new] $old}}\n",
  "buttes?": "{} {c [llength [names]] buttes}\n",
  "lastblake": "{{n 0}} {lindex [blakelog] end-$n}\n",
  "vertigo": "args {if [llength $args] {set who [lindex $args 0]; set args [lrange $args 1 end]} {set who [name]}; return \"[^B][color red]?[color lime]5[color blue]4-2K[color red]?[^O] [vertigize \"Thanks For The [or [capitalize [join $args]] [random_word]]\"][^B][color red]$who[^O]\"}\n",
  "v%utimer": "{seconds proc name largs lbody} {\r\n\tproc ${name} ${largs} \\\r\n\t\t[concat [join ${lbody}] \"utimer ${seconds} [list ${name} ${largs}]\"]\r\n\tutimer ${seconds} ${name}\r\n}\n",
  "ncock": "size {if {$size < 0 || $size > 16} {error \"COCK SIZE OFF THE CHARTS\"}; set s [string repeat \" \" [expr {$size+1}]]; set glans \"$s _ \\n$s/\\\\)\"; set balls \"( Y)\\n \\\"\\\" \"; set shaft {}; for {set i 0} {$i < $size} {incr i} {lappend shaft \"[string repeat \" \" [expr {$size-$i}]]/ /\"}; if {$size==0} { return  $glans\\n$balls;} else { return $glans\\n[join $shaft \\n]\\n$balls }}\n",
  "swede_last_name": "{} {?? $::swede_last}\n",
  "porno": "{{name1 {}}} {if {$name1 eq \"\"} {set name1 [name]}; return \"\u0002[sex_act] [food_word] vol. [rand 10]\u0002: see $name1 in her first ever [goon_word]-on-[butte_word] scene with [rand 20] [ethnic_group]!\"}\n",
  "goon_ingredient": "{} {if {[rand 2] == 1} {set food [lindex_random $::goon_liquidfood]; set qty [lindex_random $::goon_liquidqty]} else {set food [lindex_random $::goon_solidfood]; set qty [lindex_random $::goon_solidqty]}; return \"[+ 2 [rand 5]] $qty of $food\"}\n",
  "nigger1": "{} {return [nigger2]}\n",
  "lolllerskates": "{} {return \"tcl2 lolllerskates\"}\n",
  "mpg": "{} ratio1\n",
  "jew": "{} {return \"___/_\\\\___\\n\\\\ /\\0034$\\003 \\0034$\\003\\\\ /\\n > VVV <\\n/_\\\\___/_\\\\\\n   \\\\ /\"}\n",
  "FuckCatbus": "{} { say [say [say [join {\"Bios\" \"ock\"} \"h\"]]] }\n",
  "arab": "{} {. /|\\\\ ATTN: THIS CHANNEL HAS MOVED TO #lolatyou ON IRC.HARDCHATS.COM /|\\\\}\n",
  "bigspamtext": "str {set str [string trim $str]; join [adjacent_join [map1 [map1 [split $str {}] gaychar] nsplit]] \\n}\n",
  "abevigoda": "{} { return \" abe vigoda is [wget http://www.abevigoda.com/ff.php]\" }\n",
  "interrogate2": "{{name {}}} {return \"[name $name]: isn't it true that [slander]?\"}\n",
  "dhcp": "{} {return \"Dynamic Hose Configuration Protocol\"}\n",
  "turbo": "{} {blogfooter Turbo's Blog}\n",
  "radeon12": "{} {return \"<@radeon> god i just want to punch my mom in the face sometimes\\n<@radeon> shes so dumb\"}\n",
  "dn": "args {string tolower [join $args]}\n",
  "octalc0mg": "{} {string map {. -} [omg]}\n",
  "bonaphone": "args {urlsay http://tbn0.google.com/images?q=tbn:yTVgMG7irxlp_M:http://nerdapproved.com/wp-content/uploads/2007/06/the_boner_phone.jpg [join $args]}\n",
  "linecount": "str {llength [lines $str]}\n",
  "clickspersecond": "{} {busy_wait 1; set e [clock clicks]; busy_wait 1; expr [clock clicks] - $e}\n",
  "zune": "{{who {}}} {return \"\u0003\u00033,5\\[ \u00033,5 \\]Â¤\u0003 \u0002\u0003\u00037~Z \u000313~U \u00037~N \u000313~E \u00037~+\u0002 \u0002\u0002\u00033,5Â¤\\[ \u00033,5 \\]\u0003\u0002 \u0002\u001f\u00037\u0002/\u000313\\\\\u0002\u0002\u001f\u0003 [grapefruitize SQUIR][grapefruitize TING:] \u00037\\[\u000313|||[grapefruitize 100%]\u000313|||\u00037\\]\u0003 [grapefruitize COMPLETE] \u000313\u001f\u0002\u0002/\u00037\\\\\u0002\u0002\u001f\u0003 [grapefruitize Welcome to the social, [name $who]!]\"}\n",
  "boldify": "str { return [bold $str][bold] }\n",
  "radeon19": "{} {return {<@radeon> so guys\n<@radeon> how can i bypass xchat registration}}\n",
  "randart:serialize": "{canvas w h} {\n    set o \"\";\n    set x 0;\n    set y 0;\n    foreach {c} $canvas {\n        append o $c;\n        incr x;\n        if {$x==$w} {\n            set x 0\n            incr y\n            if {$y!=$h} {\n                append o \\n\n            }\n        }        \n    }\n    return $o\n}\n",
  "dontshitonthefloor": "{{name {JESUS CHRIST}}} {ajoin \" \" \"$name\\nWHAT THE FUCK\\nDID YOU DO\" \"\\n\\n\\n\\n \\\\\"  [flippedomgdude] \\n\\n\\n\\n\\n\\n[STpoo] [omgchair]}\n",
  "fart": "{} {}\n",
  "winkize": "args {join [map [split $args { }] {w {. [string toupper [lindex_random $::winkie_words]]}}] { }}\n",
  "emigrate2": "{{who {}}} {return \"Oi, you! Take your [seinfeld_word] and go back to [country_name], you [unplural [ethnic_group]]!\"}\n",
  "octalemo": "{{match {}}} {octalsay [lindex_random [lfilter *$match* $::octalemo_dict]]}\n",
  "pikmin": "{} {return \"yah pikmin rules\"}\n",
  "catagenda:event": "{} { subst [?? $::catagenda] }\n",
  "gbs_qualifier": "{} {return \"\\[[goon_word] goons\\]\"}\n",
  "rndtcl_program": "{} {set n_exprs [expr [rand 4] + 1]; set ret \"\"; for {set i 0} {$i < $n_exprs} {incr i} {lappend ret \"[rndtcl_statement]; \"}; lappend ret [rndtcl_return]; join $ret \"\"}\n",
  "head": "{n args} {if {[llength $args] == 0} {set str $n; set n 10} {set str [lindex $args 0]}; join [lrange [lines $str] 0 [expr $n-1]] \\n}\n",
  "megaroofle": "{{oi 20}} {string map {\" \" \"\"} [lselect_random {\"LOL\" \"LMAO\" \"ROTF\" \"ROOF\" \"HAHA\"} $oi]!!!}\n",
  "?": "args {query $args}\n",
  "wooareyou": "{{idiot {}}} {return \" ^   ^\\n( o O )  Owlie wonders\\n ( w )  Woo the Fuck\\n (x X)  Do you think you are, [name $idiot]?\"}\n",
  "marginalize": "{} {lindex_random $::marginalize_dict}\n",
  "stampthink": "args {set i -1;set f 0;set s [string range [?? [info procs ST*]] 2 end];set o [?? {l r}];foreach a $args {incr i;if {$s eq \"_\"} {set s $a;continue};if {$a eq \"--\"} {incr i;break};switch -glob -- $a {-f* {set f 1} -l* {set o l} -r* {set o r} -s* {set s _} default break}};set u [wrap [join [lrange $args $i end]] 45];set t [eval ST$s];if $f {set t [flip $t]};if {$o eq \"r\"} {ajoin \" \" $u \"\\nO\\n  o\" \"\\n$t\"} {ajoin \" \" \"\\n$t\" \"\\n  O\\no \" $u}}\n",
  "cached_ScheisseGern": "{} {if [catch ScheisseGern result] {set result [lindex_random $::cached_ScheisseGern]}; cache_list cached_ScheisseGern $result}\n",
  "batman": "{} {return \"batman.bat is a batch file with a binary bytecode\"}\n",
  "dexwx": "{{station kmia}} {dexterback [temperature $station]}\n",
  "mpk": "{} ratio2\n",
  "windowspatch": "{} {return \"Size: [rand 3000 4000] KB - [rand 4500 5500] KB \\n A security issue has been identified in [vulnerability] that could allow an attacker to compromise your Windows-based system and gain control over it. You can help protect your computer by installing this update from Microsoft. After you install this item, you may have to [regsub {ing} [sex_act] {}] your computer.\"}\n",
  "huh": "{} {bt huh}\n",
  "works": "args {return \"No, your mother works $args\"}\n",
  "card_diamond": "a { return \"$a\\n  /\\\\\\n /  \\\\\\n \\\\  /\\n  \\\\/\\n     $a\"; }\n",
  "svslol": "{} {svsnick [name] \"[svslolnick]\"}\n",
  "jewgirl": "{} {. [gis \"anne frank\"]}\n",
  "nwo_top": "{} {. \"\u0002\u000301,01âââââââââââââââââââââââââââââ\\n\u0002\u000301,01 \u000301,08      \u000308,01/!\\\\ CAUTION /!\\\\\u000301,08      \u0002\u000301,01 \u000301,00â\\n\u0002\u000301,01 \u000301,08   NEW WORLD ORDER AHEAD   \u0002\u000301,01 \u000301,00â\\n\u0002\u000301,01 \u000301,08 \u000308,01POTENTIAL HAZARDS INCLUDE\u000301,08 \u0002\u000301,01 \u000301,00â\\n\u0002\u000301,01 \u000301,08     Military Draft        \u0002\u000301,01 \u000301,00â\\n\u0002\u000301,01 \u000301,08    World War Three        \u0002\u000301,01 \u000301,00â\\n\"}\n",
  "roulette_squeeze": "{} {\n\tset old_chamber [cache fetch roulette current {roulette_reload}]\n\tset current_chamber $old_chamber\n\tset hot_chamber [cache get roulette hot]\n\tcache put roulette current [expr $current_chamber + 1]\n\tif {$old_chamber == $hot_chamber} {\n\t\tcache put roulette current 0;\n\t\treturn [roulette_kill]\n\t} else { \n\t\treturn [roulette_win] \n\t} \n}\n",
  "skifree": "args {subst [?? $::skifree]}\n",
  "go:place_black": "{x y} { go:place_piece $x $y black }\n",
  "matrixbutteshack": "{} {matrixify [gayflagify [butteshack]]}\n",
  "acrochar": "l { if [catch { lindex_random $::randacro($l) } ret] { return \"\"; }  ; return $ret }\n",
  "escape_regexp": "regexp {string map [list \\\\ {\\\\} ( {\\(} ) {\\)} \\{ {\\{} \\} {\\}} {[} {\\[} \\] {\\]} . {\\.} ? {\\?} ^ {\\^} + {\\+} | {\\|} {$} {\\$}] $regexp}\n",
  "overheard_in_manchester": "{} {return [join [lrange [lines [subst [regsub -line -all {^(.*?:) .*$} [overheard] {\\1 [pick 1 arabic 3 {join \"Clack clack clack.\"} 2 {join \"*purr*\"} 2 {join \"*lights the bong*\"}]}]]] 0 end-1] \\n]\\n--\\ Manchester}\n",
  "lremove_item": "{list_var item} {set index [lsearch -exact $list_var $item]; if {$index != -1} {upvar $list_var list ; lremove $list $index; return $list}}\n",
  "2pac": "{} {ajoin \"\" [sunglass [string map {{[. ]} {[ .]}} [flip [STfullcsammis]]]] [sunglass [STfullcsammis]]}\n",
  "okey_totem": "{} {join [list {  _____  } { /(.)  \\ } {(  ,|,(.)} { \\_<->_/ } { /~<->~\\ } {(  '|'(')} { \\(')__/ } { /(,)  \\ } {(  ,|,(,)} { \\_<->_/ } { /~<->~\\ } {(  '|'(')} { \\(')  / } {  ~~~~~  }] \\n}\n",
  "whatot": "args {join [mapx [lines [join $args]] line {concat Whatbot: $line}] \\n}\n",
  "threatening_samesnake": "{{who {}}} {ajoin \"\" [embed [flip [snake]] \"same\" 3 2] [. \"\\n\\n[wrap [. [name $who] [threaten]] 45]\"]}\n",
  "tooleyhot": "who {return \"$who the day u see me i swear to god you will be grabbing my cock and shovivng it up thier ur self UP\"}\n",
  "interrokalle": "{} {return \"<Kalle> What do I know about the [56k_word]? And what's the deal with [random_word]? Was I or was I not doing [strip_u [fetish_porn]] last night? Why do I hate [name]? Am I now, or have I ever been, a member of the [political_word] party? WHY DO I KEEP SAYING [string toupper [goon_word]]?\"}\n",
  "STfgcw": "{} {embed [chins 2] \\# 10 4}\n",
  "ac%comic": "{} {join [repeat 2 {ajoin {} [ac%frame [ac%char]] { } [ac%frame [ac%char]]}] \\n}\n",
  "qwantz-twitterified": "{{nick {}}} {qwantz [lreverse [get-last-twats [or [array_get_default ::twatmap $nick $nick] [array_random ::twatmap]] 11]]}\n",
  "knockjoke": "{{name {}}} {set name [name $name]; return \"Knock knock! \\nWho's there? \\n$name. \\n$name who? \\n$name the [singleethnic] [faglame]!!\"}\n",
  "su": "{} {bigtext \"saq update:\"}\n",
  "around": "{{who {}}} {if {$who eq \"\"} {set who [choose [ethnic_group] [political_figure] [name]]}; return \"[string tolower \"around $who, never [act_word] [plural [random_word]]\"]\"}\n",
  "negrolump": "who {return \"[negromg] [lump $who]\"}\n",
  "yenza_okuqondile": "Stephen_Harper {set Charles_Bronson $chinee; set Will_and_Grace_reruns [mccain_slogan]; return $insomnia; return $pre_Clear}\n",
  "not": "x {if {$x==0 || $x==\"\"} { return 1 } { return 0 }}\n",
  "constrain": "{lower upper n} {if {$n < $lower} {set lower} elseif {$n > $upper} {set upper} else {set n}}\n",
  "hitlerindustries": "{} {return \"I made a [jewproduct] out of [jewfullname]\"}\n",
  "movieplot": "{{who {}}} {return \"\\\"[movie][sequel]\\\" ([string totitle [genre]], [+ 1950 [rand 58]]) tells the story of [name $who] ([celebrity]) growing up in a [era] [country] coping with [choose [historical_event] [hotbutton]], and the cult of personality that formed around a then-unknown [political_figure] ([celebrity]). [review]\"}\n",
  "nb": "{{num 1}} {html [?? [rss_parse_feed_body [wget \"http://shitnoisebridgesays.tumblr.com/rss\"] 0]]}\n",
  "aimmm": "{n m} {set n [aimname $n];aim -n $n [string map \"[nick] $n\" [mm $m]]}\n",
  "wntd": "{} {return [choose \"missing close-bracket\" \"missing close-brace\" \"missing close-quote\" \"extra characters after close-brace\" \"extra characters after close-quote\" \"too many nested evaluations (infinite loop?)\" \"\\n[:I]\"]}\n",
  "ecard": "{} {return \"Hello, [singlerandomword] has created an eCard for you.\\nPlease visit http://[singlerandomword][tld]/[singlerandomword]/ecard.html within seven days to save your card.\"}\n",
  "ati": "{} {rainbow [pyramid \"ati sux \"]}\n",
  "goldron": "{} {pick 1 goldstandard 1 estandardeoro 1 nipron 1 standarddor}\n",
  "aimf_chucknorris": "args {aimify chucknorris $args}\n",
  "randrig": "{} {return \"You buy a kickass [random_word], and [act_word] the hell out of it, then you will get kickass [random_word]. Simple as that.\"}\n",
  "swingler_cal_items": "{} {. \"[color red on white] [color] [swingler_list_item]\\n[color blue on white] [color] [swingler_list_item]\\n[color green on white] [color] [swingler_list_item]\\n[color yellow on white] [color] [swingler_list_item]\"}\n",
  "dennisshrine": "{} {. [img-sparkly-dennis 0]\\n[img-dennisshrine]\\n[img-sparkly-dennis 2]\\n[img-sparkly-dennis 1] }\n",
  "HELLO": "{} {choose [falafel] [funds] [mao] [algebra] [rolloffle2] [terrorist2]}\n",
  "country_name": "{} {lindex_random $::country_name_dict}\n",
  "mroach14": "{} {. \"I wish CSS supported the correct spelling of colour and OpenSSH supported the correct spelling of authorised.\"}\n",
  "goonmeet": "{{fart {}}} {if {$fart eq \"\"} {set fart [wrap \"EXCUSE ME COULD YOU PLEASE PASS THE RANCH\" 17]}; embed [embed [embed [biggestgoon 7] [chins 4] 4 5] [chins 3] 18 6] [wrap $fart 17] 35 5 }\n",
  "clint": "{} {string map {sam: <clint>} [disgustsam]}\n",
  "swatsi": "{} {draw {111111111 100000001 101011101 101010001 101111101 100010101 101110101 100000001 111111111}}\n",
  "utf8_demangle": "args { encoding convertfrom utf-8 [join $args \" \"] }\n",
  "odinala": "{} {upper [join [repeat [rand 2 6] odin]]}\n",
  "metarandom": "{} { if {[rand 3] == 0} { return [gay_random] } { return [eval [lindex_random [info proc *word]]] } }\n",
  "gudramid": "{} {pyramid \"[gudrow_word] \"}\n",
  "q": "i {if {$i < 2} return; set h [expr {$i/2}]; concat [seq 1 $h] [seq [expr {$i%2? $h+1 : $h}] 1]}\n",
  "mmatech": "{} {. [choose [sexpart] [al_hat_word] [al_man_word] [faglame] [body_part] ]-[choose kick choke punch lock hook]}\n",
  "loljews": "{} {rainbow [hacker [jews]]}\n",
  "tinycordad": "{{cord {}}} {set cord [or $cord [cord_word]]; return \"[upper $cord] FOR SALE\\n[?? [split [string map [list cord $cord] [cord]] \\.]]\"}\n",
  "rot:isbold": "c {\n\tset B $::rotB; \n\tif {[string index $c 0]==$B} { return 1; } { return 0;}\n}\n",
  "proverb": "{} {lindex_random $::proverbs}\n",
  "invention": "{} {return \"[acquaintance] invented [strip_u [fetish_porn]] 4 rl\"}\n",
  "lastfm:buttesfm": "{} {lastfm:lastfm buttes}\n",
  "mk_aimify": "procname { set crap \"proc aimf_$procname {args} {aimify $procname \\$args}\"; eval $crap; return $crap   }\n",
  "drudge_minor_stories": "html {set ret [list]; foreach {match title} [regexp -all -nocase -inline {<a.*?>(.*?)</a>} $html] {set text [join [split [string trim [strip_html $title]] \\n]]; if [regexp {\\.\\.\\.$} $text] {lappend ret $text}}; return $ret}\n",
  "lastfm:butanfm": "{} {drawtable2 [map [lastfm:GetListenersHTML onebutan] {html {list [fixnick [lastfm:namemap [lastfm:user $html]]] [lastfm:artist $html] [lastfm:track $html]}}] {red green violet} [subst -nocommands {[color [next_in_list {orange blue}]][uchar f8ff]}]}\n",
  "darrenscurrentwallpaper": "{} {return \"darren_'s current xp wallpaper: [gis \"doujin huge tits\"]\"}\n",
  "macguy": "args {if ![llength $args] {set what [macrumors]} {set what [join $args]}; embed [ajoin \"  \" [STfedoragoon] \\n/ [wrap $what 50]] \"[uchar f8ff]   \\\\\" 14 7}\n",
  "albotspew": "{} {lindex_random $::albotspew_dict}\n",
  "dndcreature": "{} {return \"[dndattribute] [creature]\"}\n",
  "eljepe": "args {return \"< ninjalie > eljepe: your hair looks really pretty in that pic\\n< ninjalie > what $args did you use?\"}\n",
  "pretty_girl": "{} {lindex_random $::pretty_girl_dict}\n",
  "magicmissile": "{{who {}}} {. \"      __    \\n     /..\\\\   MAGIC MISSILE\\n    .\\\\_O/   U DEAD, [string toupper [join [name $who]]]\\n   /  \\'._           __\\n  /  \\\\__.\\'=.  [color blue]8====[color]/..\\\\[color blue]===D[color]\\n / ._/|            \\\\_o/\\n \\'.  \\'\\\\     \\n   \\\"/ /     \\n   / /      \\n   \\'_\\'\"}\n",
  "jerkfart": "{{a jerkc} {b sfart}} {join [compact [zip [split [$a]] [split [$b]]]]}\n",
  "boxcar_intro": "{} {?? $::boxcar_intros}",
  "bgt": "args {text gaychar [join $args]}\n",
  "plotdeg": "form {wget http://a.minivanmegafun.com/plot/plotnew.py?formula=[urlencode $form]}\n",
  "superpoop": "{} {lindex [regexp -inline {style=\"border:10px solid black;\" src=\"(.*?)\">} [http://www.superpoop.com/randomComicViewer.php]] 1}\n",
  "unknown:1:cmd/^cmd(s?)(:\\/\\/(?:.*?)\\/(.*))/": "{matches cmd args} {\n  set url http[lindex $matches 1][lindex $matches 2]\n  set command [lindex $matches 3]\n  call_remote_command $url $command $args {}\n}\n",
  "tags": "{} {\n  lsort [array names ::images_tagged]\n}\n",
  "raindrudge": "{} {. \"\u0002\u001fObamaReport\u001f\u0002\\n\" \"[join [map1 [lrange [drudge] 0 9] {strcat \u0003[gay]}] \\n]\"}\n",
  "dnd": "{} { stampsay -s kkk \"I am [opinion] [political_figure]'s \\\\\\\"[campaign]\\\\\\\" campaign!\"; }\n",
  "isquare": "{symbol {begin {}} {middle { }} {min 0} {max 7}} {set retval \"\"; for {set i $max} {$i >= $min} {set i [expr $i - 1]} {set retval ${retval}${begin}; for {set j 0} {$j < [expr pow($i, 2)]} {incr j} { set retval ${retval}${middle}; }; set retval ${retval}${symbol}\\n; }; return $retval}\n",
  "samesnake2": "{} {embed [samesnake] same 37 5}\n",
  "wikileaks_file": "{} { . [string map {\\  -} [lower [spook]]]-[rand 1900 2008].zip}\n",
  "count_kalles": "{} {return \"[llength [lfilter *kalle* [string tolower [names]]]] kalles\"}\n",
  "volcano": "{} {return {\u0002\u001f\u00031,5/\u00037,5W\u00031,5\\\u001f\u00031,14V O L C A N O\u000f}}\n",
  "times": "{count string} {repeat $count [list . $string]}\n",
  "dot": "{} { join $::hindudot \\n }\n",
  "hugespew": "{} {. [giga spew]}\n",
  "boxcar_story": "{} {subst \"[boxcar_intro] - [boxcar_story_body 7] [?? $::boxcar_story_finale]\"}",
  "arabland": "{} {return [lindex_random $::arabland]}\n",
  "falafel": "{} {return \"I think the PRESIDENT is the BOMB. SHOOT, sometimes, I think about GEORGE W. BUSH and wonder if he would like the ISLAMABAD deli on 14th st here in WASHINGTON, DC. I think the falafel is to DIE for. Or even to KILL for. It's so good it makes me wanna declare a falafel JIHAD on all the other INFIDEL falafel stands in the capital -- from those near THE WHITE HOUSE to those near CAPITAL HILL.\"}\n",
  "necco2": "{} { return \"not ready for the furtop\" }\n",
  "paste": "{cmd args} {if {[catch [concat $cmd $args] val] == 1} {error $val} {lindex [regexp -inline {<a href=\"(.*?)\">} [http post http://ossfans.org/paste paste [munge $val] function new .submit {Create paste}]] 1}}\n",
  "aimpoliticaljoke": "args { aim -n [aimname $args] [politicaljoke]}\n",
  "strip_w": "str {return [regsub -all { } $str _]}\n",
  "babelfrom": "args {set lang [lindex $args 0];babel ${lang}_en [lrange $args 1 end]}\n",
  "tuxpaint-bbq-gen": "url {\n\tset head \"(let ((img (image $url )) (w (width img)) (h (height img)) \";\n\tset ndongs [+ 1 [rand 6]];\n\tset dongs [join [map [seq 1 $ndongs] {{x} {. (dong$x (rotate (image [tuxpaintstamp]) (rand 360)))}}] \" \"];\n\tset body [inject [seq 1 $ndongs] img {{x o} {. (composite $x dong$o (rand w) (rand h))}}];\n\treturn \"$head $dongs ) $body )\"\n}\n",
  ".gh": "{} grouphug\n",
  "goonceleb": "{} {if {int(rand()*2) eq 0} {return \"omg do u think [celebrity] is a goon?\"} {return \"omg do u think [political_figure] is a goon?\"}}\n",
  "aimf_lamejoke": "args {aimify lamejoke $args}\n",
  "rufas": "{} {. \"            _______                [rucas]\\n           /  | | |\\\\              /       \\n _________/ \\\\_____ /\\\\____________________ \\n(| | | | | \\\\/     \\\\ / | | | | | | | | | ')\"}\n",
  "gudroids": "{} {return [bigtext gudroids]}\n",
  "airport_distance": "{icao1 icao2} {\n\tformat \"$icao1-$icao2: %.2f miles\" [gc_distance [get_coords $icao1] [get_coords $icao2]]\n}\n",
  "sentient": "{} {subst [lindex_random $::appliancejoke]}\n",
  "morebonghits?": "{} {wet YES}\n",
  "phpcrank": "{{nick {}}} {magick annotate http://i.buttes.org/index.php/http://www.hotflick.net/flicks/2006_Crank/006CRK_Jason_Statham_142.jpg 30 10 10 black [wrap [phpgoon $nick] 40]}\n",
  "rot:tranpose": "strl {\n    rot:serializemat [rot:transposematrix90 $strl]\n}\n",
  "pastebin": "{cmd args} {if {[catch [concat $cmd $args] val] == 1} {error $val} {lindex [regexp -inline {<a href=\"(.*?)\">} [http post http://siyobik.info/index.php?module=pastebin paste [munge $val] function new .submit {Create paste}]] 1}}\n",
  "saga": "{} {norway [randbible]}\n",
  "super_mike": "{{who {}}} {. \"[name $who]: god, haven't you seen Airplane!?\"}\n",
  "mroach8": "{} {return \"Just talked to some girl at AT&T that was so chill and backdated a 50 MB intl data plan for me. I love her and owe her a drink.\"}\n",
  "STsword": "{} { return \"    ()       \\n    ||       \\n  <-==->     \\n    ||       \\n    \\\\/       \";}\n",
  "babyomg": "{} {return \"[omg] <Ã¶>  IT'S A BOY!\"}\n",
  "fatgoonmeal": "{} {return \"Some [food_word], [fastfood] [food_word] with some [food_word], [fatcookingword] in the [cooking_appliance] for [expr {int(rand()*5)+2}] minutes and top off with some [food_word]. [fatgoon_finale].\"}\n",
  "mnomg": "{{a {}}} {return [repeatblock \" __  __ \\n/..\\\\/..\\\\\\n\\\\_O/\\\\O_/\" $a]}\n",
  "llast": "stuff {lindex $stuff end}\n",
  "nzip": "args {apply . [map [seq 0 [expr [apply max [map $args [& llength]]] - 1]] {index {map $args {list {lindex $list $index}}}}]}\n",
  "stevebama": "{} {return \"[stevenote]...just words?\"}\n",
  "tomfuck-gen": "url {. (let ((im (image [crop_to_fit_and_resize $url 0 0 185 185])) (bg (image http://churchturing.org/x/TomFuckSX.png))) (composite (composite bg im 137 143) bg 0 0)) }\n",
  "tw": "args {goonsay [join \"\" [twodongs] [lump]]}\n",
  "3gs_stat": "{} {join [map $::3gs_track {{track} {. [lindex $track 0] [300~track ups [lindex $track 1]]}}] \"\\n\"}\n",
  "hillary_flag": "{} {string map {MILLS BITCH {TWO AMERICAS} {ELECTABILITY}} [edwards_flag]}\n",
  "dong": "{} { return [balls] }\n",
  "h": "{} {. \u000300h\\n\u000301h\\n\u000302h\\n\u000303h\\n\u000304h\\n\u000305h\\n\u000306h\\n\u000307h\\n\u000308h\\n\u000309h\\n\u000310h\\n\u000311h\\n\u000312h\\n\u000313h\\n\u000314h\\n\u000315h }\n",
  "cnotice": "{} {return \"\u0002\u000300,05ÂÂÂ PLEASE DO NOT COPY, ALTER OR DISTRIBUTE ÂÂÂ\"}\n",
  "STghost": "{} { return \"    /(       \\n /\\\\('')_/\\\\   \\n \\\\__   __/   \\n   /   \\\\_    \\n   \\\\____/    \";}\n",
  "samtalk": "{} {return \"[bt hey sam,]\\n \\n[bt don't fuck up!]\\n \\n[bt - butans]\"}\n",
  "radeon20": "{} {return {<@radeon> Some jewish kid said something stupid\n<@radeon> and im like \"off to the ovens with you!\"\n<@radeon> and i got detention}}\n",
  "luremarty": "args {return \"SAM WHEN ARE YOU COMING TO HODSGIVING SO I CAN GRIFT YOU OUT OF $[lindex_random [seq 10 100]]\"}\n",
  "first": "list {lindex ${list} 0}\n",
  "ltg": "{} {. [letter_to_grandma]\\n \\n[fart]\"}\n",
  "cheeseburger": "args {. \u00038,1hey [name $args] yo momma in da lunch serves da cheezeburga\u0003}\n",
  "foldox": "{_x _y _dfl _list _code} {set _y $_dfl; upvar $_y $_y; upvar $_x $_x; foreach $_x $_list { set $_y [uplevel 1 $_code]}; return $_y; }\n",
  "sheepsay": "txt {ajoin \"\" [wrap [join $txt] 50] \"\\n\\\\\" [flip [STsheep]]}\n",
  "aimf_annoying": "args {aimify annoying $args}\n",
  "delgex": "args {delegate $args}\n",
  "oregon_trail_killed": "{{name {}}} {return [choose \"You killed [expr [rand 100000] + 200] lbs. of [name $name], but you can only carry 200 lbs back to the wagon.\" \"You killed [expr [rand 100000] + 200] lbs. of [name $name], but you can only carry 200 lbs back to the wagon.\\nIf you continue to hunt in this area, game will become scarce.\"]}\n",
  "tensegame": "{} {return \"It was the [choose bottom middle top] of [choose period down inning] [rand 10]. The [city] [string totitle [ethnic_group]] were down by one against the [city] [string totitle [ethnic_group]].  \\\"[string toupper [repeated_word]]\\\" the fans shouted as [waspfirstname] [niggername] took the [choose plate snap point]... and [choose scored missed] a [choose goal touchdown \"home run\" \"hole-in-one\"]!\"}\n",
  "esr": "{} {. \"> Damn straight I took it personally.  And if you ever again behave like\\n> that kind of disruptive asshole in public, insult me, and jeopardize\\n> the interests of our entire tribe, I'll take it just as personally --\\n> and I will find a way to make you regret it.  Watch your step.\"}\n",
  "rbl_quote": "{} {eval [lindex_random $::rbl_quote_procs]}\n",
  "hillary-arity": "{} {llength [info args hillary]}\n",
  "isa": "{{who {}} {n 5}} {join [repeat $n {set what [lindex_random $::randacro([string tolower [format \"%c\" [rand 65 90]]])]; if [regexp -nocase {^[aeiou]} $what] { set a \"an\"; } else { set a \"a\"; }; . \"[name [uplevel {. $who}]] is $a $what\"}] \\n}\n",
  "talking_mmm": "{{who {}}} {set temp [name $who]; . \"<$temp> [capitalize [talking_word_for $temp]]. [mmm]\";}\n",
  "btwe": "{} {subst [string map {* {[color white on white]*[color]}} [strip_color [ajoin \"   \" [ajoin \" \" [ajoin \" \" [flip [vflip [bgt L]]] [bgt {('~`\u001b)}]] [vflip [bgt L]]] [bgt w/e]]]]}\n",
  "STchink": "{} { return \"  ________ \\n /________\\\\\\n (  \\\\   / )\\n (____o___)\"; }\n",
  "autoconf": "{} {set word [random_word]; set ver_maj [rand 3]; if [rand 2] {set result \"/usr/lib/[hyphenword]-$ver_maj.[rand 10]/lib[hyphenize $word].so\"; if [rand 2] {append result \".$ver_maj\";}} {set result no}; return \"checking for $word... $result\"}\n"
}
